
ST7789_Display_main_DFLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009dfc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000086c  20000000  00009dfc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000500  2000086c  0000a668  0002086c  2**2
                  ALLOC
  3 .stack        00002004  20000d6c  0000ab68  0002086c  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  0002086c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020896  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002d696  00000000  00000000  000208ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004151  00000000  00000000  0004df85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ffe4  00000000  00000000  000520d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ce0  00000000  00000000  000620ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000010f8  00000000  00000000  00062d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d062  00000000  00000000  00063e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000148bc  00000000  00000000  00080ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a97b  00000000  00000000  000957b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000288c  00000000  00000000  0012012c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 2d 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     p-. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 29 01 00 00 4d 16 00 00 29 01 00 00     )...)...M...)...
      5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000086c 	.word	0x2000086c
      d4:	00000000 	.word	0x00000000
      d8:	00009dfc 	.word	0x00009dfc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000870 	.word	0x20000870
     108:	00009dfc 	.word	0x00009dfc
     10c:	00009dfc 	.word	0x00009dfc
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	stdio_redirect_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	000003d9 	.word	0x000003d9
     124:	00002155 	.word	0x00002155

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     12e:	4a2a      	ldr	r2, [pc, #168]	; (1d8 <Reset_Handler+0xac>)
     130:	4b2a      	ldr	r3, [pc, #168]	; (1dc <Reset_Handler+0xb0>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b29      	ldr	r3, [pc, #164]	; (1e0 <Reset_Handler+0xb4>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a29      	ldr	r2, [pc, #164]	; (1e4 <Reset_Handler+0xb8>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4823      	ldr	r0, [pc, #140]	; (1dc <Reset_Handler+0xb0>)
     14e:	4922      	ldr	r1, [pc, #136]	; (1d8 <Reset_Handler+0xac>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a23      	ldr	r2, [pc, #140]	; (1e8 <Reset_Handler+0xbc>)
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <Reset_Handler+0xc0>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	4921      	ldr	r1, [pc, #132]	; (1ec <Reset_Handler+0xc0>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a1d      	ldr	r2, [pc, #116]	; (1f0 <Reset_Handler+0xc4>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b1d      	ldr	r3, [pc, #116]	; (1f4 <Reset_Handler+0xc8>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     182:	39fd      	subs	r1, #253	; 0xfd
     184:	2390      	movs	r3, #144	; 0x90
     186:	005b      	lsls	r3, r3, #1
     188:	4a1b      	ldr	r2, [pc, #108]	; (1f8 <Reset_Handler+0xcc>)
     18a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     18c:	4a1b      	ldr	r2, [pc, #108]	; (1fc <Reset_Handler+0xd0>)
     18e:	78d3      	ldrb	r3, [r2, #3]
     190:	2503      	movs	r5, #3
     192:	43ab      	bics	r3, r5
     194:	2402      	movs	r4, #2
     196:	4323      	orrs	r3, r4
     198:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     19a:	78d3      	ldrb	r3, [r2, #3]
     19c:	270c      	movs	r7, #12
     19e:	43bb      	bics	r3, r7
     1a0:	2608      	movs	r6, #8
     1a2:	4333      	orrs	r3, r6
     1a4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a6:	4b16      	ldr	r3, [pc, #88]	; (200 <Reset_Handler+0xd4>)
     1a8:	7b98      	ldrb	r0, [r3, #14]
     1aa:	2230      	movs	r2, #48	; 0x30
     1ac:	4390      	bics	r0, r2
     1ae:	2220      	movs	r2, #32
     1b0:	4310      	orrs	r0, r2
     1b2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b4:	7b99      	ldrb	r1, [r3, #14]
     1b6:	43b9      	bics	r1, r7
     1b8:	4331      	orrs	r1, r6
     1ba:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1bc:	7b9a      	ldrb	r2, [r3, #14]
     1be:	43aa      	bics	r2, r5
     1c0:	4322      	orrs	r2, r4
     1c2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c4:	4a0f      	ldr	r2, [pc, #60]	; (204 <Reset_Handler+0xd8>)
     1c6:	6853      	ldr	r3, [r2, #4]
     1c8:	2180      	movs	r1, #128	; 0x80
     1ca:	430b      	orrs	r3, r1
     1cc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ce:	4b0e      	ldr	r3, [pc, #56]	; (208 <Reset_Handler+0xdc>)
     1d0:	4798      	blx	r3
        main();
     1d2:	4b0e      	ldr	r3, [pc, #56]	; (20c <Reset_Handler+0xe0>)
     1d4:	4798      	blx	r3
     1d6:	e7fe      	b.n	1d6 <Reset_Handler+0xaa>
     1d8:	00009dfc 	.word	0x00009dfc
     1dc:	20000000 	.word	0x20000000
     1e0:	2000086c 	.word	0x2000086c
     1e4:	20000004 	.word	0x20000004
     1e8:	2000086c 	.word	0x2000086c
     1ec:	20000d6c 	.word	0x20000d6c
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	0000228d 	.word	0x0000228d
     20c:	00001fd1 	.word	0x00001fd1

00000210 <FLASH_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
		break;
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
     210:	4a02      	ldr	r2, [pc, #8]	; (21c <FLASH_0_CLOCK_init+0xc>)
     212:	69d3      	ldr	r3, [r2, #28]
     214:	2104      	movs	r1, #4
     216:	430b      	orrs	r3, r1
     218:	61d3      	str	r3, [r2, #28]

void FLASH_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBB, NVMCTRL);
}
     21a:	4770      	bx	lr
     21c:	40000400 	.word	0x40000400

00000220 <FLASH_0_init>:

void FLASH_0_init(void)
{
     220:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     222:	4b03      	ldr	r3, [pc, #12]	; (230 <FLASH_0_init+0x10>)
     224:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     226:	4903      	ldr	r1, [pc, #12]	; (234 <FLASH_0_init+0x14>)
     228:	4803      	ldr	r0, [pc, #12]	; (238 <FLASH_0_init+0x18>)
     22a:	4b04      	ldr	r3, [pc, #16]	; (23c <FLASH_0_init+0x1c>)
     22c:	4798      	blx	r3
}
     22e:	bd10      	pop	{r4, pc}
     230:	00000211 	.word	0x00000211
     234:	41004000 	.word	0x41004000
     238:	200008cc 	.word	0x200008cc
     23c:	00001195 	.word	0x00001195

00000240 <SPI_Display_PORT_init>:

void SPI_Display_PORT_init(void)
{
     240:	b5f0      	push	{r4, r5, r6, r7, lr}
     242:	46c6      	mov	lr, r8
     244:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     246:	24c0      	movs	r4, #192	; 0xc0
     248:	05e4      	lsls	r4, r4, #23
     24a:	2310      	movs	r3, #16
     24c:	6063      	str	r3, [r4, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     24e:	4b23      	ldr	r3, [pc, #140]	; (2dc <SPI_Display_PORT_init+0x9c>)
     250:	4a23      	ldr	r2, [pc, #140]	; (2e0 <SPI_Display_PORT_init+0xa0>)
     252:	629a      	str	r2, [r3, #40]	; 0x28
     254:	4a23      	ldr	r2, [pc, #140]	; (2e4 <SPI_Display_PORT_init+0xa4>)
     256:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     258:	2144      	movs	r1, #68	; 0x44
     25a:	5c5a      	ldrb	r2, [r3, r1]
     25c:	2004      	movs	r0, #4
     25e:	4382      	bics	r2, r0
     260:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     262:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     264:	2601      	movs	r6, #1
     266:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     268:	2501      	movs	r5, #1
     26a:	432a      	orrs	r2, r5
     26c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     26e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     270:	3912      	subs	r1, #18
     272:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     274:	300b      	adds	r0, #11
     276:	4684      	mov	ip, r0
     278:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     27a:	2703      	movs	r7, #3
     27c:	433a      	orrs	r2, r7
     27e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     280:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     282:	2240      	movs	r2, #64	; 0x40
     284:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     286:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     288:	4a17      	ldr	r2, [pc, #92]	; (2e8 <SPI_Display_PORT_init+0xa8>)
     28a:	629a      	str	r2, [r3, #40]	; 0x28
     28c:	22c0      	movs	r2, #192	; 0xc0
     28e:	0612      	lsls	r2, r2, #24
     290:	4690      	mov	r8, r2
     292:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     294:	3114      	adds	r1, #20
     296:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     298:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     29a:	4328      	orrs	r0, r5
     29c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     29e:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2a0:	2033      	movs	r0, #51	; 0x33
     2a2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2a4:	4662      	mov	r2, ip
     2a6:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     2a8:	4339      	orrs	r1, r7
     2aa:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2ac:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2ae:	2180      	movs	r1, #128	; 0x80
     2b0:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2b2:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2b4:	490d      	ldr	r1, [pc, #52]	; (2ec <SPI_Display_PORT_init+0xac>)
     2b6:	6299      	str	r1, [r3, #40]	; 0x28
     2b8:	4642      	mov	r2, r8
     2ba:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2bc:	2147      	movs	r1, #71	; 0x47
     2be:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2c0:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2c2:	432a      	orrs	r2, r5
     2c4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2c6:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2c8:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2ca:	3938      	subs	r1, #56	; 0x38
     2cc:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2ce:	3121      	adds	r1, #33	; 0x21
     2d0:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2d2:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA07, PINMUX_PA07D_SERCOM0_PAD3);
}
     2d4:	bc04      	pop	{r2}
     2d6:	4690      	mov	r8, r2
     2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2da:	46c0      	nop			; (mov r8, r8)
     2dc:	41004400 	.word	0x41004400
     2e0:	40020010 	.word	0x40020010
     2e4:	c0020000 	.word	0xc0020000
     2e8:	40000040 	.word	0x40000040
     2ec:	40000080 	.word	0x40000080

000002f0 <SPI_Display_CLOCK_init>:
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     2f0:	4a04      	ldr	r2, [pc, #16]	; (304 <SPI_Display_CLOCK_init+0x14>)
     2f2:	6a13      	ldr	r3, [r2, #32]
     2f4:	2104      	movs	r1, #4
     2f6:	430b      	orrs	r3, r1
     2f8:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     2fa:	4a03      	ldr	r2, [pc, #12]	; (308 <SPI_Display_CLOCK_init+0x18>)
     2fc:	4b03      	ldr	r3, [pc, #12]	; (30c <SPI_Display_CLOCK_init+0x1c>)
     2fe:	805a      	strh	r2, [r3, #2]

void SPI_Display_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     300:	4770      	bx	lr
     302:	46c0      	nop			; (mov r8, r8)
     304:	40000400 	.word	0x40000400
     308:	00004014 	.word	0x00004014
     30c:	40000c00 	.word	0x40000c00

00000310 <SPI_Display_init>:

void SPI_Display_init(void)
{
     310:	b510      	push	{r4, lr}
	SPI_Display_CLOCK_init();
     312:	4b04      	ldr	r3, [pc, #16]	; (324 <SPI_Display_init+0x14>)
     314:	4798      	blx	r3
	spi_m_sync_init(&SPI_Display, SERCOM0);
     316:	4904      	ldr	r1, [pc, #16]	; (328 <SPI_Display_init+0x18>)
     318:	4804      	ldr	r0, [pc, #16]	; (32c <SPI_Display_init+0x1c>)
     31a:	4b05      	ldr	r3, [pc, #20]	; (330 <SPI_Display_init+0x20>)
     31c:	4798      	blx	r3
	SPI_Display_PORT_init();
     31e:	4b05      	ldr	r3, [pc, #20]	; (334 <SPI_Display_init+0x24>)
     320:	4798      	blx	r3
}
     322:	bd10      	pop	{r4, pc}
     324:	000002f1 	.word	0x000002f1
     328:	42000800 	.word	0x42000800
     32c:	200008f4 	.word	0x200008f4
     330:	00001245 	.word	0x00001245
     334:	00000241 	.word	0x00000241

00000338 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     338:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     33a:	4b0e      	ldr	r3, [pc, #56]	; (374 <TARGET_IO_PORT_init+0x3c>)
     33c:	2256      	movs	r2, #86	; 0x56
     33e:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     340:	2501      	movs	r5, #1
     342:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     344:	2401      	movs	r4, #1
     346:	4321      	orrs	r1, r4
     348:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     34a:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     34c:	203b      	movs	r0, #59	; 0x3b
     34e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     350:	3a47      	subs	r2, #71	; 0x47
     352:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     354:	3a0d      	subs	r2, #13
     356:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     358:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     35a:	2157      	movs	r1, #87	; 0x57
     35c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     35e:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     360:	4322      	orrs	r2, r4
     362:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     364:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     366:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     368:	3948      	subs	r1, #72	; 0x48
     36a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     36c:	3111      	adds	r1, #17
     36e:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     370:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     372:	bd30      	pop	{r4, r5, pc}
     374:	41004400 	.word	0x41004400

00000378 <TARGET_IO_CLOCK_init>:
     378:	4a04      	ldr	r2, [pc, #16]	; (38c <TARGET_IO_CLOCK_init+0x14>)
     37a:	6a13      	ldr	r3, [r2, #32]
     37c:	2120      	movs	r1, #32
     37e:	430b      	orrs	r3, r1
     380:	6213      	str	r3, [r2, #32]
     382:	4a03      	ldr	r2, [pc, #12]	; (390 <TARGET_IO_CLOCK_init+0x18>)
     384:	4b03      	ldr	r3, [pc, #12]	; (394 <TARGET_IO_CLOCK_init+0x1c>)
     386:	805a      	strh	r2, [r3, #2]

void TARGET_IO_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     388:	4770      	bx	lr
     38a:	46c0      	nop			; (mov r8, r8)
     38c:	40000400 	.word	0x40000400
     390:	00004017 	.word	0x00004017
     394:	40000c00 	.word	0x40000c00

00000398 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     398:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     39a:	4b05      	ldr	r3, [pc, #20]	; (3b0 <TARGET_IO_init+0x18>)
     39c:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM3, (void *)NULL);
     39e:	2200      	movs	r2, #0
     3a0:	4904      	ldr	r1, [pc, #16]	; (3b4 <TARGET_IO_init+0x1c>)
     3a2:	4805      	ldr	r0, [pc, #20]	; (3b8 <TARGET_IO_init+0x20>)
     3a4:	4b05      	ldr	r3, [pc, #20]	; (3bc <TARGET_IO_init+0x24>)
     3a6:	4798      	blx	r3
	TARGET_IO_PORT_init();
     3a8:	4b05      	ldr	r3, [pc, #20]	; (3c0 <TARGET_IO_init+0x28>)
     3aa:	4798      	blx	r3
}
     3ac:	bd10      	pop	{r4, pc}
     3ae:	46c0      	nop			; (mov r8, r8)
     3b0:	00000379 	.word	0x00000379
     3b4:	42001400 	.word	0x42001400
     3b8:	200008e8 	.word	0x200008e8
     3bc:	00001495 	.word	0x00001495
     3c0:	00000339 	.word	0x00000339

000003c4 <delay_driver_init>:

void delay_driver_init(void)
{
     3c4:	b510      	push	{r4, lr}
	delay_init(SysTick);
     3c6:	4802      	ldr	r0, [pc, #8]	; (3d0 <delay_driver_init+0xc>)
     3c8:	4b02      	ldr	r3, [pc, #8]	; (3d4 <delay_driver_init+0x10>)
     3ca:	4798      	blx	r3
}
     3cc:	bd10      	pop	{r4, pc}
     3ce:	46c0      	nop			; (mov r8, r8)
     3d0:	e000e010 	.word	0xe000e010
     3d4:	00001149 	.word	0x00001149

000003d8 <system_init>:

void system_init(void)
{
     3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3da:	46c6      	mov	lr, r8
     3dc:	b500      	push	{lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     3de:	4b2e      	ldr	r3, [pc, #184]	; (498 <system_init+0xc0>)
     3e0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3e2:	22c0      	movs	r2, #192	; 0xc0
     3e4:	05d2      	lsls	r2, r2, #23
     3e6:	2320      	movs	r3, #32
     3e8:	6193      	str	r3, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3ea:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3ec:	4b2b      	ldr	r3, [pc, #172]	; (49c <system_init+0xc4>)
     3ee:	492c      	ldr	r1, [pc, #176]	; (4a0 <system_init+0xc8>)
     3f0:	6299      	str	r1, [r3, #40]	; 0x28
     3f2:	25c0      	movs	r5, #192	; 0xc0
     3f4:	062d      	lsls	r5, r5, #24
     3f6:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3f8:	2445      	movs	r4, #69	; 0x45
     3fa:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3fc:	2001      	movs	r0, #1
     3fe:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     400:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     402:	2108      	movs	r1, #8
     404:	3453      	adds	r4, #83	; 0x53
     406:	5111      	str	r1, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     408:	3c10      	subs	r4, #16
     40a:	46a0      	mov	r8, r4
     40c:	5111      	str	r1, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     40e:	31a0      	adds	r1, #160	; 0xa0
     410:	4e24      	ldr	r6, [pc, #144]	; (4a4 <system_init+0xcc>)
     412:	505e      	str	r6, [r3, r1]
     414:	505d      	str	r5, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     416:	27c3      	movs	r7, #195	; 0xc3
     418:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     41a:	4386      	bics	r6, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     41c:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     41e:	3fb3      	subs	r7, #179	; 0xb3
     420:	2684      	movs	r6, #132	; 0x84
     422:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     424:	4e20      	ldr	r6, [pc, #128]	; (4a8 <system_init+0xd0>)
     426:	505e      	str	r6, [r3, r1]
     428:	4e20      	ldr	r6, [pc, #128]	; (4ac <system_init+0xd4>)
     42a:	505e      	str	r6, [r3, r1]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     42c:	26c4      	movs	r6, #196	; 0xc4
     42e:	5d9f      	ldrb	r7, [r3, r6]
     430:	3c84      	subs	r4, #132	; 0x84
     432:	43a7      	bics	r7, r4
     434:	559f      	strb	r7, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     436:	5d9f      	ldrb	r7, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     438:	4387      	bics	r7, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     43a:	559f      	strb	r7, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     43c:	3e30      	subs	r6, #48	; 0x30
     43e:	2740      	movs	r7, #64	; 0x40
     440:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     442:	4644      	mov	r4, r8
     444:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     446:	4f1a      	ldr	r7, [pc, #104]	; (4b0 <system_init+0xd8>)
     448:	505f      	str	r7, [r3, r1]
     44a:	505d      	str	r5, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     44c:	343e      	adds	r4, #62	; 0x3e
     44e:	5d1f      	ldrb	r7, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     450:	4387      	bics	r7, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     452:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     454:	2780      	movs	r7, #128	; 0x80
     456:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     458:	4644      	mov	r4, r8
     45a:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     45c:	4f15      	ldr	r7, [pc, #84]	; (4b4 <system_init+0xdc>)
     45e:	505f      	str	r7, [r3, r1]
     460:	505d      	str	r5, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     462:	27c7      	movs	r7, #199	; 0xc7
     464:	5ddd      	ldrb	r5, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     466:	4385      	bics	r5, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     468:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     46a:	2580      	movs	r5, #128	; 0x80
     46c:	05ed      	lsls	r5, r5, #23
     46e:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     470:	5115      	str	r5, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     472:	505d      	str	r5, [r3, r1]
     474:	4a10      	ldr	r2, [pc, #64]	; (4b8 <system_init+0xe0>)
     476:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     478:	3136      	adds	r1, #54	; 0x36
     47a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     47c:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     47e:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	FLASH_0_init();
     480:	4b0e      	ldr	r3, [pc, #56]	; (4bc <system_init+0xe4>)
     482:	4798      	blx	r3

	SPI_Display_init();
     484:	4b0e      	ldr	r3, [pc, #56]	; (4c0 <system_init+0xe8>)
     486:	4798      	blx	r3

	TARGET_IO_init();
     488:	4b0e      	ldr	r3, [pc, #56]	; (4c4 <system_init+0xec>)
     48a:	4798      	blx	r3

	delay_driver_init();
     48c:	4b0e      	ldr	r3, [pc, #56]	; (4c8 <system_init+0xf0>)
     48e:	4798      	blx	r3
}
     490:	bc04      	pop	{r2}
     492:	4690      	mov	r8, r2
     494:	bdf0      	pop	{r4, r5, r6, r7, pc}
     496:	46c0      	nop			; (mov r8, r8)
     498:	00001559 	.word	0x00001559
     49c:	41004400 	.word	0x41004400
     4a0:	40000020 	.word	0x40000020
     4a4:	40000008 	.word	0x40000008
     4a8:	40020010 	.word	0x40020010
     4ac:	c0020000 	.word	0xc0020000
     4b0:	40000040 	.word	0x40000040
     4b4:	40000080 	.word	0x40000080
     4b8:	c0004000 	.word	0xc0004000
     4bc:	00000221 	.word	0x00000221
     4c0:	00000311 	.word	0x00000311
     4c4:	00000399 	.word	0x00000399
     4c8:	000003c5 	.word	0x000003c5

000004cc <ST7789_SendCommand>:
		 ST7789_dtime_delay_ms(120);
		 ST7789_SendCommand(st7789,0x29);    //Display on
	return 0;
}
void ST7789_SendCommand(struct ST7789_param *st7789,uint8_t command)
{
     4cc:	b510      	push	{r4, lr}
     4ce:	0004      	movs	r4, r0
	/*set DC pin to low  */
	st7789->data[0]=command;
     4d0:	7281      	strb	r1, [r0, #10]
	set_ST7789_SPI_driver_pin(st7789->dc_pin,false);
     4d2:	7880      	ldrb	r0, [r0, #2]
     4d4:	2100      	movs	r1, #0
     4d6:	4b03      	ldr	r3, [pc, #12]	; (4e4 <ST7789_SendCommand+0x18>)
     4d8:	4798      	blx	r3
	spi_send_cmd_ST7789(st7789);
     4da:	0020      	movs	r0, r4
     4dc:	4b02      	ldr	r3, [pc, #8]	; (4e8 <ST7789_SendCommand+0x1c>)
     4de:	4798      	blx	r3
}
     4e0:	bd10      	pop	{r4, pc}
     4e2:	46c0      	nop			; (mov r8, r8)
     4e4:	00000829 	.word	0x00000829
     4e8:	00000855 	.word	0x00000855

000004ec <ST7789_SendData>:
void ST7789_SendData(struct ST7789_param *st7789,uint8_t data)
{
     4ec:	b510      	push	{r4, lr}
     4ee:	0004      	movs	r4, r0
	/*set DC pin to high  */
	st7789->data[0]=data;
     4f0:	7281      	strb	r1, [r0, #10]
	set_ST7789_SPI_driver_pin(st7789->dc_pin,true);
     4f2:	7880      	ldrb	r0, [r0, #2]
     4f4:	2101      	movs	r1, #1
     4f6:	4b03      	ldr	r3, [pc, #12]	; (504 <ST7789_SendData+0x18>)
     4f8:	4798      	blx	r3
	spi_send_cmd_ST7789(st7789);
     4fa:	0020      	movs	r0, r4
     4fc:	4b02      	ldr	r3, [pc, #8]	; (508 <ST7789_SendData+0x1c>)
     4fe:	4798      	blx	r3
}
     500:	bd10      	pop	{r4, pc}
     502:	46c0      	nop			; (mov r8, r8)
     504:	00000829 	.word	0x00000829
     508:	00000855 	.word	0x00000855

0000050c <ST7789_Sendspiburst>:
void ST7789_Sendspiburst(struct ST7789_param *st7789,uint8_t dc_status)
{
     50c:	b510      	push	{r4, lr}
     50e:	0004      	movs	r4, r0
	set_ST7789_SPI_driver_pin(st7789->dc_pin,dc_status);
     510:	7880      	ldrb	r0, [r0, #2]
     512:	4b03      	ldr	r3, [pc, #12]	; (520 <ST7789_Sendspiburst+0x14>)
     514:	4798      	blx	r3
	spi_transfer_ST7789(st7789);
     516:	0020      	movs	r0, r4
     518:	4b02      	ldr	r3, [pc, #8]	; (524 <ST7789_Sendspiburst+0x18>)
     51a:	4798      	blx	r3
}
     51c:	bd10      	pop	{r4, pc}
     51e:	46c0      	nop			; (mov r8, r8)
     520:	00000829 	.word	0x00000829
     524:	00000895 	.word	0x00000895

00000528 <ST7789_Reset>:
void ST7789_Reset(struct ST7789_param *st7789)
{
     528:	b570      	push	{r4, r5, r6, lr}
     52a:	0006      	movs	r6, r0
	set_ST7789_SPI_driver_pin(st7789->rst_pin,true);
     52c:	78c0      	ldrb	r0, [r0, #3]
     52e:	2101      	movs	r1, #1
     530:	4d07      	ldr	r5, [pc, #28]	; (550 <ST7789_Reset+0x28>)
     532:	47a8      	blx	r5
	ST7789_dtime_delay_ms(10);
     534:	200a      	movs	r0, #10
     536:	4c07      	ldr	r4, [pc, #28]	; (554 <ST7789_Reset+0x2c>)
     538:	47a0      	blx	r4
	set_ST7789_SPI_driver_pin(st7789->rst_pin,false);
     53a:	78f0      	ldrb	r0, [r6, #3]
     53c:	2100      	movs	r1, #0
     53e:	47a8      	blx	r5
	ST7789_dtime_delay_ms(25);
     540:	2019      	movs	r0, #25
     542:	47a0      	blx	r4
	set_ST7789_SPI_driver_pin(st7789->rst_pin,true);
     544:	78f0      	ldrb	r0, [r6, #3]
     546:	2101      	movs	r1, #1
     548:	47a8      	blx	r5
	ST7789_dtime_delay_ms(100);
     54a:	2064      	movs	r0, #100	; 0x64
     54c:	47a0      	blx	r4
}
     54e:	bd70      	pop	{r4, r5, r6, pc}
     550:	00000829 	.word	0x00000829
     554:	00000849 	.word	0x00000849

00000558 <ST7789_Init>:
{
     558:	b570      	push	{r4, r5, r6, lr}
     55a:	0004      	movs	r4, r0
     55c:	a804      	add	r0, sp, #16
     55e:	7800      	ldrb	r0, [r0, #0]
     560:	ad05      	add	r5, sp, #20
     562:	782d      	ldrb	r5, [r5, #0]
	st7789->cs_pin=CS_pin;
     564:	7023      	strb	r3, [r4, #0]
	st7789->rst_pin=RST_pin;
     566:	70e5      	strb	r5, [r4, #3]
	st7789->dc_pin=DC_pin;
     568:	70a0      	strb	r0, [r4, #2]
	st7789->busy_pin=0;/*no busy pin available here*/
     56a:	2300      	movs	r3, #0
     56c:	7063      	strb	r3, [r4, #1]
	st7789->height=Disp_Height;
     56e:	8121      	strh	r1, [r4, #8]
	st7789->width =Disp_Width;
     570:	80e2      	strh	r2, [r4, #6]
	st7789->data_size=1;
     572:	2201      	movs	r2, #1
     574:	4b6f      	ldr	r3, [pc, #444]	; (734 <ST7789_Init+0x1dc>)
     576:	52e2      	strh	r2, [r4, r3]
	st7789->buf_size=2;
     578:	3201      	adds	r2, #1
     57a:	3b02      	subs	r3, #2
     57c:	52e2      	strh	r2, [r4, r3]
	Font8.Height=8;
     57e:	4b6e      	ldr	r3, [pc, #440]	; (738 <ST7789_Init+0x1e0>)
     580:	3206      	adds	r2, #6
     582:	80da      	strh	r2, [r3, #6]
	Font8.Width =5;
     584:	2105      	movs	r1, #5
     586:	8099      	strh	r1, [r3, #4]
	Font12.Height=12;
     588:	4b6c      	ldr	r3, [pc, #432]	; (73c <ST7789_Init+0x1e4>)
     58a:	3107      	adds	r1, #7
     58c:	80d9      	strh	r1, [r3, #6]
	Font12.Width=8;
     58e:	809a      	strh	r2, [r3, #4]
	Font16.Height=16;
     590:	4b6b      	ldr	r3, [pc, #428]	; (740 <ST7789_Init+0x1e8>)
     592:	3208      	adds	r2, #8
     594:	80da      	strh	r2, [r3, #6]
	Font16.Width=11;
     596:	3a05      	subs	r2, #5
     598:	809a      	strh	r2, [r3, #4]
	Font20.Height=20;
     59a:	4b6a      	ldr	r3, [pc, #424]	; (744 <ST7789_Init+0x1ec>)
     59c:	3209      	adds	r2, #9
     59e:	80da      	strh	r2, [r3, #6]
	Font20.Width=14;
     5a0:	3a06      	subs	r2, #6
     5a2:	809a      	strh	r2, [r3, #4]
	ST7789_SPI_driver_init(st7789);
     5a4:	0020      	movs	r0, r4
     5a6:	4b68      	ldr	r3, [pc, #416]	; (748 <ST7789_Init+0x1f0>)
     5a8:	4798      	blx	r3
	ST7789_Reset(st7789);
     5aa:	0020      	movs	r0, r4
     5ac:	4b67      	ldr	r3, [pc, #412]	; (74c <ST7789_Init+0x1f4>)
     5ae:	4798      	blx	r3
		 ST7789_SendCommand(st7789,0x36);
     5b0:	2136      	movs	r1, #54	; 0x36
     5b2:	0020      	movs	r0, r4
     5b4:	4e66      	ldr	r6, [pc, #408]	; (750 <ST7789_Init+0x1f8>)
     5b6:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x00);
     5b8:	2100      	movs	r1, #0
     5ba:	0020      	movs	r0, r4
     5bc:	4d65      	ldr	r5, [pc, #404]	; (754 <ST7789_Init+0x1fc>)
     5be:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0x3A);
     5c0:	213a      	movs	r1, #58	; 0x3a
     5c2:	0020      	movs	r0, r4
     5c4:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x05);
     5c6:	2105      	movs	r1, #5
     5c8:	0020      	movs	r0, r4
     5ca:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xB2);
     5cc:	21b2      	movs	r1, #178	; 0xb2
     5ce:	0020      	movs	r0, r4
     5d0:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x0C);
     5d2:	210c      	movs	r1, #12
     5d4:	0020      	movs	r0, r4
     5d6:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x0C);
     5d8:	210c      	movs	r1, #12
     5da:	0020      	movs	r0, r4
     5dc:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x00);
     5de:	2100      	movs	r1, #0
     5e0:	0020      	movs	r0, r4
     5e2:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x33);
     5e4:	2133      	movs	r1, #51	; 0x33
     5e6:	0020      	movs	r0, r4
     5e8:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x33);
     5ea:	2133      	movs	r1, #51	; 0x33
     5ec:	0020      	movs	r0, r4
     5ee:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xB7);
     5f0:	21b7      	movs	r1, #183	; 0xb7
     5f2:	0020      	movs	r0, r4
     5f4:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x35);
     5f6:	2135      	movs	r1, #53	; 0x35
     5f8:	0020      	movs	r0, r4
     5fa:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xBB);
     5fc:	21bb      	movs	r1, #187	; 0xbb
     5fe:	0020      	movs	r0, r4
     600:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x19);
     602:	2119      	movs	r1, #25
     604:	0020      	movs	r0, r4
     606:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xC0);
     608:	21c0      	movs	r1, #192	; 0xc0
     60a:	0020      	movs	r0, r4
     60c:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x2C);
     60e:	212c      	movs	r1, #44	; 0x2c
     610:	0020      	movs	r0, r4
     612:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xC2);
     614:	21c2      	movs	r1, #194	; 0xc2
     616:	0020      	movs	r0, r4
     618:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x01);
     61a:	2101      	movs	r1, #1
     61c:	0020      	movs	r0, r4
     61e:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xC3);
     620:	21c3      	movs	r1, #195	; 0xc3
     622:	0020      	movs	r0, r4
     624:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x12);
     626:	2112      	movs	r1, #18
     628:	0020      	movs	r0, r4
     62a:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xC4);
     62c:	21c4      	movs	r1, #196	; 0xc4
     62e:	0020      	movs	r0, r4
     630:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x20);
     632:	2120      	movs	r1, #32
     634:	0020      	movs	r0, r4
     636:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xC6);
     638:	21c6      	movs	r1, #198	; 0xc6
     63a:	0020      	movs	r0, r4
     63c:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x0F);
     63e:	210f      	movs	r1, #15
     640:	0020      	movs	r0, r4
     642:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xD0);
     644:	21d0      	movs	r1, #208	; 0xd0
     646:	0020      	movs	r0, r4
     648:	47b0      	blx	r6
		 ST7789_SendData(st7789,0xA4);
     64a:	21a4      	movs	r1, #164	; 0xa4
     64c:	0020      	movs	r0, r4
     64e:	47a8      	blx	r5
		 ST7789_SendData(st7789,0xA1);
     650:	21a1      	movs	r1, #161	; 0xa1
     652:	0020      	movs	r0, r4
     654:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xE0);
     656:	21e0      	movs	r1, #224	; 0xe0
     658:	0020      	movs	r0, r4
     65a:	47b0      	blx	r6
		 ST7789_SendData(st7789,0xD0);
     65c:	21d0      	movs	r1, #208	; 0xd0
     65e:	0020      	movs	r0, r4
     660:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x04);
     662:	2104      	movs	r1, #4
     664:	0020      	movs	r0, r4
     666:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x0D);
     668:	210d      	movs	r1, #13
     66a:	0020      	movs	r0, r4
     66c:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x11);
     66e:	2111      	movs	r1, #17
     670:	0020      	movs	r0, r4
     672:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x13);
     674:	2113      	movs	r1, #19
     676:	0020      	movs	r0, r4
     678:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x2B);
     67a:	212b      	movs	r1, #43	; 0x2b
     67c:	0020      	movs	r0, r4
     67e:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x3F);
     680:	213f      	movs	r1, #63	; 0x3f
     682:	0020      	movs	r0, r4
     684:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x54);
     686:	2154      	movs	r1, #84	; 0x54
     688:	0020      	movs	r0, r4
     68a:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x4C);
     68c:	214c      	movs	r1, #76	; 0x4c
     68e:	0020      	movs	r0, r4
     690:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x18);
     692:	2118      	movs	r1, #24
     694:	0020      	movs	r0, r4
     696:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x0D);
     698:	210d      	movs	r1, #13
     69a:	0020      	movs	r0, r4
     69c:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x0B);
     69e:	210b      	movs	r1, #11
     6a0:	0020      	movs	r0, r4
     6a2:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x1F);
     6a4:	211f      	movs	r1, #31
     6a6:	0020      	movs	r0, r4
     6a8:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x23);
     6aa:	2123      	movs	r1, #35	; 0x23
     6ac:	0020      	movs	r0, r4
     6ae:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xE1);
     6b0:	21e1      	movs	r1, #225	; 0xe1
     6b2:	0020      	movs	r0, r4
     6b4:	47b0      	blx	r6
		 ST7789_SendData(st7789,0xD0);
     6b6:	21d0      	movs	r1, #208	; 0xd0
     6b8:	0020      	movs	r0, r4
     6ba:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x04);
     6bc:	2104      	movs	r1, #4
     6be:	0020      	movs	r0, r4
     6c0:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x0C);
     6c2:	210c      	movs	r1, #12
     6c4:	0020      	movs	r0, r4
     6c6:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x11);
     6c8:	2111      	movs	r1, #17
     6ca:	0020      	movs	r0, r4
     6cc:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x13);
     6ce:	2113      	movs	r1, #19
     6d0:	0020      	movs	r0, r4
     6d2:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x2C);
     6d4:	212c      	movs	r1, #44	; 0x2c
     6d6:	0020      	movs	r0, r4
     6d8:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x3F);
     6da:	213f      	movs	r1, #63	; 0x3f
     6dc:	0020      	movs	r0, r4
     6de:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x44);
     6e0:	2144      	movs	r1, #68	; 0x44
     6e2:	0020      	movs	r0, r4
     6e4:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x51);
     6e6:	2151      	movs	r1, #81	; 0x51
     6e8:	0020      	movs	r0, r4
     6ea:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x2F);
     6ec:	212f      	movs	r1, #47	; 0x2f
     6ee:	0020      	movs	r0, r4
     6f0:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x1F);
     6f2:	211f      	movs	r1, #31
     6f4:	0020      	movs	r0, r4
     6f6:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x1F);
     6f8:	211f      	movs	r1, #31
     6fa:	0020      	movs	r0, r4
     6fc:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x20);
     6fe:	2120      	movs	r1, #32
     700:	0020      	movs	r0, r4
     702:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x23);
     704:	2123      	movs	r1, #35	; 0x23
     706:	0020      	movs	r0, r4
     708:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0x21);
     70a:	2121      	movs	r1, #33	; 0x21
     70c:	0020      	movs	r0, r4
     70e:	47b0      	blx	r6
		 set_ST7789_SPI_driver_pin(st7789->cs_pin,true);
     710:	7820      	ldrb	r0, [r4, #0]
     712:	2101      	movs	r1, #1
     714:	4d10      	ldr	r5, [pc, #64]	; (758 <ST7789_Init+0x200>)
     716:	47a8      	blx	r5
		 set_ST7789_SPI_driver_pin(st7789->cs_pin,false);
     718:	7820      	ldrb	r0, [r4, #0]
     71a:	2100      	movs	r1, #0
     71c:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0x11);    //Exit Sleep
     71e:	2111      	movs	r1, #17
     720:	0020      	movs	r0, r4
     722:	47b0      	blx	r6
		 ST7789_dtime_delay_ms(120);
     724:	2078      	movs	r0, #120	; 0x78
     726:	4b0d      	ldr	r3, [pc, #52]	; (75c <ST7789_Init+0x204>)
     728:	4798      	blx	r3
		 ST7789_SendCommand(st7789,0x29);    //Display on
     72a:	2129      	movs	r1, #41	; 0x29
     72c:	0020      	movs	r0, r4
     72e:	47b0      	blx	r6
}
     730:	2000      	movs	r0, #0
     732:	bd70      	pop	{r4, r5, r6, pc}
     734:	0000020e 	.word	0x0000020e
     738:	20000020 	.word	0x20000020
     73c:	20000000 	.word	0x20000000
     740:	20000008 	.word	0x20000008
     744:	20000010 	.word	0x20000010
     748:	000007e1 	.word	0x000007e1
     74c:	00000529 	.word	0x00000529
     750:	000004cd 	.word	0x000004cd
     754:	000004ed 	.word	0x000004ed
     758:	00000829 	.word	0x00000829
     75c:	00000849 	.word	0x00000849

00000760 <ST7789_setAddrWindow>:
void ST7789_setAddrWindow(struct ST7789_param *st7789,uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
     760:	b5f0      	push	{r4, r5, r6, r7, lr}
     762:	b085      	sub	sp, #20
     764:	0004      	movs	r4, r0
     766:	000e      	movs	r6, r1
     768:	9201      	str	r2, [sp, #4]
     76a:	9302      	str	r3, [sp, #8]
     76c:	ab0a      	add	r3, sp, #40	; 0x28
     76e:	881f      	ldrh	r7, [r3, #0]
	ST7789_SendCommand(st7789,ST7789_CASET); // Column addr set
     770:	212a      	movs	r1, #42	; 0x2a
     772:	4d14      	ldr	r5, [pc, #80]	; (7c4 <ST7789_setAddrWindow+0x64>)
     774:	47a8      	blx	r5
	ST7789_SendData(st7789,x0 >> 8);
     776:	9603      	str	r6, [sp, #12]
     778:	0a31      	lsrs	r1, r6, #8
     77a:	0020      	movs	r0, r4
     77c:	4e12      	ldr	r6, [pc, #72]	; (7c8 <ST7789_setAddrWindow+0x68>)
     77e:	47b0      	blx	r6
	ST7789_SendData(st7789,x0 & 0xFF);     // XSTART
     780:	466b      	mov	r3, sp
     782:	7b19      	ldrb	r1, [r3, #12]
     784:	0020      	movs	r0, r4
     786:	47b0      	blx	r6
	ST7789_SendData(st7789,x1 >> 8);
     788:	9b02      	ldr	r3, [sp, #8]
     78a:	0a19      	lsrs	r1, r3, #8
     78c:	0020      	movs	r0, r4
     78e:	47b0      	blx	r6
	ST7789_SendData(st7789,x1 & 0xFF);     // XEND
     790:	466b      	mov	r3, sp
     792:	7a19      	ldrb	r1, [r3, #8]
     794:	0020      	movs	r0, r4
     796:	47b0      	blx	r6

	ST7789_SendCommand(st7789,ST7789_PASET); // Row addr set
     798:	212b      	movs	r1, #43	; 0x2b
     79a:	0020      	movs	r0, r4
     79c:	47a8      	blx	r5
	ST7789_SendData(st7789,y0>>8);
     79e:	9b01      	ldr	r3, [sp, #4]
     7a0:	0a19      	lsrs	r1, r3, #8
     7a2:	0020      	movs	r0, r4
     7a4:	47b0      	blx	r6
	ST7789_SendData(st7789,y0);     // YSTART
     7a6:	466b      	mov	r3, sp
     7a8:	7919      	ldrb	r1, [r3, #4]
     7aa:	0020      	movs	r0, r4
     7ac:	47b0      	blx	r6
	ST7789_SendData(st7789,y1>>8);
     7ae:	0a39      	lsrs	r1, r7, #8
     7b0:	0020      	movs	r0, r4
     7b2:	47b0      	blx	r6
	ST7789_SendData(st7789,y1);     // YEND
     7b4:	b2f9      	uxtb	r1, r7
     7b6:	0020      	movs	r0, r4
     7b8:	47b0      	blx	r6

	ST7789_SendCommand(st7789,ST7789_RAMWR); // write to RAM
     7ba:	212c      	movs	r1, #44	; 0x2c
     7bc:	0020      	movs	r0, r4
     7be:	47a8      	blx	r5
}
     7c0:	b005      	add	sp, #20
     7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7c4:	000004cd 	.word	0x000004cd
     7c8:	000004ed 	.word	0x000004ed

000007cc <ST7789_color565>:

uint16_t ST7789_color565(struct ST7789_param *st7789,uint8_t r, uint8_t g, uint8_t b)
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
     7cc:	00d2      	lsls	r2, r2, #3
     7ce:	20fc      	movs	r0, #252	; 0xfc
     7d0:	00c0      	lsls	r0, r0, #3
     7d2:	4002      	ands	r2, r0
     7d4:	08d8      	lsrs	r0, r3, #3
     7d6:	4310      	orrs	r0, r2
     7d8:	08c9      	lsrs	r1, r1, #3
     7da:	02c9      	lsls	r1, r1, #11
     7dc:	4308      	orrs	r0, r1
}
     7de:	4770      	bx	lr

000007e0 <ST7789_SPI_driver_init>:
//const uint32_t UC8151_spi_baudrate  = 1000000;
#define ASF4_spi_driver  driver_spi_m_sync_ST7789
struct io_descriptor *io_ST7789_spi;
 struct spi_xfer xfer;
void    ST7789_SPI_driver_init(struct ST7789_param *driver)
{
     7e0:	b510      	push	{r4, lr}
	st7789_spi.busy_pin=driver->busy_pin;
     7e2:	7842      	ldrb	r2, [r0, #1]
     7e4:	4b0b      	ldr	r3, [pc, #44]	; (814 <ST7789_SPI_driver_init+0x34>)
     7e6:	705a      	strb	r2, [r3, #1]
	st7789_spi.cs_pin  =driver->cs_pin;
     7e8:	7802      	ldrb	r2, [r0, #0]
     7ea:	701a      	strb	r2, [r3, #0]
	st7789_spi.dc_pin  =driver->dc_pin;
     7ec:	7882      	ldrb	r2, [r0, #2]
     7ee:	709a      	strb	r2, [r3, #2]
	st7789_spi.rst_pin =driver->rst_pin;
     7f0:	78c2      	ldrb	r2, [r0, #3]
     7f2:	70da      	strb	r2, [r3, #3]
	st7789_spi.height  =driver->height;
     7f4:	8902      	ldrh	r2, [r0, #8]
     7f6:	811a      	strh	r2, [r3, #8]
	st7789_spi.width   =driver->width;
     7f8:	88c2      	ldrh	r2, [r0, #6]
     7fa:	80da      	strh	r2, [r3, #6]
	st7789_spi.spi_driver_type=ASF4_spi_driver;
     7fc:	2201      	movs	r2, #1
     7fe:	711a      	strb	r2, [r3, #4]
	//spi_m_sync_set_baudrate(&SPI_Display,UC8151_spi_baudrate);
	/*in default the driver is sync spi*/
	/*don't forget to set the height and width of the display*/
	//driver->spi_driver_type = driver_spi_m_sync_ST7789;
	spi_m_sync_get_io_descriptor(&SPI_Display, &io_ST7789_spi);
     800:	4c05      	ldr	r4, [pc, #20]	; (818 <ST7789_SPI_driver_init+0x38>)
     802:	4906      	ldr	r1, [pc, #24]	; (81c <ST7789_SPI_driver_init+0x3c>)
     804:	0020      	movs	r0, r4
     806:	4b06      	ldr	r3, [pc, #24]	; (820 <ST7789_SPI_driver_init+0x40>)
     808:	4798      	blx	r3
	spi_m_sync_enable(&SPI_Display);	
     80a:	0020      	movs	r0, r4
     80c:	4b05      	ldr	r3, [pc, #20]	; (824 <ST7789_SPI_driver_init+0x44>)
     80e:	4798      	blx	r3
}
     810:	bd10      	pop	{r4, pc}
     812:	46c0      	nop			; (mov r8, r8)
     814:	20000914 	.word	0x20000914
     818:	200008f4 	.word	0x200008f4
     81c:	20000b30 	.word	0x20000b30
     820:	00001381 	.word	0x00001381
     824:	00001299 	.word	0x00001299

00000828 <set_ST7789_SPI_driver_pin>:
void    set_ST7789_SPI_driver_pin(uint8_t pin,uint8_t status)
{
	//gpio_set_pin_level(pin,status);
	gpio_set_port_level(GPIO_PORTB,1U << GPIO_PIN(pin),status);
     828:	231f      	movs	r3, #31
     82a:	4018      	ands	r0, r3
     82c:	3b1e      	subs	r3, #30
     82e:	4083      	lsls	r3, r0
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
     830:	2900      	cmp	r1, #0
     832:	d104      	bne.n	83e <set_ST7789_SPI_driver_pin+0x16>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     834:	2294      	movs	r2, #148	; 0x94
     836:	21c0      	movs	r1, #192	; 0xc0
     838:	05c9      	lsls	r1, r1, #23
     83a:	508b      	str	r3, [r1, r2]
}
     83c:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     83e:	2298      	movs	r2, #152	; 0x98
     840:	21c0      	movs	r1, #192	; 0xc0
     842:	05c9      	lsls	r1, r1, #23
     844:	508b      	str	r3, [r1, r2]
     846:	e7f9      	b.n	83c <set_ST7789_SPI_driver_pin+0x14>

00000848 <ST7789_dtime_delay_ms>:
uint8_t get_ST7789_SPI_driver_pin(uint8_t pin)
{
	return gpio_get_pin_level(pin);
}
void    ST7789_dtime_delay_ms(uint16_t dtime)
{
     848:	b510      	push	{r4, lr}
	delay_ms(dtime);
     84a:	4b01      	ldr	r3, [pc, #4]	; (850 <ST7789_dtime_delay_ms+0x8>)
     84c:	4798      	blx	r3
}
     84e:	bd10      	pop	{r4, pc}
     850:	0000115d 	.word	0x0000115d

00000854 <spi_send_cmd_ST7789>:
void    spi_send_cmd_ST7789(struct ST7789_param *driver)
{
     854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     856:	0006      	movs	r6, r0
	gpio_set_port_level(GPIO_PORTB,1U << GPIO_PIN(pin),status);
     858:	7803      	ldrb	r3, [r0, #0]
     85a:	251f      	movs	r5, #31
     85c:	402b      	ands	r3, r5
     85e:	2401      	movs	r4, #1
     860:	0022      	movs	r2, r4
     862:	409a      	lsls	r2, r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     864:	27c0      	movs	r7, #192	; 0xc0
     866:	05ff      	lsls	r7, r7, #23
     868:	2394      	movs	r3, #148	; 0x94
     86a:	50fa      	str	r2, [r7, r3]
			//xfer.txbuf=driver->data;
			//xfer.size =driver->data_size;			
			//spi_m_sync_transfer(&SPI_Display,&xfer);
			*/
			set_ST7789_SPI_driver_pin(driver->cs_pin, false);
			io_write(io_ST7789_spi,driver->data, driver->data_size);
     86c:	4b06      	ldr	r3, [pc, #24]	; (888 <spi_send_cmd_ST7789+0x34>)
     86e:	5ac2      	ldrh	r2, [r0, r3]
     870:	0001      	movs	r1, r0
     872:	310a      	adds	r1, #10
     874:	4b05      	ldr	r3, [pc, #20]	; (88c <spi_send_cmd_ST7789+0x38>)
     876:	6818      	ldr	r0, [r3, #0]
     878:	4b05      	ldr	r3, [pc, #20]	; (890 <spi_send_cmd_ST7789+0x3c>)
     87a:	4798      	blx	r3
	gpio_set_port_level(GPIO_PORTB,1U << GPIO_PIN(pin),status);
     87c:	7833      	ldrb	r3, [r6, #0]
     87e:	401d      	ands	r5, r3
     880:	40ac      	lsls	r4, r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     882:	2398      	movs	r3, #152	; 0x98
     884:	50fc      	str	r4, [r7, r3]
			set_ST7789_SPI_driver_pin(driver->cs_pin, true);
		#endif
}
     886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     888:	0000020e 	.word	0x0000020e
     88c:	20000b30 	.word	0x20000b30
     890:	000011dd 	.word	0x000011dd

00000894 <spi_transfer_ST7789>:
void    spi_transfer_ST7789(struct ST7789_param *driver)
{
     894:	b510      	push	{r4, lr}
	#if ASF4_spi_driver == driver_spi_m_sync_ST7789
		io_write(io_ST7789_spi,driver->buf_data, driver->buf_size);
     896:	2383      	movs	r3, #131	; 0x83
     898:	009b      	lsls	r3, r3, #2
     89a:	5ac2      	ldrh	r2, [r0, r3]
     89c:	0001      	movs	r1, r0
     89e:	310b      	adds	r1, #11
     8a0:	4b02      	ldr	r3, [pc, #8]	; (8ac <spi_transfer_ST7789+0x18>)
     8a2:	6818      	ldr	r0, [r3, #0]
     8a4:	4b02      	ldr	r3, [pc, #8]	; (8b0 <spi_transfer_ST7789+0x1c>)
     8a6:	4798      	blx	r3
	#endif
}
     8a8:	bd10      	pop	{r4, pc}
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	20000b30 	.word	0x20000b30
     8b0:	000011dd 	.word	0x000011dd

000008b4 <ST7789_drawAbsoultePixel>:
#include <math.h>
#include <fastmath.h>
#include "stdlib.h"
struct spi_xfer xf;
void ST7789_drawAbsoultePixel(struct ST7789_param *gfx,int16_t x, int16_t y, uint16_t color)
{
     8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8b6:	46de      	mov	lr, fp
     8b8:	4657      	mov	r7, sl
     8ba:	464e      	mov	r6, r9
     8bc:	b5c0      	push	{r6, r7, lr}
     8be:	b082      	sub	sp, #8
     8c0:	0004      	movs	r4, r0
     8c2:	000d      	movs	r5, r1
     8c4:	0016      	movs	r6, r2
     8c6:	9301      	str	r3, [sp, #4]
	in this method , prepare the data you want to send on one array and send them at once together
	SPI @CPU 8MHz is so slow to send , this would slightly increase the speed of writing data 
	to display
	
	*/
		if((x < 0) ||(x >= gfx->width) || (y < 0) || (y >= gfx->height)) return;
     8c8:	2900      	cmp	r1, #0
     8ca:	db07      	blt.n	8dc <ST7789_drawAbsoultePixel+0x28>
     8cc:	88c3      	ldrh	r3, [r0, #6]
     8ce:	4299      	cmp	r1, r3
     8d0:	da04      	bge.n	8dc <ST7789_drawAbsoultePixel+0x28>
     8d2:	2a00      	cmp	r2, #0
     8d4:	db02      	blt.n	8dc <ST7789_drawAbsoultePixel+0x28>
     8d6:	8903      	ldrh	r3, [r0, #8]
     8d8:	429a      	cmp	r2, r3
     8da:	db05      	blt.n	8e8 <ST7789_drawAbsoultePixel+0x34>
		gfx->buf_size=2;
		set_ST7789_SPI_driver_pin(gfx->dc_pin,true);
		spi_transfer_ST7789(gfx);
		/*finish the communication*/
		set_ST7789_SPI_driver_pin(gfx->cs_pin,true);
}
     8dc:	b002      	add	sp, #8
     8de:	bc1c      	pop	{r2, r3, r4}
     8e0:	4691      	mov	r9, r2
     8e2:	469a      	mov	sl, r3
     8e4:	46a3      	mov	fp, r4
     8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gfx->buf_data[0]=ST7789_CASET;
     8e8:	232a      	movs	r3, #42	; 0x2a
     8ea:	72c3      	strb	r3, [r0, #11]
		gfx->buf_data[1]=x & 0xFF;
     8ec:	b2cb      	uxtb	r3, r1
     8ee:	7303      	strb	r3, [r0, #12]
		gfx->buf_data[2]=(x+1) >> 8;
     8f0:	1c4a      	adds	r2, r1, #1
     8f2:	1212      	asrs	r2, r2, #8
     8f4:	7342      	strb	r2, [r0, #13]
		gfx->buf_data[3]=(x+1) & 0xFF;
     8f6:	3301      	adds	r3, #1
     8f8:	7383      	strb	r3, [r0, #14]
		gfx->buf_size=1;
     8fa:	2783      	movs	r7, #131	; 0x83
     8fc:	00bf      	lsls	r7, r7, #2
     8fe:	2301      	movs	r3, #1
     900:	469b      	mov	fp, r3
     902:	53c3      	strh	r3, [r0, r7]
		set_ST7789_SPI_driver_pin(gfx->cs_pin,false);
     904:	7800      	ldrb	r0, [r0, #0]
     906:	2100      	movs	r1, #0
     908:	4b1c      	ldr	r3, [pc, #112]	; (97c <ST7789_drawAbsoultePixel+0xc8>)
     90a:	469a      	mov	sl, r3
     90c:	4798      	blx	r3
		ST7789_Sendspiburst(gfx,false);
     90e:	2100      	movs	r1, #0
     910:	0020      	movs	r0, r4
     912:	4b1b      	ldr	r3, [pc, #108]	; (980 <ST7789_drawAbsoultePixel+0xcc>)
     914:	4699      	mov	r9, r3
     916:	4798      	blx	r3
		gfx->buf_data[0]=x >> 8;
     918:	122d      	asrs	r5, r5, #8
     91a:	72e5      	strb	r5, [r4, #11]
		gfx->buf_size=4;
     91c:	2504      	movs	r5, #4
     91e:	53e5      	strh	r5, [r4, r7]
		ST7789_Sendspiburst(gfx,true);
     920:	2101      	movs	r1, #1
     922:	0020      	movs	r0, r4
     924:	47c8      	blx	r9
		gfx->buf_data[1]=y ;
     926:	b2f3      	uxtb	r3, r6
     928:	7323      	strb	r3, [r4, #12]
		gfx->buf_data[2]=(y+1) >> 8;
     92a:	1c72      	adds	r2, r6, #1
     92c:	1212      	asrs	r2, r2, #8
     92e:	7362      	strb	r2, [r4, #13]
		gfx->buf_data[3]=y+1 ;
     930:	3301      	adds	r3, #1
     932:	73a3      	strb	r3, [r4, #14]
		gfx->buf_data[0]=ST7789_PASET;
     934:	232b      	movs	r3, #43	; 0x2b
     936:	72e3      	strb	r3, [r4, #11]
		gfx->buf_size=1;
     938:	465b      	mov	r3, fp
     93a:	53e3      	strh	r3, [r4, r7]
		ST7789_Sendspiburst(gfx,false); // Row addr set
     93c:	2100      	movs	r1, #0
     93e:	0020      	movs	r0, r4
     940:	47c8      	blx	r9
		gfx->buf_data[0]=y >> 8;
     942:	1236      	asrs	r6, r6, #8
     944:	72e6      	strb	r6, [r4, #11]
		gfx->buf_size=4;
     946:	53e5      	strh	r5, [r4, r7]
		ST7789_Sendspiburst(gfx,true);
     948:	2101      	movs	r1, #1
     94a:	0020      	movs	r0, r4
     94c:	47c8      	blx	r9
		gfx->buf_data[0]=ST7789_RAMWR;
     94e:	232c      	movs	r3, #44	; 0x2c
     950:	72e3      	strb	r3, [r4, #11]
		gfx->buf_size=1;
     952:	465b      	mov	r3, fp
     954:	53e3      	strh	r3, [r4, r7]
		ST7789_Sendspiburst(gfx,false);
     956:	2100      	movs	r1, #0
     958:	0020      	movs	r0, r4
     95a:	47c8      	blx	r9
		gfx->buf_data[0]=(color >> 8);
     95c:	9a01      	ldr	r2, [sp, #4]
     95e:	0a13      	lsrs	r3, r2, #8
     960:	72e3      	strb	r3, [r4, #11]
		gfx->buf_data[1]=color;
     962:	7322      	strb	r2, [r4, #12]
		gfx->buf_size=2;
     964:	2302      	movs	r3, #2
     966:	53e3      	strh	r3, [r4, r7]
		set_ST7789_SPI_driver_pin(gfx->dc_pin,true);
     968:	78a0      	ldrb	r0, [r4, #2]
     96a:	2101      	movs	r1, #1
     96c:	47d0      	blx	sl
		spi_transfer_ST7789(gfx);
     96e:	0020      	movs	r0, r4
     970:	4b04      	ldr	r3, [pc, #16]	; (984 <ST7789_drawAbsoultePixel+0xd0>)
     972:	4798      	blx	r3
		set_ST7789_SPI_driver_pin(gfx->cs_pin,true);
     974:	7820      	ldrb	r0, [r4, #0]
     976:	2101      	movs	r1, #1
     978:	47d0      	blx	sl
     97a:	e7af      	b.n	8dc <ST7789_drawAbsoultePixel+0x28>
     97c:	00000829 	.word	0x00000829
     980:	0000050d 	.word	0x0000050d
     984:	00000895 	.word	0x00000895

00000988 <ST7789_drawFastVLine>:
		 }
	 }
set_ST7789_SPI_driver_pin(gfx->cs_pin,true);
}
void ST7789_drawFastVLine(struct ST7789_param *gfx,int16_t x, int16_t y, int16_t h, uint16_t color)
{
     988:	b5f0      	push	{r4, r5, r6, r7, lr}
     98a:	b083      	sub	sp, #12
     98c:	0004      	movs	r4, r0
     98e:	001e      	movs	r6, r3
     990:	ab08      	add	r3, sp, #32
     992:	881d      	ldrh	r5, [r3, #0]
	 if((x >= gfx->width) || (y >= gfx->height)) return;
     994:	88c3      	ldrh	r3, [r0, #6]
     996:	4299      	cmp	r1, r3
     998:	da34      	bge.n	a04 <ST7789_drawFastVLine+0x7c>
     99a:	8903      	ldrh	r3, [r0, #8]
     99c:	429a      	cmp	r2, r3
     99e:	da31      	bge.n	a04 <ST7789_drawFastVLine+0x7c>
	 if((y+h-1) >= gfx->height)
     9a0:	18b0      	adds	r0, r6, r2
     9a2:	3801      	subs	r0, #1
     9a4:	4283      	cmp	r3, r0
     9a6:	dc01      	bgt.n	9ac <ST7789_drawFastVLine+0x24>
	 h = gfx->height-y;
     9a8:	1a9b      	subs	r3, r3, r2
     9aa:	b21e      	sxth	r6, r3
	 ST7789_setAddrWindow(gfx,x, y, x, y+h-1);
     9ac:	b289      	uxth	r1, r1
     9ae:	b292      	uxth	r2, r2
     9b0:	1e53      	subs	r3, r2, #1
     9b2:	199b      	adds	r3, r3, r6
     9b4:	b29b      	uxth	r3, r3
     9b6:	9300      	str	r3, [sp, #0]
     9b8:	000b      	movs	r3, r1
     9ba:	0020      	movs	r0, r4
     9bc:	4f13      	ldr	r7, [pc, #76]	; (a0c <ST7789_drawFastVLine+0x84>)
     9be:	47b8      	blx	r7
	 uint16_t count=0;
	 while (count<h*2)
     9c0:	0073      	lsls	r3, r6, #1
     9c2:	2b00      	cmp	r3, #0
     9c4:	dd20      	ble.n	a08 <ST7789_drawFastVLine+0x80>
	 {
		 gfx->buf_data[count++]= color >> 8;
     9c6:	0a2e      	lsrs	r6, r5, #8
     9c8:	2000      	movs	r0, #0
     9ca:	2200      	movs	r2, #0
     9cc:	1c51      	adds	r1, r2, #1
     9ce:	b289      	uxth	r1, r1
     9d0:	1820      	adds	r0, r4, r0
     9d2:	72c6      	strb	r6, [r0, #11]
		 gfx->buf_data[count++]= color;
     9d4:	3202      	adds	r2, #2
     9d6:	b292      	uxth	r2, r2
     9d8:	1861      	adds	r1, r4, r1
     9da:	72cd      	strb	r5, [r1, #11]
	 while (count<h*2)
     9dc:	0010      	movs	r0, r2
     9de:	429a      	cmp	r2, r3
     9e0:	dbf4      	blt.n	9cc <ST7789_drawFastVLine+0x44>
	 }
	 gfx->buf_size=count-1;
     9e2:	3a01      	subs	r2, #1
     9e4:	2383      	movs	r3, #131	; 0x83
     9e6:	009b      	lsls	r3, r3, #2
     9e8:	52e2      	strh	r2, [r4, r3]
	set_ST7789_SPI_driver_pin(gfx->dc_pin,true);
     9ea:	78a0      	ldrb	r0, [r4, #2]
     9ec:	2101      	movs	r1, #1
     9ee:	4d08      	ldr	r5, [pc, #32]	; (a10 <ST7789_drawFastVLine+0x88>)
     9f0:	47a8      	blx	r5
	set_ST7789_SPI_driver_pin(gfx->cs_pin,false);
     9f2:	7820      	ldrb	r0, [r4, #0]
     9f4:	2100      	movs	r1, #0
     9f6:	47a8      	blx	r5
	spi_transfer_ST7789(gfx);
     9f8:	0020      	movs	r0, r4
     9fa:	4b06      	ldr	r3, [pc, #24]	; (a14 <ST7789_drawFastVLine+0x8c>)
     9fc:	4798      	blx	r3
	set_ST7789_SPI_driver_pin(gfx->cs_pin,true);
     9fe:	7820      	ldrb	r0, [r4, #0]
     a00:	2101      	movs	r1, #1
     a02:	47a8      	blx	r5
}
     a04:	b003      	add	sp, #12
     a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	 uint16_t count=0;
     a08:	2200      	movs	r2, #0
     a0a:	e7ea      	b.n	9e2 <ST7789_drawFastVLine+0x5a>
     a0c:	00000761 	.word	0x00000761
     a10:	00000829 	.word	0x00000829
     a14:	00000895 	.word	0x00000895

00000a18 <ST7789_drawFastHLine>:
void ST7789_drawFastHLine(struct ST7789_param *gfx,int16_t x, int16_t y, int16_t w, uint16_t color)
{
     a18:	b5f0      	push	{r4, r5, r6, r7, lr}
     a1a:	b083      	sub	sp, #12
     a1c:	0004      	movs	r4, r0
     a1e:	001e      	movs	r6, r3
     a20:	ab08      	add	r3, sp, #32
     a22:	881d      	ldrh	r5, [r3, #0]
	 // Rudimentary clipping
	 if((x >= gfx->width) || (y >= gfx->height)) return;
     a24:	88c3      	ldrh	r3, [r0, #6]
     a26:	4299      	cmp	r1, r3
     a28:	da33      	bge.n	a92 <ST7789_drawFastHLine+0x7a>
     a2a:	8900      	ldrh	r0, [r0, #8]
     a2c:	4282      	cmp	r2, r0
     a2e:	da30      	bge.n	a92 <ST7789_drawFastHLine+0x7a>
	 if((x+w-1) >= gfx->width)  w = gfx->width -x;
     a30:	1870      	adds	r0, r6, r1
     a32:	3801      	subs	r0, #1
     a34:	4283      	cmp	r3, r0
     a36:	dc01      	bgt.n	a3c <ST7789_drawFastHLine+0x24>
     a38:	1a5b      	subs	r3, r3, r1
     a3a:	b21e      	sxth	r6, r3
	 ST7789_setAddrWindow(gfx,x, y, x+w-1, y);
     a3c:	b289      	uxth	r1, r1
     a3e:	b292      	uxth	r2, r2
     a40:	1e4b      	subs	r3, r1, #1
     a42:	199b      	adds	r3, r3, r6
     a44:	b29b      	uxth	r3, r3
     a46:	9200      	str	r2, [sp, #0]
     a48:	0020      	movs	r0, r4
     a4a:	4f14      	ldr	r7, [pc, #80]	; (a9c <ST7789_drawFastHLine+0x84>)
     a4c:	47b8      	blx	r7
	 uint16_t count=0;
	 while (count<w*2)
     a4e:	0073      	lsls	r3, r6, #1
     a50:	2b00      	cmp	r3, #0
     a52:	dd20      	ble.n	a96 <ST7789_drawFastHLine+0x7e>
	 {
		 gfx->buf_data[count++]= color >> 8;
     a54:	0a2e      	lsrs	r6, r5, #8
     a56:	2000      	movs	r0, #0
     a58:	2200      	movs	r2, #0
     a5a:	1c51      	adds	r1, r2, #1
     a5c:	b289      	uxth	r1, r1
     a5e:	1820      	adds	r0, r4, r0
     a60:	72c6      	strb	r6, [r0, #11]
		 gfx->buf_data[count++]= color;
     a62:	3202      	adds	r2, #2
     a64:	b292      	uxth	r2, r2
     a66:	1861      	adds	r1, r4, r1
     a68:	72cd      	strb	r5, [r1, #11]
	 while (count<w*2)
     a6a:	0010      	movs	r0, r2
     a6c:	429a      	cmp	r2, r3
     a6e:	dbf4      	blt.n	a5a <ST7789_drawFastHLine+0x42>
	 }
	 
	 gfx->buf_size=count-1;
     a70:	3a01      	subs	r2, #1
     a72:	2383      	movs	r3, #131	; 0x83
     a74:	009b      	lsls	r3, r3, #2
     a76:	52e2      	strh	r2, [r4, r3]
	 set_ST7789_SPI_driver_pin(gfx->dc_pin,true);
     a78:	78a0      	ldrb	r0, [r4, #2]
     a7a:	2101      	movs	r1, #1
     a7c:	4d08      	ldr	r5, [pc, #32]	; (aa0 <ST7789_drawFastHLine+0x88>)
     a7e:	47a8      	blx	r5
	 set_ST7789_SPI_driver_pin(gfx->cs_pin,false);	 
     a80:	7820      	ldrb	r0, [r4, #0]
     a82:	2100      	movs	r1, #0
     a84:	47a8      	blx	r5
	 spi_transfer_ST7789(gfx);	  
     a86:	0020      	movs	r0, r4
     a88:	4b06      	ldr	r3, [pc, #24]	; (aa4 <ST7789_drawFastHLine+0x8c>)
     a8a:	4798      	blx	r3
	 set_ST7789_SPI_driver_pin(gfx->cs_pin,true);
     a8c:	7820      	ldrb	r0, [r4, #0]
     a8e:	2101      	movs	r1, #1
     a90:	47a8      	blx	r5
}
     a92:	b003      	add	sp, #12
     a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	 uint16_t count=0;
     a96:	2200      	movs	r2, #0
     a98:	e7ea      	b.n	a70 <ST7789_drawFastHLine+0x58>
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	00000761 	.word	0x00000761
     aa0:	00000829 	.word	0x00000829
     aa4:	00000895 	.word	0x00000895

00000aa8 <ST7789_drawRect>:
void ST7789_drawRect(struct ST7789_param *gfx,int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
     aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aaa:	b087      	sub	sp, #28
     aac:	000f      	movs	r7, r1
     aae:	0019      	movs	r1, r3
     ab0:	ab0c      	add	r3, sp, #48	; 0x30
     ab2:	2400      	movs	r4, #0
     ab4:	5f1c      	ldrsh	r4, [r3, r4]
     ab6:	ab0d      	add	r3, sp, #52	; 0x34
     ab8:	881e      	ldrh	r6, [r3, #0]
	  ST7789_drawFastHLine(gfx,x, y, w, color);
     aba:	9600      	str	r6, [sp, #0]
     abc:	9105      	str	r1, [sp, #20]
     abe:	000b      	movs	r3, r1
     ac0:	9204      	str	r2, [sp, #16]
     ac2:	0039      	movs	r1, r7
     ac4:	9003      	str	r0, [sp, #12]
     ac6:	4d0f      	ldr	r5, [pc, #60]	; (b04 <ST7789_drawRect+0x5c>)
     ac8:	47a8      	blx	r5
	  ST7789_drawFastHLine(gfx,x, y+h-1, w, color);
     aca:	1e62      	subs	r2, r4, #1
     acc:	9b04      	ldr	r3, [sp, #16]
     ace:	469c      	mov	ip, r3
     ad0:	4462      	add	r2, ip
     ad2:	b212      	sxth	r2, r2
     ad4:	9600      	str	r6, [sp, #0]
     ad6:	9b05      	ldr	r3, [sp, #20]
     ad8:	0039      	movs	r1, r7
     ada:	9803      	ldr	r0, [sp, #12]
     adc:	47a8      	blx	r5
	  ST7789_drawFastVLine(gfx,x, y, h, color);
     ade:	9600      	str	r6, [sp, #0]
     ae0:	0023      	movs	r3, r4
     ae2:	9a04      	ldr	r2, [sp, #16]
     ae4:	0039      	movs	r1, r7
     ae6:	9803      	ldr	r0, [sp, #12]
     ae8:	4d07      	ldr	r5, [pc, #28]	; (b08 <ST7789_drawRect+0x60>)
     aea:	47a8      	blx	r5
	  ST7789_drawFastVLine(gfx,x+w-1, y, h, color);
     aec:	9905      	ldr	r1, [sp, #20]
     aee:	3901      	subs	r1, #1
     af0:	19c9      	adds	r1, r1, r7
     af2:	b209      	sxth	r1, r1
     af4:	9600      	str	r6, [sp, #0]
     af6:	0023      	movs	r3, r4
     af8:	9a04      	ldr	r2, [sp, #16]
     afa:	9803      	ldr	r0, [sp, #12]
     afc:	47a8      	blx	r5
}
     afe:	b007      	add	sp, #28
     b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	00000a19 	.word	0x00000a19
     b08:	00000989 	.word	0x00000989

00000b0c <ST7789_fillRect>:
void ST7789_fillRect(struct ST7789_param *gfx,const int16_t x,const int16_t y,const int16_t w,const int16_t h,const uint16_t color)
{
     b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b0e:	b085      	sub	sp, #20
     b10:	0005      	movs	r5, r0
     b12:	000c      	movs	r4, r1
     b14:	9103      	str	r1, [sp, #12]
     b16:	a90a      	add	r1, sp, #40	; 0x28
     b18:	2000      	movs	r0, #0
     b1a:	5e08      	ldrsh	r0, [r1, r0]
     b1c:	a90b      	add	r1, sp, #44	; 0x2c
     b1e:	880f      	ldrh	r7, [r1, #0]
	const uint16_t tot=x+w;
     b20:	b2a1      	uxth	r1, r4
     b22:	18cb      	adds	r3, r1, r3
     b24:	b29c      	uxth	r4, r3
	ST7789_setAddrWindow(gfx,x, y, x+w-1, y+h-1);
     b26:	b292      	uxth	r2, r2
     b28:	1e63      	subs	r3, r4, #1
     b2a:	b29b      	uxth	r3, r3
     b2c:	3801      	subs	r0, #1
     b2e:	1810      	adds	r0, r2, r0
     b30:	b280      	uxth	r0, r0
     b32:	9000      	str	r0, [sp, #0]
     b34:	0028      	movs	r0, r5
     b36:	4e16      	ldr	r6, [pc, #88]	; (b90 <ST7789_fillRect+0x84>)
     b38:	47b0      	blx	r6
	for (uint16_t i=0;i<tot*2;i+=2)
     b3a:	0026      	movs	r6, r4
     b3c:	0061      	lsls	r1, r4, #1
     b3e:	2900      	cmp	r1, #0
     b40:	dd0a      	ble.n	b58 <ST7789_fillRect+0x4c>
	{
		gfx->buf_data[i]= color >> 8;
     b42:	0a38      	lsrs	r0, r7, #8
     b44:	2200      	movs	r2, #0
     b46:	2300      	movs	r3, #0
     b48:	18aa      	adds	r2, r5, r2
     b4a:	72d0      	strb	r0, [r2, #11]
		gfx->buf_data[i+1]= color;
     b4c:	7317      	strb	r7, [r2, #12]
	for (uint16_t i=0;i<tot*2;i+=2)
     b4e:	3302      	adds	r3, #2
     b50:	b29b      	uxth	r3, r3
     b52:	001a      	movs	r2, r3
     b54:	428b      	cmp	r3, r1
     b56:	dbf7      	blt.n	b48 <ST7789_fillRect+0x3c>
	}
	gfx->buf_size=tot*2;
     b58:	0063      	lsls	r3, r4, #1
     b5a:	2283      	movs	r2, #131	; 0x83
     b5c:	0092      	lsls	r2, r2, #2
     b5e:	52ab      	strh	r3, [r5, r2]
	set_ST7789_SPI_driver_pin(gfx->dc_pin,true);
     b60:	78a8      	ldrb	r0, [r5, #2]
     b62:	2101      	movs	r1, #1
     b64:	4f0b      	ldr	r7, [pc, #44]	; (b94 <ST7789_fillRect+0x88>)
     b66:	47b8      	blx	r7
	set_ST7789_SPI_driver_pin(gfx->cs_pin,false);
     b68:	7828      	ldrb	r0, [r5, #0]
     b6a:	2100      	movs	r1, #0
     b6c:	47b8      	blx	r7
	  for (int16_t i=x; i<tot; i++) 
     b6e:	9c03      	ldr	r4, [sp, #12]
     b70:	42b4      	cmp	r4, r6
     b72:	da06      	bge.n	b82 <ST7789_fillRect+0x76>
	  {
		  spi_transfer_ST7789(gfx);
     b74:	4f08      	ldr	r7, [pc, #32]	; (b98 <ST7789_fillRect+0x8c>)
     b76:	0028      	movs	r0, r5
     b78:	47b8      	blx	r7
     b7a:	3401      	adds	r4, #1
     b7c:	b224      	sxth	r4, r4
	  for (int16_t i=x; i<tot; i++) 
     b7e:	42b4      	cmp	r4, r6
     b80:	dbf9      	blt.n	b76 <ST7789_fillRect+0x6a>
	  }
	  set_ST7789_SPI_driver_pin(gfx->cs_pin,true);
     b82:	7828      	ldrb	r0, [r5, #0]
     b84:	2101      	movs	r1, #1
     b86:	4b03      	ldr	r3, [pc, #12]	; (b94 <ST7789_fillRect+0x88>)
     b88:	4798      	blx	r3
}
     b8a:	b005      	add	sp, #20
     b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b8e:	46c0      	nop			; (mov r8, r8)
     b90:	00000761 	.word	0x00000761
     b94:	00000829 	.word	0x00000829
     b98:	00000895 	.word	0x00000895

00000b9c <ST7789_fillScreen>:
void ST7789_fillScreen(struct ST7789_param *gfx,uint16_t color)
{
     b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b9e:	b083      	sub	sp, #12
     ba0:	0005      	movs	r5, r0
     ba2:	000c      	movs	r4, r1
	uint16_t x=0;
	uint16_t y=0;
	uint16_t w=gfx->width;
     ba4:	88c7      	ldrh	r7, [r0, #6]
	uint16_t h=gfx->height;
	const uint16_t tot=x+w;
	
	ST7789_setAddrWindow(gfx,x, y, x+w-1, y+h-1);
     ba6:	1e7b      	subs	r3, r7, #1
     ba8:	b29b      	uxth	r3, r3
     baa:	8902      	ldrh	r2, [r0, #8]
     bac:	3a01      	subs	r2, #1
     bae:	b292      	uxth	r2, r2
     bb0:	9200      	str	r2, [sp, #0]
     bb2:	2200      	movs	r2, #0
     bb4:	2100      	movs	r1, #0
     bb6:	4e16      	ldr	r6, [pc, #88]	; (c10 <ST7789_fillScreen+0x74>)
     bb8:	47b0      	blx	r6
	for (uint16_t i=0;i<tot*2;i+=2)
     bba:	003e      	movs	r6, r7
     bbc:	0079      	lsls	r1, r7, #1
     bbe:	2900      	cmp	r1, #0
     bc0:	dd0a      	ble.n	bd8 <ST7789_fillScreen+0x3c>
	{
		gfx->buf_data[i]= color >> 8;
     bc2:	0a20      	lsrs	r0, r4, #8
     bc4:	2200      	movs	r2, #0
     bc6:	2300      	movs	r3, #0
     bc8:	18aa      	adds	r2, r5, r2
     bca:	72d0      	strb	r0, [r2, #11]
		gfx->buf_data[i+1]= color;
     bcc:	7314      	strb	r4, [r2, #12]
	for (uint16_t i=0;i<tot*2;i+=2)
     bce:	3302      	adds	r3, #2
     bd0:	b29b      	uxth	r3, r3
     bd2:	001a      	movs	r2, r3
     bd4:	428b      	cmp	r3, r1
     bd6:	dbf7      	blt.n	bc8 <ST7789_fillScreen+0x2c>
	}
	gfx->buf_size=tot*2;
     bd8:	007f      	lsls	r7, r7, #1
     bda:	2383      	movs	r3, #131	; 0x83
     bdc:	009b      	lsls	r3, r3, #2
     bde:	52ef      	strh	r7, [r5, r3]
	set_ST7789_SPI_driver_pin(gfx->dc_pin,true);
     be0:	78a8      	ldrb	r0, [r5, #2]
     be2:	2101      	movs	r1, #1
     be4:	4c0b      	ldr	r4, [pc, #44]	; (c14 <ST7789_fillScreen+0x78>)
     be6:	47a0      	blx	r4
	set_ST7789_SPI_driver_pin(gfx->cs_pin,false);
     be8:	7828      	ldrb	r0, [r5, #0]
     bea:	2100      	movs	r1, #0
     bec:	47a0      	blx	r4
	for (int16_t i=x; i<tot; i++) 
     bee:	2e00      	cmp	r6, #0
     bf0:	dd07      	ble.n	c02 <ST7789_fillScreen+0x66>
     bf2:	2400      	movs	r4, #0
	{
		spi_transfer_ST7789(gfx);
     bf4:	4f08      	ldr	r7, [pc, #32]	; (c18 <ST7789_fillScreen+0x7c>)
     bf6:	0028      	movs	r0, r5
     bf8:	47b8      	blx	r7
     bfa:	3401      	adds	r4, #1
     bfc:	b224      	sxth	r4, r4
	for (int16_t i=x; i<tot; i++) 
     bfe:	42b4      	cmp	r4, r6
     c00:	dbf9      	blt.n	bf6 <ST7789_fillScreen+0x5a>
	}
	set_ST7789_SPI_driver_pin(gfx->cs_pin,true);
     c02:	7828      	ldrb	r0, [r5, #0]
     c04:	2101      	movs	r1, #1
     c06:	4b03      	ldr	r3, [pc, #12]	; (c14 <ST7789_fillScreen+0x78>)
     c08:	4798      	blx	r3
}
     c0a:	b003      	add	sp, #12
     c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	00000761 	.word	0x00000761
     c14:	00000829 	.word	0x00000829
     c18:	00000895 	.word	0x00000895

00000c1c <ST7789_drawCircle>:
void ST7789_invertDisplay(struct ST7789_param *gfx,bool i)
{
	
}

void ST7789_drawCircle(struct ST7789_param *gfx,int16_t x0, int16_t y0, int16_t r,uint16_t color) {
     c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c1e:	46de      	mov	lr, fp
     c20:	4657      	mov	r7, sl
     c22:	464e      	mov	r6, r9
     c24:	4645      	mov	r5, r8
     c26:	b5e0      	push	{r5, r6, r7, lr}
     c28:	b089      	sub	sp, #36	; 0x24
     c2a:	000c      	movs	r4, r1
     c2c:	0017      	movs	r7, r2
     c2e:	4698      	mov	r8, r3
     c30:	9303      	str	r3, [sp, #12]
     c32:	ab12      	add	r3, sp, #72	; 0x48
     c34:	881a      	ldrh	r2, [r3, #0]
     c36:	0011      	movs	r1, r2
	int16_t f = 1 - r;
     c38:	4643      	mov	r3, r8
     c3a:	466a      	mov	r2, sp
     c3c:	8093      	strh	r3, [r2, #4]
     c3e:	8895      	ldrh	r5, [r2, #4]
     c40:	2301      	movs	r3, #1
     c42:	1b5b      	subs	r3, r3, r5
     c44:	b21b      	sxth	r3, r3
     c46:	469b      	mov	fp, r3
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
     c48:	03eb      	lsls	r3, r5, #15
     c4a:	1b5b      	subs	r3, r3, r5
     c4c:	005b      	lsls	r3, r3, #1
     c4e:	b21b      	sxth	r3, r3
     c50:	9307      	str	r3, [sp, #28]
	int16_t x = 0;
	int16_t y = r;

	ST7789_drawAbsoultePixel(gfx,x0  , y0+r, color);
     c52:	b2bb      	uxth	r3, r7
     c54:	469a      	mov	sl, r3
     c56:	18ea      	adds	r2, r5, r3
     c58:	b212      	sxth	r2, r2
     c5a:	9101      	str	r1, [sp, #4]
     c5c:	000b      	movs	r3, r1
     c5e:	0021      	movs	r1, r4
     c60:	9002      	str	r0, [sp, #8]
     c62:	4e48      	ldr	r6, [pc, #288]	; (d84 <ST7789_drawCircle+0x168>)
     c64:	47b0      	blx	r6
	ST7789_drawAbsoultePixel(gfx,x0  , y0-r, color);
     c66:	4653      	mov	r3, sl
     c68:	1b5a      	subs	r2, r3, r5
     c6a:	b212      	sxth	r2, r2
     c6c:	9b01      	ldr	r3, [sp, #4]
     c6e:	0021      	movs	r1, r4
     c70:	9802      	ldr	r0, [sp, #8]
     c72:	47b0      	blx	r6
	ST7789_drawAbsoultePixel(gfx,x0+r, y0  , color);
     c74:	b2a3      	uxth	r3, r4
     c76:	9304      	str	r3, [sp, #16]
     c78:	18e9      	adds	r1, r5, r3
     c7a:	b209      	sxth	r1, r1
     c7c:	9c01      	ldr	r4, [sp, #4]
     c7e:	0023      	movs	r3, r4
     c80:	003a      	movs	r2, r7
     c82:	9802      	ldr	r0, [sp, #8]
     c84:	47b0      	blx	r6
	ST7789_drawAbsoultePixel(gfx,x0-r, y0  , color);
     c86:	9b04      	ldr	r3, [sp, #16]
     c88:	1b59      	subs	r1, r3, r5
     c8a:	b209      	sxth	r1, r1
     c8c:	0023      	movs	r3, r4
     c8e:	003a      	movs	r2, r7
     c90:	9802      	ldr	r0, [sp, #8]
     c92:	47b0      	blx	r6

	while (x<y) {
     c94:	4643      	mov	r3, r8
     c96:	2b00      	cmp	r3, #0
     c98:	dd6d      	ble.n	d76 <ST7789_drawCircle+0x15a>
     c9a:	2301      	movs	r3, #1
     c9c:	4698      	mov	r8, r3
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		ST7789_drawAbsoultePixel(gfx,x0 + x, y0 + y, color);
     c9e:	4d39      	ldr	r5, [pc, #228]	; (d84 <ST7789_drawCircle+0x168>)
     ca0:	e059      	b.n	d56 <ST7789_drawCircle+0x13a>
		x++;
     ca2:	4643      	mov	r3, r8
     ca4:	b21b      	sxth	r3, r3
     ca6:	9305      	str	r3, [sp, #20]
     ca8:	4642      	mov	r2, r8
     caa:	0056      	lsls	r6, r2, #1
     cac:	b2b2      	uxth	r2, r6
     cae:	4691      	mov	r9, r2
		f += ddF_x;
     cb0:	1c53      	adds	r3, r2, #1
     cb2:	445b      	add	r3, fp
     cb4:	b21a      	sxth	r2, r3
     cb6:	4693      	mov	fp, r2
     cb8:	9b04      	ldr	r3, [sp, #16]
     cba:	001e      	movs	r6, r3
     cbc:	4446      	add	r6, r8
     cbe:	b2b6      	uxth	r6, r6
     cc0:	b232      	sxth	r2, r6
     cc2:	0011      	movs	r1, r2
		ST7789_drawAbsoultePixel(gfx,x0 + x, y0 + y, color);
     cc4:	466b      	mov	r3, sp
     cc6:	899c      	ldrh	r4, [r3, #12]
     cc8:	4652      	mov	r2, sl
     cca:	1917      	adds	r7, r2, r4
     ccc:	b23f      	sxth	r7, r7
     cce:	9b01      	ldr	r3, [sp, #4]
     cd0:	003a      	movs	r2, r7
     cd2:	9106      	str	r1, [sp, #24]
     cd4:	9802      	ldr	r0, [sp, #8]
     cd6:	47a8      	blx	r5
     cd8:	4648      	mov	r0, r9
     cda:	1a36      	subs	r6, r6, r0
     cdc:	b236      	sxth	r6, r6
		ST7789_drawAbsoultePixel(gfx,x0 - x, y0 + y, color);
     cde:	9b01      	ldr	r3, [sp, #4]
     ce0:	003a      	movs	r2, r7
     ce2:	0031      	movs	r1, r6
     ce4:	9802      	ldr	r0, [sp, #8]
     ce6:	47a8      	blx	r5
		ST7789_drawAbsoultePixel(gfx,x0 + x, y0 - y, color);
     ce8:	4650      	mov	r0, sl
     cea:	1b07      	subs	r7, r0, r4
     cec:	b23f      	sxth	r7, r7
     cee:	9b01      	ldr	r3, [sp, #4]
     cf0:	003a      	movs	r2, r7
     cf2:	9906      	ldr	r1, [sp, #24]
     cf4:	9802      	ldr	r0, [sp, #8]
     cf6:	47a8      	blx	r5
		ST7789_drawAbsoultePixel(gfx,x0 - x, y0 - y, color);
     cf8:	9b01      	ldr	r3, [sp, #4]
     cfa:	003a      	movs	r2, r7
     cfc:	0031      	movs	r1, r6
     cfe:	9802      	ldr	r0, [sp, #8]
     d00:	47a8      	blx	r5
		ST7789_drawAbsoultePixel(gfx,x0 + y, y0 + x, color);
     d02:	9b04      	ldr	r3, [sp, #16]
     d04:	191f      	adds	r7, r3, r4
     d06:	b23f      	sxth	r7, r7
     d08:	4646      	mov	r6, r8
     d0a:	4456      	add	r6, sl
     d0c:	b2b6      	uxth	r6, r6
     d0e:	b232      	sxth	r2, r6
     d10:	9b01      	ldr	r3, [sp, #4]
     d12:	9206      	str	r2, [sp, #24]
     d14:	0039      	movs	r1, r7
     d16:	9802      	ldr	r0, [sp, #8]
     d18:	47a8      	blx	r5
		ST7789_drawAbsoultePixel(gfx,x0 - y, y0 + x, color);
     d1a:	9b04      	ldr	r3, [sp, #16]
     d1c:	1b1c      	subs	r4, r3, r4
     d1e:	b224      	sxth	r4, r4
     d20:	9b01      	ldr	r3, [sp, #4]
     d22:	9a06      	ldr	r2, [sp, #24]
     d24:	0021      	movs	r1, r4
     d26:	9802      	ldr	r0, [sp, #8]
     d28:	47a8      	blx	r5
     d2a:	464a      	mov	r2, r9
     d2c:	1ab6      	subs	r6, r6, r2
     d2e:	b236      	sxth	r6, r6
		ST7789_drawAbsoultePixel(gfx,x0 + y, y0 - x, color);
     d30:	9b01      	ldr	r3, [sp, #4]
     d32:	0032      	movs	r2, r6
     d34:	0039      	movs	r1, r7
     d36:	9f02      	ldr	r7, [sp, #8]
     d38:	0038      	movs	r0, r7
     d3a:	47a8      	blx	r5
		ST7789_drawAbsoultePixel(gfx,x0 - y, y0 - x, color);
     d3c:	9b01      	ldr	r3, [sp, #4]
     d3e:	0032      	movs	r2, r6
     d40:	0021      	movs	r1, r4
     d42:	0038      	movs	r0, r7
     d44:	47a8      	blx	r5
     d46:	4642      	mov	r2, r8
     d48:	1c53      	adds	r3, r2, #1
     d4a:	b29a      	uxth	r2, r3
     d4c:	4690      	mov	r8, r2
	while (x<y) {
     d4e:	9a03      	ldr	r2, [sp, #12]
     d50:	9b05      	ldr	r3, [sp, #20]
     d52:	429a      	cmp	r2, r3
     d54:	dd0f      	ble.n	d76 <ST7789_drawCircle+0x15a>
		if (f >= 0) {
     d56:	465b      	mov	r3, fp
     d58:	2b00      	cmp	r3, #0
     d5a:	dba2      	blt.n	ca2 <ST7789_drawCircle+0x86>
			y--;
     d5c:	9b03      	ldr	r3, [sp, #12]
     d5e:	3b01      	subs	r3, #1
     d60:	b21b      	sxth	r3, r3
     d62:	9303      	str	r3, [sp, #12]
			ddF_y += 2;
     d64:	9b07      	ldr	r3, [sp, #28]
     d66:	3302      	adds	r3, #2
     d68:	b29b      	uxth	r3, r3
     d6a:	b21a      	sxth	r2, r3
     d6c:	9207      	str	r2, [sp, #28]
			f += ddF_y;
     d6e:	445b      	add	r3, fp
     d70:	b21b      	sxth	r3, r3
     d72:	469b      	mov	fp, r3
     d74:	e795      	b.n	ca2 <ST7789_drawCircle+0x86>
	}
}
     d76:	b009      	add	sp, #36	; 0x24
     d78:	bc3c      	pop	{r2, r3, r4, r5}
     d7a:	4690      	mov	r8, r2
     d7c:	4699      	mov	r9, r3
     d7e:	46a2      	mov	sl, r4
     d80:	46ab      	mov	fp, r5
     d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d84:	000008b5 	.word	0x000008b5

00000d88 <ST7789_fillCircleHelper>:
	}
	*/
}

void ST7789_fillCircleHelper(struct ST7789_param *gfx, int16_t x0, int16_t y0,int16_t r,uint8_t cornername,int16_t delta, uint16_t color)
{
     d88:	b5f0      	push	{r4, r5, r6, r7, lr}
     d8a:	46de      	mov	lr, fp
     d8c:	4657      	mov	r7, sl
     d8e:	464e      	mov	r6, r9
     d90:	4645      	mov	r5, r8
     d92:	b5e0      	push	{r5, r6, r7, lr}
     d94:	b08d      	sub	sp, #52	; 0x34
     d96:	9003      	str	r0, [sp, #12]
     d98:	9106      	str	r1, [sp, #24]
     d9a:	9207      	str	r2, [sp, #28]
     d9c:	001e      	movs	r6, r3
     d9e:	ab16      	add	r3, sp, #88	; 0x58
     da0:	7819      	ldrb	r1, [r3, #0]
     da2:	ab17      	add	r3, sp, #92	; 0x5c
     da4:	2000      	movs	r0, #0
     da6:	5e18      	ldrsh	r0, [r3, r0]
     da8:	ab18      	add	r3, sp, #96	; 0x60
     daa:	881b      	ldrh	r3, [r3, #0]
     dac:	4699      	mov	r9, r3
	
 int16_t f     = 1 - r;
     dae:	b2b2      	uxth	r2, r6
     db0:	2401      	movs	r4, #1
     db2:	1aa4      	subs	r4, r4, r2
     db4:	b224      	sxth	r4, r4
 int16_t ddF_x = 1;
 int16_t ddF_y = -2 * r;
     db6:	03d3      	lsls	r3, r2, #15
     db8:	1a9b      	subs	r3, r3, r2
     dba:	005b      	lsls	r3, r3, #1
     dbc:	b21b      	sxth	r3, r3
     dbe:	4698      	mov	r8, r3
 int16_t x     = 0;
 int16_t y     = r;

 while (x<y) {
     dc0:	2e00      	cmp	r6, #0
     dc2:	dd79      	ble.n	eb8 <ST7789_fillCircleHelper+0x130>
     dc4:	b283      	uxth	r3, r0
     dc6:	9308      	str	r3, [sp, #32]
     dc8:	3303      	adds	r3, #3
     dca:	b29b      	uxth	r3, r3
     dcc:	469b      	mov	fp, r3
     dce:	2501      	movs	r5, #1
	 }
	 x++;
	 ddF_x += 2;
	 f+= ddF_x;

	 if (cornername & 0x1) 
     dd0:	2301      	movs	r3, #1
     dd2:	400b      	ands	r3, r1
     dd4:	9304      	str	r3, [sp, #16]
	 {
		 
		 ST7789_drawFastVLine(gfx,x0+x, y0-y, 2*y+1+delta, color);
		 ST7789_drawFastVLine(gfx,x0+y, y0-x, 2*x+1+delta, color);
	 }
	 if (cornername & 0x2) {
     dd6:	2302      	movs	r3, #2
     dd8:	400b      	ands	r3, r1
     dda:	9305      	str	r3, [sp, #20]
     ddc:	465b      	mov	r3, fp
     dde:	9302      	str	r3, [sp, #8]
     de0:	e02c      	b.n	e3c <ST7789_fillCircleHelper+0xb4>
		 ST7789_drawFastVLine(gfx,x0+x, y0-y, 2*y+1+delta, color);
     de2:	466b      	mov	r3, sp
     de4:	8b19      	ldrh	r1, [r3, #24]
     de6:	8b9a      	ldrh	r2, [r3, #28]
     de8:	b2b3      	uxth	r3, r6
     dea:	9808      	ldr	r0, [sp, #32]
     dec:	3001      	adds	r0, #1
     dee:	469a      	mov	sl, r3
     df0:	005b      	lsls	r3, r3, #1
     df2:	18c3      	adds	r3, r0, r3
     df4:	b21b      	sxth	r3, r3
     df6:	920a      	str	r2, [sp, #40]	; 0x28
     df8:	4650      	mov	r0, sl
     dfa:	1a12      	subs	r2, r2, r0
     dfc:	b212      	sxth	r2, r2
     dfe:	9109      	str	r1, [sp, #36]	; 0x24
     e00:	1949      	adds	r1, r1, r5
     e02:	b209      	sxth	r1, r1
     e04:	4648      	mov	r0, r9
     e06:	9000      	str	r0, [sp, #0]
     e08:	9803      	ldr	r0, [sp, #12]
     e0a:	4f2f      	ldr	r7, [pc, #188]	; (ec8 <ST7789_fillCircleHelper+0x140>)
     e0c:	47b8      	blx	r7
		 ST7789_drawFastVLine(gfx,x0+y, y0-x, 2*x+1+delta, color);
     e0e:	466b      	mov	r3, sp
     e10:	891b      	ldrh	r3, [r3, #8]
     e12:	b21b      	sxth	r3, r3
     e14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     e16:	1b52      	subs	r2, r2, r5
     e18:	b212      	sxth	r2, r2
     e1a:	9909      	ldr	r1, [sp, #36]	; 0x24
     e1c:	4451      	add	r1, sl
     e1e:	b209      	sxth	r1, r1
     e20:	464f      	mov	r7, r9
     e22:	9700      	str	r7, [sp, #0]
     e24:	9803      	ldr	r0, [sp, #12]
     e26:	4f28      	ldr	r7, [pc, #160]	; (ec8 <ST7789_fillCircleHelper+0x140>)
     e28:	47b8      	blx	r7
     e2a:	e01b      	b.n	e64 <ST7789_fillCircleHelper+0xdc>
     e2c:	3501      	adds	r5, #1
     e2e:	b2ad      	uxth	r5, r5
     e30:	9f02      	ldr	r7, [sp, #8]
     e32:	3702      	adds	r7, #2
     e34:	b2bb      	uxth	r3, r7
     e36:	9302      	str	r3, [sp, #8]
 while (x<y) {
     e38:	455e      	cmp	r6, fp
     e3a:	dd3d      	ble.n	eb8 <ST7789_fillCircleHelper+0x130>
	 if (f >= 0) {
     e3c:	2c00      	cmp	r4, #0
     e3e:	db08      	blt.n	e52 <ST7789_fillCircleHelper+0xca>
		 y--;
     e40:	3e01      	subs	r6, #1
     e42:	b236      	sxth	r6, r6
		 ddF_y += 2;
     e44:	4643      	mov	r3, r8
     e46:	3302      	adds	r3, #2
     e48:	b29b      	uxth	r3, r3
     e4a:	b21a      	sxth	r2, r3
     e4c:	4690      	mov	r8, r2
		 f     += ddF_y;
     e4e:	191c      	adds	r4, r3, r4
     e50:	b224      	sxth	r4, r4
	 x++;
     e52:	b22b      	sxth	r3, r5
     e54:	469b      	mov	fp, r3
	 f+= ddF_x;
     e56:	006b      	lsls	r3, r5, #1
     e58:	3301      	adds	r3, #1
     e5a:	191c      	adds	r4, r3, r4
     e5c:	b224      	sxth	r4, r4
	 if (cornername & 0x1) 
     e5e:	9b04      	ldr	r3, [sp, #16]
     e60:	2b00      	cmp	r3, #0
     e62:	d1be      	bne.n	de2 <ST7789_fillCircleHelper+0x5a>
	 if (cornername & 0x2) {
     e64:	9b05      	ldr	r3, [sp, #20]
     e66:	2b00      	cmp	r3, #0
     e68:	d0e0      	beq.n	e2c <ST7789_fillCircleHelper+0xa4>
		 ST7789_drawFastVLine(gfx,x0-x, y0-y, 2*y+1+delta, color);
     e6a:	466b      	mov	r3, sp
     e6c:	8b19      	ldrh	r1, [r3, #24]
     e6e:	8b9a      	ldrh	r2, [r3, #28]
     e70:	b2b3      	uxth	r3, r6
     e72:	9808      	ldr	r0, [sp, #32]
     e74:	3001      	adds	r0, #1
     e76:	001f      	movs	r7, r3
     e78:	005b      	lsls	r3, r3, #1
     e7a:	18c3      	adds	r3, r0, r3
     e7c:	b21b      	sxth	r3, r3
     e7e:	0010      	movs	r0, r2
     e80:	920a      	str	r2, [sp, #40]	; 0x28
     e82:	970b      	str	r7, [sp, #44]	; 0x2c
     e84:	1bc2      	subs	r2, r0, r7
     e86:	b212      	sxth	r2, r2
     e88:	9109      	str	r1, [sp, #36]	; 0x24
     e8a:	1b49      	subs	r1, r1, r5
     e8c:	b209      	sxth	r1, r1
     e8e:	464f      	mov	r7, r9
     e90:	9700      	str	r7, [sp, #0]
     e92:	9803      	ldr	r0, [sp, #12]
     e94:	4f0c      	ldr	r7, [pc, #48]	; (ec8 <ST7789_fillCircleHelper+0x140>)
     e96:	46ba      	mov	sl, r7
     e98:	47b8      	blx	r7
		 ST7789_drawFastVLine(gfx,x0-y, y0-x, 2*x+1+delta, color);
     e9a:	466b      	mov	r3, sp
     e9c:	891b      	ldrh	r3, [r3, #8]
     e9e:	b21b      	sxth	r3, r3
     ea0:	980a      	ldr	r0, [sp, #40]	; 0x28
     ea2:	1b42      	subs	r2, r0, r5
     ea4:	b212      	sxth	r2, r2
     ea6:	9809      	ldr	r0, [sp, #36]	; 0x24
     ea8:	990b      	ldr	r1, [sp, #44]	; 0x2c
     eaa:	1a41      	subs	r1, r0, r1
     eac:	b209      	sxth	r1, r1
     eae:	464f      	mov	r7, r9
     eb0:	9700      	str	r7, [sp, #0]
     eb2:	9803      	ldr	r0, [sp, #12]
     eb4:	47d0      	blx	sl
     eb6:	e7b9      	b.n	e2c <ST7789_fillCircleHelper+0xa4>
	 }
 }
	
}
     eb8:	b00d      	add	sp, #52	; 0x34
     eba:	bc3c      	pop	{r2, r3, r4, r5}
     ebc:	4690      	mov	r8, r2
     ebe:	4699      	mov	r9, r3
     ec0:	46a2      	mov	sl, r4
     ec2:	46ab      	mov	fp, r5
     ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	00000989 	.word	0x00000989

00000ecc <ST7789_fillCircle>:
{
     ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ece:	b087      	sub	sp, #28
     ed0:	0016      	movs	r6, r2
     ed2:	001f      	movs	r7, r3
     ed4:	ab0c      	add	r3, sp, #48	; 0x30
     ed6:	881c      	ldrh	r4, [r3, #0]
	ST7789_drawFastVLine(gfx,x0, y0-r, 2*r+1, color);
     ed8:	b2ba      	uxth	r2, r7
     eda:	0053      	lsls	r3, r2, #1
     edc:	3301      	adds	r3, #1
     ede:	b21b      	sxth	r3, r3
     ee0:	1ab2      	subs	r2, r6, r2
     ee2:	b212      	sxth	r2, r2
     ee4:	9400      	str	r4, [sp, #0]
     ee6:	9105      	str	r1, [sp, #20]
     ee8:	9004      	str	r0, [sp, #16]
     eea:	4d07      	ldr	r5, [pc, #28]	; (f08 <ST7789_fillCircle+0x3c>)
     eec:	47a8      	blx	r5
	ST7789_fillCircleHelper(gfx,x0, y0, r, 3, 1,color);
     eee:	9402      	str	r4, [sp, #8]
     ef0:	2301      	movs	r3, #1
     ef2:	9301      	str	r3, [sp, #4]
     ef4:	3302      	adds	r3, #2
     ef6:	9300      	str	r3, [sp, #0]
     ef8:	003b      	movs	r3, r7
     efa:	0032      	movs	r2, r6
     efc:	9905      	ldr	r1, [sp, #20]
     efe:	9804      	ldr	r0, [sp, #16]
     f00:	4c02      	ldr	r4, [pc, #8]	; (f0c <ST7789_fillCircle+0x40>)
     f02:	47a0      	blx	r4
}
     f04:	b007      	add	sp, #28
     f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f08:	00000989 	.word	0x00000989
     f0c:	00000d89 	.word	0x00000d89

00000f10 <ST7789_DrawCharAt>:


void ST7789_DrawCharAt(struct ST7789_param *gfx,int x, int y, char ascii_char,sFONT *font,uint8_t font_size ,int colored)
{
     f10:	b5f0      	push	{r4, r5, r6, r7, lr}
     f12:	46de      	mov	lr, fp
     f14:	4657      	mov	r7, sl
     f16:	464e      	mov	r6, r9
     f18:	4645      	mov	r5, r8
     f1a:	b5e0      	push	{r5, r6, r7, lr}
     f1c:	b08d      	sub	sp, #52	; 0x34
     f1e:	9005      	str	r0, [sp, #20]
     f20:	910a      	str	r1, [sp, #40]	; 0x28
     f22:	920b      	str	r2, [sp, #44]	; 0x2c
     f24:	aa16      	add	r2, sp, #88	; 0x58
     f26:	ca80      	ldmia	r2!, {r7}
     f28:	7812      	ldrb	r2, [r2, #0]
     f2a:	9204      	str	r2, [sp, #16]
	int i, j;
	unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
     f2c:	88f9      	ldrh	r1, [r7, #6]
     f2e:	88b8      	ldrh	r0, [r7, #4]
     f30:	2207      	movs	r2, #7
     f32:	4002      	ands	r2, r0
     f34:	1e54      	subs	r4, r2, #1
     f36:	41a2      	sbcs	r2, r4
     f38:	08c0      	lsrs	r0, r0, #3
     f3a:	1812      	adds	r2, r2, r0
     f3c:	3b20      	subs	r3, #32
     f3e:	434b      	muls	r3, r1
     f40:	4353      	muls	r3, r2
     f42:	001e      	movs	r6, r3
	const unsigned char* ptr = &font->table[char_offset];
	//  printf("char %c\r\n",ascii_char);
	for (j = 0; j < font->Height; j++) {
     f44:	2300      	movs	r3, #0
     f46:	9307      	str	r3, [sp, #28]
     f48:	2900      	cmp	r1, #0
     f4a:	dd61      	ble.n	1010 <ST7789_DrawCharAt+0x100>
				{
					ST7789_drawAbsoultePixel(gfx,x + i, y + j, colored);
				}
				else
				{
					ST7789_fillRect(gfx,x+(i*font_size),y+(j*font_size),font_size,font_size, colored);
     f4c:	4b34      	ldr	r3, [pc, #208]	; (1020 <ST7789_DrawCharAt+0x110>)
     f4e:	469a      	mov	sl, r3
			if ((font->table[char_offset]) & (0x80 >> (i % 8))) 
     f50:	46b8      	mov	r8, r7
     f52:	0037      	movs	r7, r6
     f54:	e042      	b.n	fdc <ST7789_DrawCharAt+0xcc>
					ST7789_drawAbsoultePixel(gfx,x + i, y + j, colored);
     f56:	ab0a      	add	r3, sp, #40	; 0x28
     f58:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
     f5a:	9a08      	ldr	r2, [sp, #32]
     f5c:	1951      	adds	r1, r2, r5
     f5e:	b209      	sxth	r1, r1
     f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f62:	9805      	ldr	r0, [sp, #20]
     f64:	4f2f      	ldr	r7, [pc, #188]	; (1024 <ST7789_DrawCharAt+0x114>)
     f66:	47b8      	blx	r7
				}
				
			}
			if (i % 8 == 7) {
				ptr++;
				char_offset++;
     f68:	3c07      	subs	r4, #7
     f6a:	4262      	negs	r2, r4
     f6c:	4162      	adcs	r2, r4
     f6e:	9b03      	ldr	r3, [sp, #12]
     f70:	469c      	mov	ip, r3
     f72:	4494      	add	ip, r2
     f74:	4663      	mov	r3, ip
     f76:	9303      	str	r3, [sp, #12]
		for (i = 0; i < font->Width; i++) {
     f78:	3501      	adds	r5, #1
     f7a:	4643      	mov	r3, r8
     f7c:	889b      	ldrh	r3, [r3, #4]
     f7e:	444e      	add	r6, r9
     f80:	b2b6      	uxth	r6, r6
     f82:	42ab      	cmp	r3, r5
     f84:	dd1c      	ble.n	fc0 <ST7789_DrawCharAt+0xb0>
			if ((font->table[char_offset]) & (0x80 >> (i % 8))) 
     f86:	17eb      	asrs	r3, r5, #31
     f88:	0f5b      	lsrs	r3, r3, #29
     f8a:	18ec      	adds	r4, r5, r3
     f8c:	2207      	movs	r2, #7
     f8e:	4014      	ands	r4, r2
     f90:	1ae4      	subs	r4, r4, r3
     f92:	4643      	mov	r3, r8
     f94:	681b      	ldr	r3, [r3, #0]
     f96:	9a03      	ldr	r2, [sp, #12]
     f98:	5c9a      	ldrb	r2, [r3, r2]
     f9a:	2380      	movs	r3, #128	; 0x80
     f9c:	4123      	asrs	r3, r4
     f9e:	4213      	tst	r3, r2
     fa0:	d0e2      	beq.n	f68 <ST7789_DrawCharAt+0x58>
				if (font_size == 1)
     fa2:	9b04      	ldr	r3, [sp, #16]
     fa4:	2b01      	cmp	r3, #1
     fa6:	d0d6      	beq.n	f56 <ST7789_DrawCharAt+0x46>
					ST7789_fillRect(gfx,x+(i*font_size),y+(j*font_size),font_size,font_size, colored);
     fa8:	466b      	mov	r3, sp
     faa:	2210      	movs	r2, #16
     fac:	5e9b      	ldrsh	r3, [r3, r2]
     fae:	b231      	sxth	r1, r6
     fb0:	aa0a      	add	r2, sp, #40	; 0x28
     fb2:	8f12      	ldrh	r2, [r2, #56]	; 0x38
     fb4:	9201      	str	r2, [sp, #4]
     fb6:	9300      	str	r3, [sp, #0]
     fb8:	9a06      	ldr	r2, [sp, #24]
     fba:	9805      	ldr	r0, [sp, #20]
     fbc:	47d0      	blx	sl
     fbe:	e7d3      	b.n	f68 <ST7789_DrawCharAt+0x58>
     fc0:	4667      	mov	r7, ip
			}
		}
		if (font->Width % 8 != 0) {
     fc2:	2207      	movs	r2, #7
     fc4:	4013      	ands	r3, r2
			ptr++;
			char_offset++;
     fc6:	1e5a      	subs	r2, r3, #1
     fc8:	4193      	sbcs	r3, r2
     fca:	18ff      	adds	r7, r7, r3
	for (j = 0; j < font->Height; j++) {
     fcc:	9b07      	ldr	r3, [sp, #28]
     fce:	3301      	adds	r3, #1
     fd0:	001a      	movs	r2, r3
     fd2:	9307      	str	r3, [sp, #28]
     fd4:	4643      	mov	r3, r8
     fd6:	88db      	ldrh	r3, [r3, #6]
     fd8:	4293      	cmp	r3, r2
     fda:	dd19      	ble.n	1010 <ST7789_DrawCharAt+0x100>
		for (i = 0; i < font->Width; i++) {
     fdc:	4643      	mov	r3, r8
     fde:	889b      	ldrh	r3, [r3, #4]
     fe0:	2b00      	cmp	r3, #0
     fe2:	ddee      	ble.n	fc2 <ST7789_DrawCharAt+0xb2>
					ST7789_fillRect(gfx,x+(i*font_size),y+(j*font_size),font_size,font_size, colored);
     fe4:	466b      	mov	r3, sp
     fe6:	8a1b      	ldrh	r3, [r3, #16]
     fe8:	4699      	mov	r9, r3
     fea:	466b      	mov	r3, sp
     fec:	8b9b      	ldrh	r3, [r3, #28]
     fee:	466a      	mov	r2, sp
     ff0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
     ff2:	4649      	mov	r1, r9
     ff4:	4359      	muls	r1, r3
     ff6:	1851      	adds	r1, r2, r1
     ff8:	b209      	sxth	r1, r1
     ffa:	9106      	str	r1, [sp, #24]
     ffc:	4669      	mov	r1, sp
     ffe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    1000:	9108      	str	r1, [sp, #32]
    1002:	000e      	movs	r6, r1
    1004:	2500      	movs	r5, #0
					ST7789_drawAbsoultePixel(gfx,x + i, y + j, colored);
    1006:	189b      	adds	r3, r3, r2
    1008:	b21b      	sxth	r3, r3
    100a:	9309      	str	r3, [sp, #36]	; 0x24
    100c:	9703      	str	r7, [sp, #12]
    100e:	e7ba      	b.n	f86 <ST7789_DrawCharAt+0x76>
		}
	}
}
    1010:	b00d      	add	sp, #52	; 0x34
    1012:	bc3c      	pop	{r2, r3, r4, r5}
    1014:	4690      	mov	r8, r2
    1016:	4699      	mov	r9, r3
    1018:	46a2      	mov	sl, r4
    101a:	46ab      	mov	fp, r5
    101c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    101e:	46c0      	nop			; (mov r8, r8)
    1020:	00000b0d 	.word	0x00000b0d
    1024:	000008b5 	.word	0x000008b5

00001028 <ST7789_DrawStringAt>:

void ST7789_DrawStringAt(struct ST7789_param *gfx,int x, int y, const char* text, sFONT* font,uint8_t font_size ,int colored)
	{
    1028:	b5f0      	push	{r4, r5, r6, r7, lr}
    102a:	46d6      	mov	lr, sl
    102c:	464f      	mov	r7, r9
    102e:	b580      	push	{r7, lr}
    1030:	b087      	sub	sp, #28
    1032:	9004      	str	r0, [sp, #16]
    1034:	000d      	movs	r5, r1
    1036:	9205      	str	r2, [sp, #20]
    1038:	001c      	movs	r4, r3
    103a:	ab0e      	add	r3, sp, #56	; 0x38
    103c:	cb80      	ldmia	r3!, {r7}
    103e:	781b      	ldrb	r3, [r3, #0]
    1040:	4699      	mov	r9, r3
    1042:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1044:	469a      	mov	sl, r3
		const char* p_text = text;
		unsigned int counter = 0;
		int refcolumn = x;
		
		/* Send the string character by character on EPD */
		while (*p_text != 0) {
    1046:	7823      	ldrb	r3, [r4, #0]
    1048:	2b00      	cmp	r3, #0
    104a:	d011      	beq.n	1070 <ST7789_DrawStringAt+0x48>
			/* Display one character on EPD */
			ST7789_DrawCharAt(gfx,refcolumn, y, *p_text, font,font_size ,colored);
    104c:	4e0b      	ldr	r6, [pc, #44]	; (107c <ST7789_DrawStringAt+0x54>)
    104e:	4652      	mov	r2, sl
    1050:	9202      	str	r2, [sp, #8]
    1052:	464a      	mov	r2, r9
    1054:	9201      	str	r2, [sp, #4]
    1056:	9700      	str	r7, [sp, #0]
    1058:	9a05      	ldr	r2, [sp, #20]
    105a:	0029      	movs	r1, r5
    105c:	9804      	ldr	r0, [sp, #16]
    105e:	47b0      	blx	r6
			/* Decrement the column position by 16 */
			refcolumn += (font->Width*font_size);
    1060:	88bb      	ldrh	r3, [r7, #4]
    1062:	464a      	mov	r2, r9
    1064:	4353      	muls	r3, r2
    1066:	18ed      	adds	r5, r5, r3
			/* Point on the next character */
			p_text++;
    1068:	3401      	adds	r4, #1
		while (*p_text != 0) {
    106a:	7823      	ldrb	r3, [r4, #0]
    106c:	2b00      	cmp	r3, #0
    106e:	d1ee      	bne.n	104e <ST7789_DrawStringAt+0x26>
			counter++;
		}
	}
    1070:	b007      	add	sp, #28
    1072:	bc0c      	pop	{r2, r3}
    1074:	4691      	mov	r9, r2
    1076:	469a      	mov	sl, r3
    1078:	bdf0      	pop	{r4, r5, r6, r7, pc}
    107a:	46c0      	nop			; (mov r8, r8)
    107c:	00000f11 	.word	0x00000f11

00001080 <ST7789_drawBitmap>:
	
void ST7789_drawBitmap(struct ST7789_param *gfx,int16_t x, int16_t y,const uint8_t *bitmap, int16_t w, int16_t h,uint16_t color)
{
    1080:	b5f0      	push	{r4, r5, r6, r7, lr}
    1082:	46de      	mov	lr, fp
    1084:	4657      	mov	r7, sl
    1086:	464e      	mov	r6, r9
    1088:	4645      	mov	r5, r8
    108a:	b5e0      	push	{r5, r6, r7, lr}
    108c:	b089      	sub	sp, #36	; 0x24
    108e:	9002      	str	r0, [sp, #8]
    1090:	4688      	mov	r8, r1
    1092:	9207      	str	r2, [sp, #28]
    1094:	4699      	mov	r9, r3
    1096:	ab12      	add	r3, sp, #72	; 0x48
    1098:	2200      	movs	r2, #0
    109a:	5e9b      	ldrsh	r3, [r3, r2]
    109c:	001a      	movs	r2, r3
    109e:	9304      	str	r3, [sp, #16]
    10a0:	ab13      	add	r3, sp, #76	; 0x4c
    10a2:	2100      	movs	r1, #0
    10a4:	5e5b      	ldrsh	r3, [r3, r1]
    10a6:	0018      	movs	r0, r3
    10a8:	9305      	str	r3, [sp, #20]
    10aa:	ab14      	add	r3, sp, #80	; 0x50
    10ac:	881b      	ldrh	r3, [r3, #0]
    10ae:	9303      	str	r3, [sp, #12]
		int16_t i, j, byteWidth = (w + 7) / 8;
    10b0:	3207      	adds	r2, #7
    10b2:	17d1      	asrs	r1, r2, #31
    10b4:	2307      	movs	r3, #7
    10b6:	400b      	ands	r3, r1
    10b8:	189b      	adds	r3, r3, r2
    10ba:	10db      	asrs	r3, r3, #3
    10bc:	9306      	str	r3, [sp, #24]
		for(j=0; j<h; j++) 
    10be:	2300      	movs	r3, #0
    10c0:	469a      	mov	sl, r3
    10c2:	2800      	cmp	r0, #0
    10c4:	dd36      	ble.n	1134 <ST7789_drawBitmap+0xb4>
    10c6:	9b04      	ldr	r3, [sp, #16]
    10c8:	1e5f      	subs	r7, r3, #1
    10ca:	b2bf      	uxth	r7, r7
    10cc:	3701      	adds	r7, #1
    10ce:	003b      	movs	r3, r7
    10d0:	464f      	mov	r7, r9
    10d2:	4699      	mov	r9, r3
    10d4:	e020      	b.n	1118 <ST7789_drawBitmap+0x98>
    10d6:	3401      	adds	r4, #1
		{
			for(i=0; i<w; i++ ) 
    10d8:	45a1      	cmp	r9, r4
    10da:	d016      	beq.n	110a <ST7789_drawBitmap+0x8a>
			{
			/*	printf("eq=%d\r\n",j * byteWidth + i / 8); 
				printf("bitmap[%d]=%d, ",count,bitmap[count]);
			*/
				if(bitmap[j * byteWidth + i / 8] & (128 >> (i & 7)))//(1 << (shift % 8)))
    10dc:	b2a1      	uxth	r1, r4
    10de:	b222      	sxth	r2, r4
    10e0:	17d3      	asrs	r3, r2, #31
    10e2:	402b      	ands	r3, r5
    10e4:	189b      	adds	r3, r3, r2
    10e6:	10db      	asrs	r3, r3, #3
    10e8:	9a00      	ldr	r2, [sp, #0]
    10ea:	18ba      	adds	r2, r7, r2
    10ec:	5cd2      	ldrb	r2, [r2, r3]
    10ee:	0028      	movs	r0, r5
    10f0:	4008      	ands	r0, r1
    10f2:	2380      	movs	r3, #128	; 0x80
    10f4:	4103      	asrs	r3, r0
    10f6:	4213      	tst	r3, r2
    10f8:	d0ed      	beq.n	10d6 <ST7789_drawBitmap+0x56>
				{
					ST7789_drawAbsoultePixel(gfx,x+i, y+j, color);	
    10fa:	4441      	add	r1, r8
    10fc:	b209      	sxth	r1, r1
    10fe:	9b03      	ldr	r3, [sp, #12]
    1100:	9a01      	ldr	r2, [sp, #4]
    1102:	9802      	ldr	r0, [sp, #8]
    1104:	4e0f      	ldr	r6, [pc, #60]	; (1144 <ST7789_drawBitmap+0xc4>)
    1106:	47b0      	blx	r6
    1108:	e7e5      	b.n	10d6 <ST7789_drawBitmap+0x56>
		for(j=0; j<h; j++) 
    110a:	4653      	mov	r3, sl
    110c:	3301      	adds	r3, #1
    110e:	b21b      	sxth	r3, r3
    1110:	469a      	mov	sl, r3
    1112:	9b05      	ldr	r3, [sp, #20]
    1114:	4553      	cmp	r3, sl
    1116:	dd0d      	ble.n	1134 <ST7789_drawBitmap+0xb4>
			for(i=0; i<w; i++ ) 
    1118:	9b04      	ldr	r3, [sp, #16]
    111a:	2b00      	cmp	r3, #0
    111c:	ddf5      	ble.n	110a <ST7789_drawBitmap+0x8a>
				if(bitmap[j * byteWidth + i / 8] & (128 >> (i & 7)))//(1 << (shift % 8)))
    111e:	9e06      	ldr	r6, [sp, #24]
    1120:	4653      	mov	r3, sl
    1122:	435e      	muls	r6, r3
    1124:	2400      	movs	r4, #0
    1126:	2507      	movs	r5, #7
					ST7789_drawAbsoultePixel(gfx,x+i, y+j, color);	
    1128:	9b07      	ldr	r3, [sp, #28]
    112a:	4453      	add	r3, sl
    112c:	b21b      	sxth	r3, r3
    112e:	9301      	str	r3, [sp, #4]
    1130:	9600      	str	r6, [sp, #0]
    1132:	e7d3      	b.n	10dc <ST7789_drawBitmap+0x5c>

				}
			}
		}
}
    1134:	b009      	add	sp, #36	; 0x24
    1136:	bc3c      	pop	{r2, r3, r4, r5}
    1138:	4690      	mov	r8, r2
    113a:	4699      	mov	r9, r3
    113c:	46a2      	mov	sl, r4
    113e:	46ab      	mov	fp, r5
    1140:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1142:	46c0      	nop			; (mov r8, r8)
    1144:	000008b5 	.word	0x000008b5

00001148 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1148:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    114a:	4b02      	ldr	r3, [pc, #8]	; (1154 <delay_init+0xc>)
    114c:	6018      	str	r0, [r3, #0]
    114e:	4b02      	ldr	r3, [pc, #8]	; (1158 <delay_init+0x10>)
    1150:	4798      	blx	r3
}
    1152:	bd10      	pop	{r4, pc}
    1154:	20000888 	.word	0x20000888
    1158:	00001ae1 	.word	0x00001ae1

0000115c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    115c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    115e:	4b04      	ldr	r3, [pc, #16]	; (1170 <delay_ms+0x14>)
    1160:	681c      	ldr	r4, [r3, #0]
    1162:	4b04      	ldr	r3, [pc, #16]	; (1174 <delay_ms+0x18>)
    1164:	4798      	blx	r3
    1166:	0001      	movs	r1, r0
    1168:	0020      	movs	r0, r4
    116a:	4b03      	ldr	r3, [pc, #12]	; (1178 <delay_ms+0x1c>)
    116c:	4798      	blx	r3
}
    116e:	bd10      	pop	{r4, pc}
    1170:	20000888 	.word	0x20000888
    1174:	0000154d 	.word	0x0000154d
    1178:	00001af5 	.word	0x00001af5

0000117c <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    117c:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    117e:	6943      	ldr	r3, [r0, #20]
    1180:	2b00      	cmp	r3, #0
    1182:	d000      	beq.n	1186 <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
    1184:	4798      	blx	r3
	}
}
    1186:	bd10      	pop	{r4, pc}

00001188 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    1188:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    118a:	6983      	ldr	r3, [r0, #24]
    118c:	2b00      	cmp	r3, #0
    118e:	d000      	beq.n	1192 <flash_error+0xa>
		descr->callbacks.cb_error(descr);
    1190:	4798      	blx	r3
	}
}
    1192:	bd10      	pop	{r4, pc}

00001194 <flash_init>:
{
    1194:	b570      	push	{r4, r5, r6, lr}
    1196:	0005      	movs	r5, r0
    1198:	000c      	movs	r4, r1
	ASSERT(flash && hw);
    119a:	2800      	cmp	r0, #0
    119c:	d012      	beq.n	11c4 <flash_init+0x30>
    119e:	0008      	movs	r0, r1
    11a0:	1e43      	subs	r3, r0, #1
    11a2:	4198      	sbcs	r0, r3
    11a4:	b2c0      	uxtb	r0, r0
    11a6:	2238      	movs	r2, #56	; 0x38
    11a8:	4907      	ldr	r1, [pc, #28]	; (11c8 <flash_init+0x34>)
    11aa:	4b08      	ldr	r3, [pc, #32]	; (11cc <flash_init+0x38>)
    11ac:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    11ae:	0021      	movs	r1, r4
    11b0:	0028      	movs	r0, r5
    11b2:	4b07      	ldr	r3, [pc, #28]	; (11d0 <flash_init+0x3c>)
    11b4:	4798      	blx	r3
	if (rc) {
    11b6:	2800      	cmp	r0, #0
    11b8:	d103      	bne.n	11c2 <flash_init+0x2e>
	flash->dev.flash_cb.ready_cb = flash_ready;
    11ba:	4b06      	ldr	r3, [pc, #24]	; (11d4 <flash_init+0x40>)
    11bc:	602b      	str	r3, [r5, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    11be:	4b06      	ldr	r3, [pc, #24]	; (11d8 <flash_init+0x44>)
    11c0:	606b      	str	r3, [r5, #4]
}
    11c2:	bd70      	pop	{r4, r5, r6, pc}
    11c4:	2000      	movs	r0, #0
    11c6:	e7ee      	b.n	11a6 <flash_init+0x12>
    11c8:	000070d0 	.word	0x000070d0
    11cc:	0000150d 	.word	0x0000150d
    11d0:	000015ed 	.word	0x000015ed
    11d4:	0000117d 	.word	0x0000117d
    11d8:	00001189 	.word	0x00001189

000011dc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    11dc:	b570      	push	{r4, r5, r6, lr}
    11de:	0006      	movs	r6, r0
    11e0:	000c      	movs	r4, r1
    11e2:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    11e4:	2800      	cmp	r0, #0
    11e6:	d00d      	beq.n	1204 <io_write+0x28>
    11e8:	0008      	movs	r0, r1
    11ea:	1e43      	subs	r3, r0, #1
    11ec:	4198      	sbcs	r0, r3
    11ee:	b2c0      	uxtb	r0, r0
    11f0:	2234      	movs	r2, #52	; 0x34
    11f2:	4905      	ldr	r1, [pc, #20]	; (1208 <io_write+0x2c>)
    11f4:	4b05      	ldr	r3, [pc, #20]	; (120c <io_write+0x30>)
    11f6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    11f8:	6833      	ldr	r3, [r6, #0]
    11fa:	002a      	movs	r2, r5
    11fc:	0021      	movs	r1, r4
    11fe:	0030      	movs	r0, r6
    1200:	4798      	blx	r3
}
    1202:	bd70      	pop	{r4, r5, r6, pc}
    1204:	2000      	movs	r0, #0
    1206:	e7f3      	b.n	11f0 <io_write+0x14>
    1208:	000070e8 	.word	0x000070e8
    120c:	0000150d 	.word	0x0000150d

00001210 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1210:	b570      	push	{r4, r5, r6, lr}
    1212:	0006      	movs	r6, r0
    1214:	000c      	movs	r4, r1
    1216:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    1218:	2800      	cmp	r0, #0
    121a:	d00d      	beq.n	1238 <io_read+0x28>
    121c:	0008      	movs	r0, r1
    121e:	1e43      	subs	r3, r0, #1
    1220:	4198      	sbcs	r0, r3
    1222:	b2c0      	uxtb	r0, r0
    1224:	223d      	movs	r2, #61	; 0x3d
    1226:	4905      	ldr	r1, [pc, #20]	; (123c <io_read+0x2c>)
    1228:	4b05      	ldr	r3, [pc, #20]	; (1240 <io_read+0x30>)
    122a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    122c:	6873      	ldr	r3, [r6, #4]
    122e:	002a      	movs	r2, r5
    1230:	0021      	movs	r1, r4
    1232:	0030      	movs	r0, r6
    1234:	4798      	blx	r3
}
    1236:	bd70      	pop	{r4, r5, r6, pc}
    1238:	2000      	movs	r0, #0
    123a:	e7f3      	b.n	1224 <io_read+0x14>
    123c:	000070e8 	.word	0x000070e8
    1240:	0000150d 	.word	0x0000150d

00001244 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1244:	b570      	push	{r4, r5, r6, lr}
    1246:	0004      	movs	r4, r0
    1248:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    124a:	2800      	cmp	r0, #0
    124c:	d016      	beq.n	127c <spi_m_sync_init+0x38>
    124e:	0008      	movs	r0, r1
    1250:	1e43      	subs	r3, r0, #1
    1252:	4198      	sbcs	r0, r3
    1254:	b2c0      	uxtb	r0, r0
    1256:	2240      	movs	r2, #64	; 0x40
    1258:	4909      	ldr	r1, [pc, #36]	; (1280 <spi_m_sync_init+0x3c>)
    125a:	4b0a      	ldr	r3, [pc, #40]	; (1284 <spi_m_sync_init+0x40>)
    125c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    125e:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1260:	1d20      	adds	r0, r4, #4
    1262:	0029      	movs	r1, r5
    1264:	4b08      	ldr	r3, [pc, #32]	; (1288 <spi_m_sync_init+0x44>)
    1266:	4798      	blx	r3

	if (rc < 0) {
    1268:	2800      	cmp	r0, #0
    126a:	db06      	blt.n	127a <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    126c:	4b07      	ldr	r3, [pc, #28]	; (128c <spi_m_sync_init+0x48>)
    126e:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1270:	4b07      	ldr	r3, [pc, #28]	; (1290 <spi_m_sync_init+0x4c>)
    1272:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    1274:	4b07      	ldr	r3, [pc, #28]	; (1294 <spi_m_sync_init+0x50>)
    1276:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    1278:	2000      	movs	r0, #0
}
    127a:	bd70      	pop	{r4, r5, r6, pc}
    127c:	2000      	movs	r0, #0
    127e:	e7ea      	b.n	1256 <spi_m_sync_init+0x12>
    1280:	000070fc 	.word	0x000070fc
    1284:	0000150d 	.word	0x0000150d
    1288:	000017cd 	.word	0x000017cd
    128c:	ffff8000 	.word	0xffff8000
    1290:	00001345 	.word	0x00001345
    1294:	00001309 	.word	0x00001309

00001298 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    1298:	b510      	push	{r4, lr}
    129a:	0004      	movs	r4, r0
	ASSERT(spi);
    129c:	1e43      	subs	r3, r0, #1
    129e:	4198      	sbcs	r0, r3
    12a0:	b2c0      	uxtb	r0, r0
    12a2:	2257      	movs	r2, #87	; 0x57
    12a4:	4903      	ldr	r1, [pc, #12]	; (12b4 <spi_m_sync_enable+0x1c>)
    12a6:	4b04      	ldr	r3, [pc, #16]	; (12b8 <spi_m_sync_enable+0x20>)
    12a8:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    12aa:	1d20      	adds	r0, r4, #4
    12ac:	4b03      	ldr	r3, [pc, #12]	; (12bc <spi_m_sync_enable+0x24>)
    12ae:	4798      	blx	r3
}
    12b0:	bd10      	pop	{r4, pc}
    12b2:	46c0      	nop			; (mov r8, r8)
    12b4:	000070fc 	.word	0x000070fc
    12b8:	0000150d 	.word	0x0000150d
    12bc:	000018c5 	.word	0x000018c5

000012c0 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    12c0:	b530      	push	{r4, r5, lr}
    12c2:	b087      	sub	sp, #28
    12c4:	0004      	movs	r4, r0
    12c6:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    12c8:	2800      	cmp	r0, #0
    12ca:	d014      	beq.n	12f6 <spi_m_sync_transfer+0x36>
    12cc:	0008      	movs	r0, r1
    12ce:	1e43      	subs	r3, r0, #1
    12d0:	4198      	sbcs	r0, r3
    12d2:	b2c0      	uxtb	r0, r0
    12d4:	22b3      	movs	r2, #179	; 0xb3
    12d6:	4909      	ldr	r1, [pc, #36]	; (12fc <spi_m_sync_transfer+0x3c>)
    12d8:	4b09      	ldr	r3, [pc, #36]	; (1300 <spi_m_sync_transfer+0x40>)
    12da:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    12dc:	682b      	ldr	r3, [r5, #0]
    12de:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    12e0:	686b      	ldr	r3, [r5, #4]
    12e2:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    12e4:	68ab      	ldr	r3, [r5, #8]
    12e6:	9301      	str	r3, [sp, #4]
    12e8:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    12ea:	1d20      	adds	r0, r4, #4
    12ec:	a903      	add	r1, sp, #12
    12ee:	4b05      	ldr	r3, [pc, #20]	; (1304 <spi_m_sync_transfer+0x44>)
    12f0:	4798      	blx	r3
}
    12f2:	b007      	add	sp, #28
    12f4:	bd30      	pop	{r4, r5, pc}
    12f6:	2000      	movs	r0, #0
    12f8:	e7ec      	b.n	12d4 <spi_m_sync_transfer+0x14>
    12fa:	46c0      	nop			; (mov r8, r8)
    12fc:	000070fc 	.word	0x000070fc
    1300:	0000150d 	.word	0x0000150d
    1304:	000018f9 	.word	0x000018f9

00001308 <_spi_m_sync_io_write>:
{
    1308:	b570      	push	{r4, r5, r6, lr}
    130a:	b084      	sub	sp, #16
    130c:	0004      	movs	r4, r0
    130e:	000e      	movs	r6, r1
    1310:	0015      	movs	r5, r2
	ASSERT(io);
    1312:	1e43      	subs	r3, r0, #1
    1314:	4198      	sbcs	r0, r3
    1316:	b2c0      	uxtb	r0, r0
    1318:	22a3      	movs	r2, #163	; 0xa3
    131a:	4907      	ldr	r1, [pc, #28]	; (1338 <_spi_m_sync_io_write+0x30>)
    131c:	4b07      	ldr	r3, [pc, #28]	; (133c <_spi_m_sync_io_write+0x34>)
    131e:	4798      	blx	r3
	xfer.rxbuf = 0;
    1320:	2300      	movs	r3, #0
    1322:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1324:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    1326:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1328:	0020      	movs	r0, r4
    132a:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    132c:	a901      	add	r1, sp, #4
    132e:	4b04      	ldr	r3, [pc, #16]	; (1340 <_spi_m_sync_io_write+0x38>)
    1330:	4798      	blx	r3
}
    1332:	b004      	add	sp, #16
    1334:	bd70      	pop	{r4, r5, r6, pc}
    1336:	46c0      	nop			; (mov r8, r8)
    1338:	000070fc 	.word	0x000070fc
    133c:	0000150d 	.word	0x0000150d
    1340:	000012c1 	.word	0x000012c1

00001344 <_spi_m_sync_io_read>:
{
    1344:	b570      	push	{r4, r5, r6, lr}
    1346:	b084      	sub	sp, #16
    1348:	0004      	movs	r4, r0
    134a:	000e      	movs	r6, r1
    134c:	0015      	movs	r5, r2
	ASSERT(io);
    134e:	1e43      	subs	r3, r0, #1
    1350:	4198      	sbcs	r0, r3
    1352:	b2c0      	uxtb	r0, r0
    1354:	2287      	movs	r2, #135	; 0x87
    1356:	4907      	ldr	r1, [pc, #28]	; (1374 <_spi_m_sync_io_read+0x30>)
    1358:	4b07      	ldr	r3, [pc, #28]	; (1378 <_spi_m_sync_io_read+0x34>)
    135a:	4798      	blx	r3
	xfer.rxbuf = buf;
    135c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    135e:	2300      	movs	r3, #0
    1360:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    1362:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1364:	0020      	movs	r0, r4
    1366:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    1368:	a901      	add	r1, sp, #4
    136a:	4b04      	ldr	r3, [pc, #16]	; (137c <_spi_m_sync_io_read+0x38>)
    136c:	4798      	blx	r3
}
    136e:	b004      	add	sp, #16
    1370:	bd70      	pop	{r4, r5, r6, pc}
    1372:	46c0      	nop			; (mov r8, r8)
    1374:	000070fc 	.word	0x000070fc
    1378:	0000150d 	.word	0x0000150d
    137c:	000012c1 	.word	0x000012c1

00001380 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    1380:	b570      	push	{r4, r5, r6, lr}
    1382:	0004      	movs	r4, r0
    1384:	000d      	movs	r5, r1
	ASSERT(spi && io);
    1386:	2800      	cmp	r0, #0
    1388:	d00b      	beq.n	13a2 <spi_m_sync_get_io_descriptor+0x22>
    138a:	0008      	movs	r0, r1
    138c:	1e43      	subs	r3, r0, #1
    138e:	4198      	sbcs	r0, r3
    1390:	b2c0      	uxtb	r0, r0
    1392:	22bd      	movs	r2, #189	; 0xbd
    1394:	4904      	ldr	r1, [pc, #16]	; (13a8 <spi_m_sync_get_io_descriptor+0x28>)
    1396:	4b05      	ldr	r3, [pc, #20]	; (13ac <spi_m_sync_get_io_descriptor+0x2c>)
    1398:	4798      	blx	r3
	*io = &spi->io;
    139a:	340c      	adds	r4, #12
    139c:	602c      	str	r4, [r5, #0]
	return 0;
}
    139e:	2000      	movs	r0, #0
    13a0:	bd70      	pop	{r4, r5, r6, pc}
    13a2:	2000      	movs	r0, #0
    13a4:	e7f5      	b.n	1392 <spi_m_sync_get_io_descriptor+0x12>
    13a6:	46c0      	nop			; (mov r8, r8)
    13a8:	000070fc 	.word	0x000070fc
    13ac:	0000150d 	.word	0x0000150d

000013b0 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    13b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13b2:	46ce      	mov	lr, r9
    13b4:	4647      	mov	r7, r8
    13b6:	b580      	push	{r7, lr}
    13b8:	0004      	movs	r4, r0
    13ba:	000f      	movs	r7, r1
    13bc:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    13be:	2800      	cmp	r0, #0
    13c0:	d026      	beq.n	1410 <usart_sync_write+0x60>
    13c2:	2900      	cmp	r1, #0
    13c4:	d026      	beq.n	1414 <usart_sync_write+0x64>
    13c6:	0010      	movs	r0, r2
    13c8:	1e43      	subs	r3, r0, #1
    13ca:	4198      	sbcs	r0, r3
    13cc:	22f1      	movs	r2, #241	; 0xf1
    13ce:	4912      	ldr	r1, [pc, #72]	; (1418 <usart_sync_write+0x68>)
    13d0:	4b12      	ldr	r3, [pc, #72]	; (141c <usart_sync_write+0x6c>)
    13d2:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    13d4:	3408      	adds	r4, #8
    13d6:	4d12      	ldr	r5, [pc, #72]	; (1420 <usart_sync_write+0x70>)
    13d8:	0020      	movs	r0, r4
    13da:	47a8      	blx	r5
    13dc:	2800      	cmp	r0, #0
    13de:	d0fb      	beq.n	13d8 <usart_sync_write+0x28>
    13e0:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    13e2:	4b10      	ldr	r3, [pc, #64]	; (1424 <usart_sync_write+0x74>)
    13e4:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    13e6:	4d0e      	ldr	r5, [pc, #56]	; (1420 <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    13e8:	5db9      	ldrb	r1, [r7, r6]
    13ea:	0020      	movs	r0, r4
    13ec:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    13ee:	0020      	movs	r0, r4
    13f0:	47a8      	blx	r5
    13f2:	2800      	cmp	r0, #0
    13f4:	d0fb      	beq.n	13ee <usart_sync_write+0x3e>
			;
	} while (++offset < length);
    13f6:	3601      	adds	r6, #1
    13f8:	4546      	cmp	r6, r8
    13fa:	d3f5      	bcc.n	13e8 <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
    13fc:	4d0a      	ldr	r5, [pc, #40]	; (1428 <usart_sync_write+0x78>)
    13fe:	0020      	movs	r0, r4
    1400:	47a8      	blx	r5
    1402:	2800      	cmp	r0, #0
    1404:	d0fb      	beq.n	13fe <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
    1406:	0030      	movs	r0, r6
    1408:	bc0c      	pop	{r2, r3}
    140a:	4690      	mov	r8, r2
    140c:	4699      	mov	r9, r3
    140e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    1410:	2000      	movs	r0, #0
    1412:	e7db      	b.n	13cc <usart_sync_write+0x1c>
    1414:	2000      	movs	r0, #0
    1416:	e7d9      	b.n	13cc <usart_sync_write+0x1c>
    1418:	00007118 	.word	0x00007118
    141c:	0000150d 	.word	0x0000150d
    1420:	000017ad 	.word	0x000017ad
    1424:	0000179d 	.word	0x0000179d
    1428:	000017b7 	.word	0x000017b7

0000142c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    142e:	46ce      	mov	lr, r9
    1430:	4647      	mov	r7, r8
    1432:	b580      	push	{r7, lr}
    1434:	0004      	movs	r4, r0
    1436:	000f      	movs	r7, r1
    1438:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    143a:	2800      	cmp	r0, #0
    143c:	d01d      	beq.n	147a <usart_sync_read+0x4e>
    143e:	2900      	cmp	r1, #0
    1440:	d01d      	beq.n	147e <usart_sync_read+0x52>
    1442:	0010      	movs	r0, r2
    1444:	1e43      	subs	r3, r0, #1
    1446:	4198      	sbcs	r0, r3
    1448:	2286      	movs	r2, #134	; 0x86
    144a:	0052      	lsls	r2, r2, #1
    144c:	490d      	ldr	r1, [pc, #52]	; (1484 <usart_sync_read+0x58>)
    144e:	4b0e      	ldr	r3, [pc, #56]	; (1488 <usart_sync_read+0x5c>)
    1450:	4798      	blx	r3
	uint32_t                      offset = 0;
    1452:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    1454:	3408      	adds	r4, #8
    1456:	4d0d      	ldr	r5, [pc, #52]	; (148c <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    1458:	4b0d      	ldr	r3, [pc, #52]	; (1490 <usart_sync_read+0x64>)
    145a:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
    145c:	0020      	movs	r0, r4
    145e:	47a8      	blx	r5
    1460:	2800      	cmp	r0, #0
    1462:	d0fb      	beq.n	145c <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    1464:	0020      	movs	r0, r4
    1466:	47c8      	blx	r9
    1468:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
    146a:	3601      	adds	r6, #1
    146c:	4546      	cmp	r6, r8
    146e:	d3f5      	bcc.n	145c <usart_sync_read+0x30>

	return (int32_t)offset;
}
    1470:	0030      	movs	r0, r6
    1472:	bc0c      	pop	{r2, r3}
    1474:	4690      	mov	r8, r2
    1476:	4699      	mov	r9, r3
    1478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    147a:	2000      	movs	r0, #0
    147c:	e7e4      	b.n	1448 <usart_sync_read+0x1c>
    147e:	2000      	movs	r0, #0
    1480:	e7e2      	b.n	1448 <usart_sync_read+0x1c>
    1482:	46c0      	nop			; (mov r8, r8)
    1484:	00007118 	.word	0x00007118
    1488:	0000150d 	.word	0x0000150d
    148c:	000017c1 	.word	0x000017c1
    1490:	000017a5 	.word	0x000017a5

00001494 <usart_sync_init>:
{
    1494:	b570      	push	{r4, r5, r6, lr}
    1496:	0005      	movs	r5, r0
    1498:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    149a:	2800      	cmp	r0, #0
    149c:	d013      	beq.n	14c6 <usart_sync_init+0x32>
    149e:	0008      	movs	r0, r1
    14a0:	1e43      	subs	r3, r0, #1
    14a2:	4198      	sbcs	r0, r3
    14a4:	b2c0      	uxtb	r0, r0
    14a6:	2234      	movs	r2, #52	; 0x34
    14a8:	4908      	ldr	r1, [pc, #32]	; (14cc <usart_sync_init+0x38>)
    14aa:	4b09      	ldr	r3, [pc, #36]	; (14d0 <usart_sync_init+0x3c>)
    14ac:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    14ae:	0028      	movs	r0, r5
    14b0:	3008      	adds	r0, #8
    14b2:	0021      	movs	r1, r4
    14b4:	4b07      	ldr	r3, [pc, #28]	; (14d4 <usart_sync_init+0x40>)
    14b6:	4798      	blx	r3
	if (init_status) {
    14b8:	2800      	cmp	r0, #0
    14ba:	d103      	bne.n	14c4 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
    14bc:	4b06      	ldr	r3, [pc, #24]	; (14d8 <usart_sync_init+0x44>)
    14be:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
    14c0:	4b06      	ldr	r3, [pc, #24]	; (14dc <usart_sync_init+0x48>)
    14c2:	602b      	str	r3, [r5, #0]
}
    14c4:	bd70      	pop	{r4, r5, r6, pc}
    14c6:	2000      	movs	r0, #0
    14c8:	e7ed      	b.n	14a6 <usart_sync_init+0x12>
    14ca:	46c0      	nop			; (mov r8, r8)
    14cc:	00007118 	.word	0x00007118
    14d0:	0000150d 	.word	0x0000150d
    14d4:	0000175d 	.word	0x0000175d
    14d8:	0000142d 	.word	0x0000142d
    14dc:	000013b1 	.word	0x000013b1

000014e0 <usart_sync_enable>:
{
    14e0:	b510      	push	{r4, lr}
    14e2:	0004      	movs	r4, r0
	ASSERT(descr);
    14e4:	1e43      	subs	r3, r0, #1
    14e6:	4198      	sbcs	r0, r3
    14e8:	b2c0      	uxtb	r0, r0
    14ea:	2253      	movs	r2, #83	; 0x53
    14ec:	4904      	ldr	r1, [pc, #16]	; (1500 <usart_sync_enable+0x20>)
    14ee:	4b05      	ldr	r3, [pc, #20]	; (1504 <usart_sync_enable+0x24>)
    14f0:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    14f2:	0020      	movs	r0, r4
    14f4:	3008      	adds	r0, #8
    14f6:	4b04      	ldr	r3, [pc, #16]	; (1508 <usart_sync_enable+0x28>)
    14f8:	4798      	blx	r3
}
    14fa:	2000      	movs	r0, #0
    14fc:	bd10      	pop	{r4, pc}
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	00007118 	.word	0x00007118
    1504:	0000150d 	.word	0x0000150d
    1508:	00001789 	.word	0x00001789

0000150c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    150c:	2800      	cmp	r0, #0
    150e:	d100      	bne.n	1512 <assert+0x6>
		__asm("BKPT #0");
    1510:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1512:	4770      	bx	lr

00001514 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1514:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1516:	4a06      	ldr	r2, [pc, #24]	; (1530 <_sbrk+0x1c>)
    1518:	6812      	ldr	r2, [r2, #0]
    151a:	2a00      	cmp	r2, #0
    151c:	d004      	beq.n	1528 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    151e:	4a04      	ldr	r2, [pc, #16]	; (1530 <_sbrk+0x1c>)
    1520:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1522:	18c3      	adds	r3, r0, r3
    1524:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1526:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1528:	4902      	ldr	r1, [pc, #8]	; (1534 <_sbrk+0x20>)
    152a:	4a01      	ldr	r2, [pc, #4]	; (1530 <_sbrk+0x1c>)
    152c:	6011      	str	r1, [r2, #0]
    152e:	e7f6      	b.n	151e <_sbrk+0xa>
    1530:	2000088c 	.word	0x2000088c
    1534:	20002d70 	.word	0x20002d70

00001538 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    1538:	2001      	movs	r0, #1
    153a:	4240      	negs	r0, r0
    153c:	4770      	bx	lr

0000153e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    153e:	2380      	movs	r3, #128	; 0x80
    1540:	019b      	lsls	r3, r3, #6
    1542:	604b      	str	r3, [r1, #4]

	return 0;
}
    1544:	2000      	movs	r0, #0
    1546:	4770      	bx	lr

00001548 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    1548:	2000      	movs	r0, #0
    154a:	4770      	bx	lr

0000154c <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
    154c:	4b01      	ldr	r3, [pc, #4]	; (1554 <_get_cycles_for_ms+0x8>)
    154e:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1550:	4770      	bx	lr
    1552:	46c0      	nop			; (mov r8, r8)
    1554:	0000bb1c 	.word	0x0000bb1c

00001558 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1558:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    155a:	4a08      	ldr	r2, [pc, #32]	; (157c <_init_chip+0x24>)
    155c:	6853      	ldr	r3, [r2, #4]
    155e:	2102      	movs	r1, #2
    1560:	430b      	orrs	r3, r1
    1562:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    1564:	4b06      	ldr	r3, [pc, #24]	; (1580 <_init_chip+0x28>)
    1566:	4798      	blx	r3
	_sysctrl_init_sources();
    1568:	4b06      	ldr	r3, [pc, #24]	; (1584 <_init_chip+0x2c>)
    156a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    156c:	2008      	movs	r0, #8
    156e:	4c06      	ldr	r4, [pc, #24]	; (1588 <_init_chip+0x30>)
    1570:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
    1572:	4b06      	ldr	r3, [pc, #24]	; (158c <_init_chip+0x34>)
    1574:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1576:	20f7      	movs	r0, #247	; 0xf7
    1578:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    157a:	bd10      	pop	{r4, pc}
    157c:	41004000 	.word	0x41004000
    1580:	00001681 	.word	0x00001681
    1584:	00001a09 	.word	0x00001a09
    1588:	00001591 	.word	0x00001591
    158c:	00001a5d 	.word	0x00001a5d

00001590 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1590:	07c3      	lsls	r3, r0, #31
    1592:	d509      	bpl.n	15a8 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1594:	4b11      	ldr	r3, [pc, #68]	; (15dc <_gclk_init_generators_by_fref+0x4c>)
    1596:	2280      	movs	r2, #128	; 0x80
    1598:	0052      	lsls	r2, r2, #1
    159a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    159c:	4a10      	ldr	r2, [pc, #64]	; (15e0 <_gclk_init_generators_by_fref+0x50>)
    159e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    15a0:	001a      	movs	r2, r3
    15a2:	7853      	ldrb	r3, [r2, #1]
    15a4:	09db      	lsrs	r3, r3, #7
    15a6:	d1fc      	bne.n	15a2 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    15a8:	0783      	lsls	r3, r0, #30
    15aa:	d509      	bpl.n	15c0 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    15ac:	4b0b      	ldr	r3, [pc, #44]	; (15dc <_gclk_init_generators_by_fref+0x4c>)
    15ae:	2202      	movs	r2, #2
    15b0:	32ff      	adds	r2, #255	; 0xff
    15b2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    15b4:	4a0b      	ldr	r2, [pc, #44]	; (15e4 <_gclk_init_generators_by_fref+0x54>)
    15b6:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    15b8:	001a      	movs	r2, r3
    15ba:	7853      	ldrb	r3, [r2, #1]
    15bc:	09db      	lsrs	r3, r3, #7
    15be:	d1fc      	bne.n	15ba <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    15c0:	0703      	lsls	r3, r0, #28
    15c2:	d509      	bpl.n	15d8 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
    15c4:	4b05      	ldr	r3, [pc, #20]	; (15dc <_gclk_init_generators_by_fref+0x4c>)
    15c6:	2204      	movs	r2, #4
    15c8:	32ff      	adds	r2, #255	; 0xff
    15ca:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    15cc:	4a06      	ldr	r2, [pc, #24]	; (15e8 <_gclk_init_generators_by_fref+0x58>)
    15ce:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    15d0:	001a      	movs	r2, r3
    15d2:	7853      	ldrb	r3, [r2, #1]
    15d4:	09db      	lsrs	r3, r3, #7
    15d6:	d1fc      	bne.n	15d2 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    15d8:	4770      	bx	lr
    15da:	46c0      	nop			; (mov r8, r8)
    15dc:	40000c00 	.word	0x40000c00
    15e0:	00030700 	.word	0x00030700
    15e4:	00030601 	.word	0x00030601
    15e8:	00010503 	.word	0x00010503

000015ec <_flash_init>:

/**
 * \brief Initialize NVM
 */
int32_t _flash_init(struct _flash_device *const device, void *const hw)
{
    15ec:	b570      	push	{r4, r5, r6, lr}
    15ee:	0005      	movs	r5, r0
    15f0:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    15f2:	2800      	cmp	r0, #0
    15f4:	d01d      	beq.n	1632 <_flash_init+0x46>
    15f6:	4b10      	ldr	r3, [pc, #64]	; (1638 <_flash_init+0x4c>)
    15f8:	18c8      	adds	r0, r1, r3
    15fa:	4243      	negs	r3, r0
    15fc:	4158      	adcs	r0, r3
    15fe:	b2c0      	uxtb	r0, r0
    1600:	2246      	movs	r2, #70	; 0x46
    1602:	490e      	ldr	r1, [pc, #56]	; (163c <_flash_init+0x50>)
    1604:	4b0e      	ldr	r3, [pc, #56]	; (1640 <_flash_init+0x54>)
    1606:	4798      	blx	r3
	uint32_t ctrlb;

	device->hw = hw;
    1608:	612c      	str	r4, [r5, #16]
}

static inline hri_nvmctrl_ctrlb_reg_t hri_nvmctrl_get_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
    160a:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
    160c:	239e      	movs	r3, #158	; 0x9e
    160e:	4013      	ands	r3, r2
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
    1610:	6063      	str	r3, [r4, #4]
	ctrlb      = _nvm.ctrlb & ~(NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	ctrlb |= hri_nvmctrl_get_CTRLB_reg(device->hw, NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	hri_nvmctrl_write_CTRLB_reg(device->hw, ctrlb);

	_nvm_dev = device;
    1612:	4b0c      	ldr	r3, [pc, #48]	; (1644 <_flash_init+0x58>)
    1614:	601d      	str	r5, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1616:	4b0c      	ldr	r3, [pc, #48]	; (1648 <_flash_init+0x5c>)
    1618:	2220      	movs	r2, #32
    161a:	2180      	movs	r1, #128	; 0x80
    161c:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    161e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1622:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1626:	3101      	adds	r1, #1
    1628:	31ff      	adds	r1, #255	; 0xff
    162a:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    162c:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(NVMCTRL_IRQn);
	NVIC_ClearPendingIRQ(NVMCTRL_IRQn);
	NVIC_EnableIRQ(NVMCTRL_IRQn);
	return ERR_NONE;
}
    162e:	2000      	movs	r0, #0
    1630:	bd70      	pop	{r4, r5, r6, pc}
    1632:	2000      	movs	r0, #0
    1634:	e7e4      	b.n	1600 <_flash_init+0x14>
    1636:	46c0      	nop			; (mov r8, r8)
    1638:	beffc000 	.word	0xbeffc000
    163c:	00007134 	.word	0x00007134
    1640:	0000150d 	.word	0x0000150d
    1644:	20000890 	.word	0x20000890
    1648:	e000e100 	.word	0xe000e100

0000164c <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
    164c:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
    164e:	4b0b      	ldr	r3, [pc, #44]	; (167c <NVMCTRL_Handler+0x30>)
    1650:	6818      	ldr	r0, [r3, #0]
    1652:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    1654:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    1656:	07d2      	lsls	r2, r2, #31
    1658:	d506      	bpl.n	1668 <NVMCTRL_Handler+0x1c>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_READY;
    165a:	2201      	movs	r2, #1
    165c:	751a      	strb	r2, [r3, #20]
		hri_nvmctrl_clear_interrupt_READY_bit(hw);
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
    165e:	6803      	ldr	r3, [r0, #0]
    1660:	2b00      	cmp	r3, #0
    1662:	d000      	beq.n	1666 <NVMCTRL_Handler+0x1a>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
    1664:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
    1666:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
    1668:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
    166a:	0792      	lsls	r2, r2, #30
    166c:	d5fb      	bpl.n	1666 <NVMCTRL_Handler+0x1a>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
    166e:	2202      	movs	r2, #2
    1670:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
    1672:	6843      	ldr	r3, [r0, #4]
    1674:	2b00      	cmp	r3, #0
    1676:	d0f6      	beq.n	1666 <NVMCTRL_Handler+0x1a>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
    1678:	4798      	blx	r3
}
    167a:	e7f4      	b.n	1666 <NVMCTRL_Handler+0x1a>
    167c:	20000890 	.word	0x20000890

00001680 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    1680:	4b06      	ldr	r3, [pc, #24]	; (169c <_pm_init+0x1c>)
    1682:	7a1a      	ldrb	r2, [r3, #8]
    1684:	b2d2      	uxtb	r2, r2
    1686:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1688:	7a5a      	ldrb	r2, [r3, #9]
    168a:	b2d2      	uxtb	r2, r2
    168c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    168e:	7a9a      	ldrb	r2, [r3, #10]
    1690:	b2d2      	uxtb	r2, r2
    1692:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1694:	7ada      	ldrb	r2, [r3, #11]
    1696:	b2d2      	uxtb	r2, r2
    1698:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    169a:	4770      	bx	lr
    169c:	40000400 	.word	0x40000400

000016a0 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    16a0:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    16a2:	07db      	lsls	r3, r3, #31
    16a4:	d409      	bmi.n	16ba <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    16a6:	6803      	ldr	r3, [r0, #0]
    16a8:	2202      	movs	r2, #2
    16aa:	4313      	orrs	r3, r2
    16ac:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    16ae:	3201      	adds	r2, #1
    16b0:	69c3      	ldr	r3, [r0, #28]
    16b2:	421a      	tst	r2, r3
    16b4:	d1fc      	bne.n	16b0 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    16b6:	2000      	movs	r0, #0
}
    16b8:	4770      	bx	lr
		return ERR_BUSY;
    16ba:	2004      	movs	r0, #4
    16bc:	4240      	negs	r0, r0
    16be:	e7fb      	b.n	16b8 <_spi_sync_enable+0x18>

000016c0 <_usart_init>:
{
    16c0:	b510      	push	{r4, lr}
    16c2:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    16c4:	4b1f      	ldr	r3, [pc, #124]	; (1744 <_usart_init+0x84>)
    16c6:	18c3      	adds	r3, r0, r3
    16c8:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    16ca:	b2db      	uxtb	r3, r3
    16cc:	2b03      	cmp	r3, #3
    16ce:	d004      	beq.n	16da <_usart_init+0x1a>
	ASSERT(false);
    16d0:	4a1d      	ldr	r2, [pc, #116]	; (1748 <_usart_init+0x88>)
    16d2:	491e      	ldr	r1, [pc, #120]	; (174c <_usart_init+0x8c>)
    16d4:	2000      	movs	r0, #0
    16d6:	4b1e      	ldr	r3, [pc, #120]	; (1750 <_usart_init+0x90>)
    16d8:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    16da:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    16dc:	07db      	lsls	r3, r3, #31
    16de:	d418      	bmi.n	1712 <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    16e0:	2203      	movs	r2, #3
    16e2:	69e3      	ldr	r3, [r4, #28]
    16e4:	421a      	tst	r2, r3
    16e6:	d1fc      	bne.n	16e2 <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    16e8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    16ea:	079b      	lsls	r3, r3, #30
    16ec:	d50b      	bpl.n	1706 <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    16ee:	6823      	ldr	r3, [r4, #0]
    16f0:	2202      	movs	r2, #2
    16f2:	4393      	bics	r3, r2
    16f4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    16f6:	3201      	adds	r2, #1
    16f8:	69e3      	ldr	r3, [r4, #28]
    16fa:	421a      	tst	r2, r3
    16fc:	d1fc      	bne.n	16f8 <_usart_init+0x38>
    16fe:	2202      	movs	r2, #2
    1700:	69e3      	ldr	r3, [r4, #28]
    1702:	421a      	tst	r2, r3
    1704:	d1fc      	bne.n	1700 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1706:	2305      	movs	r3, #5
    1708:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    170a:	2203      	movs	r2, #3
    170c:	69e3      	ldr	r3, [r4, #28]
    170e:	421a      	tst	r2, r3
    1710:	d1fc      	bne.n	170c <_usart_init+0x4c>
    1712:	2201      	movs	r2, #1
    1714:	69e3      	ldr	r3, [r4, #28]
    1716:	421a      	tst	r2, r3
    1718:	d1fc      	bne.n	1714 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    171a:	4b0e      	ldr	r3, [pc, #56]	; (1754 <_usart_init+0x94>)
    171c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    171e:	2203      	movs	r2, #3
    1720:	69e3      	ldr	r3, [r4, #28]
    1722:	421a      	tst	r2, r3
    1724:	d1fc      	bne.n	1720 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1726:	23c0      	movs	r3, #192	; 0xc0
    1728:	029b      	lsls	r3, r3, #10
    172a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    172c:	2207      	movs	r2, #7
    172e:	69e3      	ldr	r3, [r4, #28]
    1730:	421a      	tst	r2, r3
    1732:	d1fc      	bne.n	172e <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1734:	4b08      	ldr	r3, [pc, #32]	; (1758 <_usart_init+0x98>)
    1736:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1738:	2300      	movs	r3, #0
    173a:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    173c:	2230      	movs	r2, #48	; 0x30
    173e:	54a3      	strb	r3, [r4, r2]
}
    1740:	2000      	movs	r0, #0
    1742:	bd10      	pop	{r4, pc}
    1744:	bdfff800 	.word	0xbdfff800
    1748:	0000023a 	.word	0x0000023a
    174c:	00007154 	.word	0x00007154
    1750:	0000150d 	.word	0x0000150d
    1754:	40100004 	.word	0x40100004
    1758:	fffff629 	.word	0xfffff629

0000175c <_usart_sync_init>:
{
    175c:	b570      	push	{r4, r5, r6, lr}
    175e:	0005      	movs	r5, r0
    1760:	000c      	movs	r4, r1
	ASSERT(device);
    1762:	1e43      	subs	r3, r0, #1
    1764:	4198      	sbcs	r0, r3
    1766:	b2c0      	uxtb	r0, r0
    1768:	22b4      	movs	r2, #180	; 0xb4
    176a:	4904      	ldr	r1, [pc, #16]	; (177c <_usart_sync_init+0x20>)
    176c:	4b04      	ldr	r3, [pc, #16]	; (1780 <_usart_sync_init+0x24>)
    176e:	4798      	blx	r3
	device->hw = hw;
    1770:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1772:	0020      	movs	r0, r4
    1774:	4b03      	ldr	r3, [pc, #12]	; (1784 <_usart_sync_init+0x28>)
    1776:	4798      	blx	r3
}
    1778:	bd70      	pop	{r4, r5, r6, pc}
    177a:	46c0      	nop			; (mov r8, r8)
    177c:	00007154 	.word	0x00007154
    1780:	0000150d 	.word	0x0000150d
    1784:	000016c1 	.word	0x000016c1

00001788 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1788:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    178a:	6813      	ldr	r3, [r2, #0]
    178c:	2102      	movs	r1, #2
    178e:	430b      	orrs	r3, r1
    1790:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1792:	3101      	adds	r1, #1
    1794:	69d3      	ldr	r3, [r2, #28]
    1796:	4219      	tst	r1, r3
    1798:	d1fc      	bne.n	1794 <_usart_sync_enable+0xc>
}
    179a:	4770      	bx	lr

0000179c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    179c:	6803      	ldr	r3, [r0, #0]
    179e:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    17a0:	8519      	strh	r1, [r3, #40]	; 0x28
}
    17a2:	4770      	bx	lr

000017a4 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    17a4:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    17a6:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    17a8:	b2c0      	uxtb	r0, r0
}
    17aa:	4770      	bx	lr

000017ac <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    17ac:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    17ae:	7e18      	ldrb	r0, [r3, #24]
    17b0:	2301      	movs	r3, #1
    17b2:	4018      	ands	r0, r3
}
    17b4:	4770      	bx	lr

000017b6 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    17b6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    17b8:	7e18      	ldrb	r0, [r3, #24]
    17ba:	0780      	lsls	r0, r0, #30
    17bc:	0fc0      	lsrs	r0, r0, #31
}
    17be:	4770      	bx	lr

000017c0 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    17c0:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    17c2:	7e18      	ldrb	r0, [r3, #24]
    17c4:	0740      	lsls	r0, r0, #29
    17c6:	0fc0      	lsrs	r0, r0, #31
}
    17c8:	4770      	bx	lr
	...

000017cc <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    17cc:	b570      	push	{r4, r5, r6, lr}
    17ce:	0005      	movs	r5, r0
    17d0:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    17d2:	4b35      	ldr	r3, [pc, #212]	; (18a8 <_spi_m_sync_init+0xdc>)
    17d4:	18cb      	adds	r3, r1, r3
    17d6:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    17d8:	b2db      	uxtb	r3, r3
    17da:	2b00      	cmp	r3, #0
    17dc:	d00b      	beq.n	17f6 <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    17de:	2800      	cmp	r0, #0
    17e0:	d050      	beq.n	1884 <_spi_m_sync_init+0xb8>
    17e2:	1e60      	subs	r0, r4, #1
    17e4:	4184      	sbcs	r4, r0
    17e6:	b2e0      	uxtb	r0, r4
    17e8:	4a30      	ldr	r2, [pc, #192]	; (18ac <_spi_m_sync_init+0xe0>)
    17ea:	4931      	ldr	r1, [pc, #196]	; (18b0 <_spi_m_sync_init+0xe4>)
    17ec:	4b31      	ldr	r3, [pc, #196]	; (18b4 <_spi_m_sync_init+0xe8>)
    17ee:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    17f0:	200d      	movs	r0, #13
    17f2:	4240      	negs	r0, r0
    17f4:	e045      	b.n	1882 <_spi_m_sync_init+0xb6>
	ASSERT(dev && hw);
    17f6:	2800      	cmp	r0, #0
    17f8:	d14c      	bne.n	1894 <_spi_m_sync_init+0xc8>
    17fa:	4a2c      	ldr	r2, [pc, #176]	; (18ac <_spi_m_sync_init+0xe0>)
    17fc:	492c      	ldr	r1, [pc, #176]	; (18b0 <_spi_m_sync_init+0xe4>)
    17fe:	2000      	movs	r0, #0
    1800:	4b2c      	ldr	r3, [pc, #176]	; (18b4 <_spi_m_sync_init+0xe8>)
    1802:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1804:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1806:	07db      	lsls	r3, r3, #31
    1808:	d418      	bmi.n	183c <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    180a:	2203      	movs	r2, #3
    180c:	69e3      	ldr	r3, [r4, #28]
    180e:	421a      	tst	r2, r3
    1810:	d1fc      	bne.n	180c <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1812:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1814:	079b      	lsls	r3, r3, #30
    1816:	d50b      	bpl.n	1830 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1818:	6823      	ldr	r3, [r4, #0]
    181a:	2202      	movs	r2, #2
    181c:	4393      	bics	r3, r2
    181e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1820:	3201      	adds	r2, #1
    1822:	69e3      	ldr	r3, [r4, #28]
    1824:	421a      	tst	r2, r3
    1826:	d1fc      	bne.n	1822 <_spi_m_sync_init+0x56>
    1828:	2202      	movs	r2, #2
    182a:	69e3      	ldr	r3, [r4, #28]
    182c:	421a      	tst	r2, r3
    182e:	d1fc      	bne.n	182a <_spi_m_sync_init+0x5e>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1830:	230d      	movs	r3, #13
    1832:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1834:	2203      	movs	r2, #3
    1836:	69e3      	ldr	r3, [r4, #28]
    1838:	421a      	tst	r2, r3
    183a:	d1fc      	bne.n	1836 <_spi_m_sync_init+0x6a>
    183c:	2201      	movs	r2, #1
    183e:	69e3      	ldr	r3, [r4, #28]
    1840:	421a      	tst	r2, r3
    1842:	d1fc      	bne.n	183e <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1844:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1846:	0020      	movs	r0, r4
    1848:	1e43      	subs	r3, r0, #1
    184a:	4198      	sbcs	r0, r3
    184c:	b2c0      	uxtb	r0, r0
    184e:	4a1a      	ldr	r2, [pc, #104]	; (18b8 <_spi_m_sync_init+0xec>)
    1850:	4917      	ldr	r1, [pc, #92]	; (18b0 <_spi_m_sync_init+0xe4>)
    1852:	4b18      	ldr	r3, [pc, #96]	; (18b4 <_spi_m_sync_init+0xe8>)
    1854:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1856:	4b19      	ldr	r3, [pc, #100]	; (18bc <_spi_m_sync_init+0xf0>)
    1858:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    185a:	2203      	movs	r2, #3
    185c:	69e3      	ldr	r3, [r4, #28]
    185e:	421a      	tst	r2, r3
    1860:	d1fc      	bne.n	185c <_spi_m_sync_init+0x90>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1862:	2380      	movs	r3, #128	; 0x80
    1864:	029b      	lsls	r3, r3, #10
    1866:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1868:	2207      	movs	r2, #7
    186a:	69e3      	ldr	r3, [r4, #28]
    186c:	421a      	tst	r2, r3
    186e:	d1fc      	bne.n	186a <_spi_m_sync_init+0x9e>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1870:	2301      	movs	r3, #1
    1872:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1874:	2100      	movs	r1, #0
    1876:	2230      	movs	r2, #48	; 0x30
    1878:	54a1      	strb	r1, [r4, r2]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    187a:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    187c:	4b10      	ldr	r3, [pc, #64]	; (18c0 <_spi_m_sync_init+0xf4>)
    187e:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    1880:	2000      	movs	r0, #0
}
    1882:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    1884:	4a09      	ldr	r2, [pc, #36]	; (18ac <_spi_m_sync_init+0xe0>)
    1886:	490a      	ldr	r1, [pc, #40]	; (18b0 <_spi_m_sync_init+0xe4>)
    1888:	2000      	movs	r0, #0
    188a:	4b0a      	ldr	r3, [pc, #40]	; (18b4 <_spi_m_sync_init+0xe8>)
    188c:	4798      	blx	r3
		return ERR_INVALID_ARG;
    188e:	200d      	movs	r0, #13
    1890:	4240      	negs	r0, r0
    1892:	e7f6      	b.n	1882 <_spi_m_sync_init+0xb6>
	ASSERT(dev && hw);
    1894:	0008      	movs	r0, r1
    1896:	1e43      	subs	r3, r0, #1
    1898:	4198      	sbcs	r0, r3
    189a:	b2c0      	uxtb	r0, r0
    189c:	4a03      	ldr	r2, [pc, #12]	; (18ac <_spi_m_sync_init+0xe0>)
    189e:	4904      	ldr	r1, [pc, #16]	; (18b0 <_spi_m_sync_init+0xe4>)
    18a0:	4b04      	ldr	r3, [pc, #16]	; (18b4 <_spi_m_sync_init+0xe8>)
    18a2:	4798      	blx	r3
    18a4:	e7ae      	b.n	1804 <_spi_m_sync_init+0x38>
    18a6:	46c0      	nop			; (mov r8, r8)
    18a8:	bdfff800 	.word	0xbdfff800
    18ac:	0000091b 	.word	0x0000091b
    18b0:	00007154 	.word	0x00007154
    18b4:	0000150d 	.word	0x0000150d
    18b8:	000008e5 	.word	0x000008e5
    18bc:	0001000c 	.word	0x0001000c
    18c0:	000001ff 	.word	0x000001ff

000018c4 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    18c4:	b510      	push	{r4, lr}
    18c6:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    18c8:	d00b      	beq.n	18e2 <_spi_m_sync_enable+0x1e>
    18ca:	6800      	ldr	r0, [r0, #0]
    18cc:	1e43      	subs	r3, r0, #1
    18ce:	4198      	sbcs	r0, r3
    18d0:	b2c0      	uxtb	r0, r0
    18d2:	4a05      	ldr	r2, [pc, #20]	; (18e8 <_spi_m_sync_enable+0x24>)
    18d4:	4905      	ldr	r1, [pc, #20]	; (18ec <_spi_m_sync_enable+0x28>)
    18d6:	4b06      	ldr	r3, [pc, #24]	; (18f0 <_spi_m_sync_enable+0x2c>)
    18d8:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    18da:	6820      	ldr	r0, [r4, #0]
    18dc:	4b05      	ldr	r3, [pc, #20]	; (18f4 <_spi_m_sync_enable+0x30>)
    18de:	4798      	blx	r3
}
    18e0:	bd10      	pop	{r4, pc}
    18e2:	2000      	movs	r0, #0
    18e4:	e7f5      	b.n	18d2 <_spi_m_sync_enable+0xe>
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	00000976 	.word	0x00000976
    18ec:	00007154 	.word	0x00007154
    18f0:	0000150d 	.word	0x0000150d
    18f4:	000016a1 	.word	0x000016a1

000018f8 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    18f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18fa:	46de      	mov	lr, fp
    18fc:	4657      	mov	r7, sl
    18fe:	464e      	mov	r6, r9
    1900:	4645      	mov	r5, r8
    1902:	b5e0      	push	{r5, r6, r7, lr}
    1904:	b083      	sub	sp, #12
    1906:	4681      	mov	r9, r0
    1908:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    190a:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    190c:	680b      	ldr	r3, [r1, #0]
    190e:	4698      	mov	r8, r3
    1910:	684d      	ldr	r5, [r1, #4]
    1912:	7903      	ldrb	r3, [r0, #4]
    1914:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    1916:	2800      	cmp	r0, #0
    1918:	d015      	beq.n	1946 <_spi_m_sync_trans+0x4e>
    191a:	0020      	movs	r0, r4
    191c:	1e43      	subs	r3, r0, #1
    191e:	4198      	sbcs	r0, r3
    1920:	b2c0      	uxtb	r0, r0
    1922:	4a36      	ldr	r2, [pc, #216]	; (19fc <_spi_m_sync_trans+0x104>)
    1924:	4936      	ldr	r1, [pc, #216]	; (1a00 <_spi_m_sync_trans+0x108>)
    1926:	4b37      	ldr	r3, [pc, #220]	; (1a04 <_spi_m_sync_trans+0x10c>)
    1928:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    192a:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    192c:	075b      	lsls	r3, r3, #29
    192e:	d13f      	bne.n	19b0 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1930:	2303      	movs	r3, #3
    1932:	69e0      	ldr	r0, [r4, #28]
    1934:	4018      	ands	r0, r3
    1936:	d1fc      	bne.n	1932 <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1938:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    193a:	079b      	lsls	r3, r3, #30
    193c:	d53b      	bpl.n	19b6 <_spi_m_sync_trans+0xbe>
    193e:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1940:	2301      	movs	r3, #1
    1942:	469c      	mov	ip, r3
    1944:	e009      	b.n	195a <_spi_m_sync_trans+0x62>
    1946:	2000      	movs	r0, #0
    1948:	e7eb      	b.n	1922 <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    194a:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    194c:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    194e:	b25b      	sxtb	r3, r3
    1950:	2b00      	cmp	r3, #0
    1952:	db16      	blt.n	1982 <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1954:	68b3      	ldr	r3, [r6, #8]
    1956:	4283      	cmp	r3, r0
    1958:	d927      	bls.n	19aa <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    195a:	7e23      	ldrb	r3, [r4, #24]
    195c:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    195e:	2104      	movs	r1, #4
    1960:	4219      	tst	r1, r3
    1962:	d02b      	beq.n	19bc <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1964:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1966:	2d00      	cmp	r5, #0
    1968:	d0f0      	beq.n	194c <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    196a:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    196c:	9901      	ldr	r1, [sp, #4]
    196e:	2901      	cmp	r1, #1
    1970:	d9eb      	bls.n	194a <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1972:	0a3f      	lsrs	r7, r7, #8
    1974:	706f      	strb	r7, [r5, #1]
    1976:	3502      	adds	r5, #2
    1978:	e7e8      	b.n	194c <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    197a:	2101      	movs	r1, #1
    197c:	468b      	mov	fp, r1
    197e:	44d8      	add	r8, fp
    1980:	e037      	b.n	19f2 <_spi_m_sync_trans+0xfa>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1982:	2301      	movs	r3, #1
    1984:	425b      	negs	r3, r3
    1986:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1988:	3381      	adds	r3, #129	; 0x81
    198a:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    198c:	2013      	movs	r0, #19
    198e:	4240      	negs	r0, r0
	tmp &= mask;
    1990:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1992:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1994:	4213      	tst	r3, r2
    1996:	d0fc      	beq.n	1992 <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1998:	2303      	movs	r3, #3
    199a:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    199c:	b003      	add	sp, #12
    199e:	bc3c      	pop	{r2, r3, r4, r5}
    19a0:	4690      	mov	r8, r2
    19a2:	4699      	mov	r9, r3
    19a4:	46a2      	mov	sl, r4
    19a6:	46ab      	mov	fp, r5
    19a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    19aa:	4293      	cmp	r3, r2
    19ac:	d8d5      	bhi.n	195a <_spi_m_sync_trans+0x62>
    19ae:	e7ef      	b.n	1990 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    19b0:	2004      	movs	r0, #4
    19b2:	4240      	negs	r0, r0
    19b4:	e7f2      	b.n	199c <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    19b6:	2014      	movs	r0, #20
    19b8:	4240      	negs	r0, r0
    19ba:	e7ef      	b.n	199c <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    19bc:	4290      	cmp	r0, r2
    19be:	d8c6      	bhi.n	194e <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    19c0:	4667      	mov	r7, ip
    19c2:	421f      	tst	r7, r3
    19c4:	d0c3      	beq.n	194e <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    19c6:	464f      	mov	r7, r9
    19c8:	88ff      	ldrh	r7, [r7, #6]
    19ca:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    19cc:	4647      	mov	r7, r8
    19ce:	2f00      	cmp	r7, #0
    19d0:	d00f      	beq.n	19f2 <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    19d2:	783f      	ldrb	r7, [r7, #0]
    19d4:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    19d6:	9901      	ldr	r1, [sp, #4]
    19d8:	2901      	cmp	r1, #1
    19da:	d9ce      	bls.n	197a <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    19dc:	4647      	mov	r7, r8
    19de:	787f      	ldrb	r7, [r7, #1]
    19e0:	023f      	lsls	r7, r7, #8
    19e2:	46bb      	mov	fp, r7
    19e4:	4657      	mov	r7, sl
    19e6:	4659      	mov	r1, fp
    19e8:	430f      	orrs	r7, r1
    19ea:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    19ec:	2102      	movs	r1, #2
    19ee:	468b      	mov	fp, r1
    19f0:	44d8      	add	r8, fp
	ctrl->txcnt++;
    19f2:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    19f4:	4657      	mov	r7, sl
    19f6:	62a7      	str	r7, [r4, #40]	; 0x28
    19f8:	e7a9      	b.n	194e <_spi_m_sync_trans+0x56>
    19fa:	46c0      	nop			; (mov r8, r8)
    19fc:	00000a7b 	.word	0x00000a7b
    1a00:	00007154 	.word	0x00007154
    1a04:	0000150d 	.word	0x0000150d

00001a08 <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    1a08:	4b11      	ldr	r3, [pc, #68]	; (1a50 <_sysctrl_init_sources+0x48>)
    1a0a:	4a12      	ldr	r2, [pc, #72]	; (1a54 <_sysctrl_init_sources+0x4c>)
    1a0c:	829a      	strh	r2, [r3, #20]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1a0e:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1a10:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1a12:	4811      	ldr	r0, [pc, #68]	; (1a58 <_sysctrl_init_sources+0x50>)
    1a14:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1a16:	0f92      	lsrs	r2, r2, #30
    1a18:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    1a1a:	2002      	movs	r0, #2
    1a1c:	4302      	orrs	r2, r0
    1a1e:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1a20:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1a22:	699a      	ldr	r2, [r3, #24]
    1a24:	4302      	orrs	r2, r0
    1a26:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1a28:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1a2a:	211f      	movs	r1, #31
    1a2c:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1a2e:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    1a30:	0019      	movs	r1, r3
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    1a32:	2202      	movs	r2, #2
    1a34:	68cb      	ldr	r3, [r1, #12]
    1a36:	421a      	tst	r2, r3
    1a38:	d0fc      	beq.n	1a34 <_sysctrl_init_sources+0x2c>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1a3a:	4905      	ldr	r1, [pc, #20]	; (1a50 <_sysctrl_init_sources+0x48>)
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1a3c:	2208      	movs	r2, #8
    1a3e:	68cb      	ldr	r3, [r1, #12]
    1a40:	421a      	tst	r2, r3
    1a42:	d0fc      	beq.n	1a3e <_sysctrl_init_sources+0x36>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1a44:	4a02      	ldr	r2, [pc, #8]	; (1a50 <_sysctrl_init_sources+0x48>)
    1a46:	6a13      	ldr	r3, [r2, #32]
    1a48:	2180      	movs	r1, #128	; 0x80
    1a4a:	430b      	orrs	r3, r1
    1a4c:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1a4e:	4770      	bx	lr
    1a50:	40000800 	.word	0x40000800
    1a54:	0000022e 	.word	0x0000022e
    1a58:	0fff0000 	.word	0x0fff0000

00001a5c <_sysctrl_init_referenced_generators>:
	((Gclk *)hw)->CLKCTRL.reg = data;
    1a5c:	2286      	movs	r2, #134	; 0x86
    1a5e:	01d2      	lsls	r2, r2, #7
    1a60:	4b1a      	ldr	r3, [pc, #104]	; (1acc <_sysctrl_init_referenced_generators+0x70>)
    1a62:	805a      	strh	r2, [r3, #2]
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1a64:	2202      	movs	r2, #2
    1a66:	4b1a      	ldr	r3, [pc, #104]	; (1ad0 <_sysctrl_init_referenced_generators+0x74>)
    1a68:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1a6a:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1a6c:	320e      	adds	r2, #14
    1a6e:	68cb      	ldr	r3, [r1, #12]
    1a70:	421a      	tst	r2, r3
    1a72:	d0fc      	beq.n	1a6e <_sysctrl_init_referenced_generators+0x12>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    1a74:	4a17      	ldr	r2, [pc, #92]	; (1ad4 <_sysctrl_init_referenced_generators+0x78>)
    1a76:	4b16      	ldr	r3, [pc, #88]	; (1ad0 <_sysctrl_init_referenced_generators+0x74>)
    1a78:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1a7a:	4b17      	ldr	r3, [pc, #92]	; (1ad8 <_sysctrl_init_referenced_generators+0x7c>)
    1a7c:	681b      	ldr	r3, [r3, #0]
    1a7e:	0e9b      	lsrs	r3, r3, #26
    1a80:	2b3f      	cmp	r3, #63	; 0x3f
    1a82:	d01a      	beq.n	1aba <_sysctrl_init_referenced_generators+0x5e>
    1a84:	029b      	lsls	r3, r3, #10
    1a86:	2280      	movs	r2, #128	; 0x80
    1a88:	0092      	lsls	r2, r2, #2
    1a8a:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1a8c:	4a10      	ldr	r2, [pc, #64]	; (1ad0 <_sysctrl_init_referenced_generators+0x74>)
    1a8e:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1a90:	4b12      	ldr	r3, [pc, #72]	; (1adc <_sysctrl_init_referenced_generators+0x80>)
    1a92:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    1a94:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1a96:	075b      	lsls	r3, r3, #29
    1a98:	d512      	bpl.n	1ac0 <_sysctrl_init_referenced_generators+0x64>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1a9a:	0011      	movs	r1, r2
	tmp &= mask;
    1a9c:	22d0      	movs	r2, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1a9e:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    1aa0:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    1aa2:	2bd0      	cmp	r3, #208	; 0xd0
    1aa4:	d1fb      	bne.n	1a9e <_sysctrl_init_referenced_generators+0x42>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    1aa6:	4a09      	ldr	r2, [pc, #36]	; (1acc <_sysctrl_init_referenced_generators+0x70>)
    1aa8:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    1aaa:	09db      	lsrs	r3, r3, #7
    1aac:	d1fc      	bne.n	1aa8 <_sysctrl_init_referenced_generators+0x4c>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1aae:	4a08      	ldr	r2, [pc, #32]	; (1ad0 <_sysctrl_init_referenced_generators+0x74>)
    1ab0:	6993      	ldr	r3, [r2, #24]
    1ab2:	2102      	movs	r1, #2
    1ab4:	438b      	bics	r3, r1
    1ab6:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1ab8:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1aba:	23fc      	movs	r3, #252	; 0xfc
    1abc:	01db      	lsls	r3, r3, #7
    1abe:	e7e5      	b.n	1a8c <_sysctrl_init_referenced_generators+0x30>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1ac0:	4903      	ldr	r1, [pc, #12]	; (1ad0 <_sysctrl_init_referenced_generators+0x74>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1ac2:	2210      	movs	r2, #16
    1ac4:	68cb      	ldr	r3, [r1, #12]
    1ac6:	421a      	tst	r2, r3
    1ac8:	d0fc      	beq.n	1ac4 <_sysctrl_init_referenced_generators+0x68>
    1aca:	e7ec      	b.n	1aa6 <_sysctrl_init_referenced_generators+0x4a>
    1acc:	40000c00 	.word	0x40000c00
    1ad0:	40000800 	.word	0x40000800
    1ad4:	040105b8 	.word	0x040105b8
    1ad8:	00806024 	.word	0x00806024
    1adc:	0000080e 	.word	0x0000080e

00001ae0 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1ae0:	4b02      	ldr	r3, [pc, #8]	; (1aec <_delay_init+0xc>)
    1ae2:	4a03      	ldr	r2, [pc, #12]	; (1af0 <_delay_init+0x10>)
    1ae4:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1ae6:	2205      	movs	r2, #5
    1ae8:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    1aea:	4770      	bx	lr
    1aec:	e000e010 	.word	0xe000e010
    1af0:	00ffffff 	.word	0x00ffffff

00001af4 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    1af4:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
    1af6:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1af8:	1e5e      	subs	r6, r3, #1
    1afa:	b2f6      	uxtb	r6, r6
    1afc:	2b00      	cmp	r3, #0
    1afe:	d013      	beq.n	1b28 <_delay_cycles+0x34>
    1b00:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
    1b02:	4a0e      	ldr	r2, [pc, #56]	; (1b3c <_delay_cycles+0x48>)
    1b04:	4d0e      	ldr	r5, [pc, #56]	; (1b40 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1b06:	2080      	movs	r0, #128	; 0x80
    1b08:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
    1b0a:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    1b0c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1b0e:	6813      	ldr	r3, [r2, #0]
    1b10:	4203      	tst	r3, r0
    1b12:	d0fc      	beq.n	1b0e <_delay_cycles+0x1a>
	while (n--) {
    1b14:	3c01      	subs	r4, #1
    1b16:	b2e4      	uxtb	r4, r4
    1b18:	2cff      	cmp	r4, #255	; 0xff
    1b1a:	d1f6      	bne.n	1b0a <_delay_cycles+0x16>
    1b1c:	0633      	lsls	r3, r6, #24
    1b1e:	1af6      	subs	r6, r6, r3
    1b20:	4b08      	ldr	r3, [pc, #32]	; (1b44 <_delay_cycles+0x50>)
    1b22:	469c      	mov	ip, r3
    1b24:	4461      	add	r1, ip
    1b26:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1b28:	4b04      	ldr	r3, [pc, #16]	; (1b3c <_delay_cycles+0x48>)
    1b2a:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1b2c:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1b2e:	0019      	movs	r1, r3
    1b30:	2280      	movs	r2, #128	; 0x80
    1b32:	0252      	lsls	r2, r2, #9
    1b34:	680b      	ldr	r3, [r1, #0]
    1b36:	4213      	tst	r3, r2
    1b38:	d0fc      	beq.n	1b34 <_delay_cycles+0x40>
		;
}
    1b3a:	bd70      	pop	{r4, r5, r6, pc}
    1b3c:	e000e010 	.word	0xe000e010
    1b40:	00ffffff 	.word	0x00ffffff
    1b44:	ff000001 	.word	0xff000001

00001b48 <Start_Graphic_Lib>:
void Test_Graphic_Cir();
void Test_draw_bitmap();
void Test_Graphic_FillRect();
void Test_Text_char();
	void Start_Graphic_Lib(void)
	{
    1b48:	b510      	push	{r4, lr}
    1b4a:	b082      	sub	sp, #8
		/*must be Called once to select the LCD and SPI parameters*/
		ST7789_Init(&ST7789_t,display_Height,display_Width,
    1b4c:	2326      	movs	r3, #38	; 0x26
    1b4e:	9301      	str	r3, [sp, #4]
    1b50:	3301      	adds	r3, #1
    1b52:	9300      	str	r3, [sp, #0]
    1b54:	3b04      	subs	r3, #4
    1b56:	22f0      	movs	r2, #240	; 0xf0
    1b58:	21f0      	movs	r1, #240	; 0xf0
    1b5a:	4802      	ldr	r0, [pc, #8]	; (1b64 <Start_Graphic_Lib+0x1c>)
    1b5c:	4c02      	ldr	r4, [pc, #8]	; (1b68 <Start_Graphic_Lib+0x20>)
    1b5e:	47a0      	blx	r4
					SPI_display_CS,Display_DC_pin,Display_RST_pin);
	}
    1b60:	b002      	add	sp, #8
    1b62:	bd10      	pop	{r4, pc}
    1b64:	20000b34 	.word	0x20000b34
    1b68:	00000559 	.word	0x00000559

00001b6c <Port_test>:

void Port_test()
{
    1b6c:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1b6e:	25c0      	movs	r5, #192	; 0xc0
    1b70:	05ed      	lsls	r5, r5, #23
    1b72:	2680      	movs	r6, #128	; 0x80
    1b74:	05f6      	lsls	r6, r6, #23
    1b76:	2398      	movs	r3, #152	; 0x98
    1b78:	50ee      	str	r6, [r5, r3]
	gpio_set_port_level(GPIO_PORTB,1U << GPIO_PIN(LED0),true);
	delay_ms(100);
    1b7a:	2064      	movs	r0, #100	; 0x64
    1b7c:	4c03      	ldr	r4, [pc, #12]	; (1b8c <Port_test+0x20>)
    1b7e:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1b80:	2394      	movs	r3, #148	; 0x94
    1b82:	50ee      	str	r6, [r5, r3]
	gpio_set_port_level(GPIO_PORTB,1U << GPIO_PIN(LED0),false);
	delay_ms(100);
    1b84:	2064      	movs	r0, #100	; 0x64
    1b86:	47a0      	blx	r4
}	
    1b88:	bd70      	pop	{r4, r5, r6, pc}
    1b8a:	46c0      	nop			; (mov r8, r8)
    1b8c:	0000115d 	.word	0x0000115d

00001b90 <Test_Graphic_VLine>:

	void Test_Graphic_VLine()
	{
    1b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b92:	b083      	sub	sp, #12
			for (uint16_t col=0;col<ST7789_t.width;col+=8)
    1b94:	4b17      	ldr	r3, [pc, #92]	; (1bf4 <Test_Graphic_VLine+0x64>)
    1b96:	88db      	ldrh	r3, [r3, #6]
    1b98:	2b00      	cmp	r3, #0
    1b9a:	d028      	beq.n	1bee <Test_Graphic_VLine+0x5e>
    1b9c:	2400      	movs	r4, #0
			{
				ST7789_drawFastVLine(&ST7789_t,col,0,ST7789_t.height,ST7789_GREEN);
    1b9e:	4d15      	ldr	r5, [pc, #84]	; (1bf4 <Test_Graphic_VLine+0x64>)
    1ba0:	4f15      	ldr	r7, [pc, #84]	; (1bf8 <Test_Graphic_VLine+0x68>)
				delay_ms(50);
    1ba2:	4e16      	ldr	r6, [pc, #88]	; (1bfc <Test_Graphic_VLine+0x6c>)
				ST7789_drawFastVLine(&ST7789_t,col,0,ST7789_t.height,ST7789_GREEN);
    1ba4:	2208      	movs	r2, #8
    1ba6:	5eab      	ldrsh	r3, [r5, r2]
    1ba8:	b221      	sxth	r1, r4
    1baa:	22fc      	movs	r2, #252	; 0xfc
    1bac:	00d2      	lsls	r2, r2, #3
    1bae:	9200      	str	r2, [sp, #0]
    1bb0:	2200      	movs	r2, #0
    1bb2:	0028      	movs	r0, r5
    1bb4:	47b8      	blx	r7
				delay_ms(50);
    1bb6:	2032      	movs	r0, #50	; 0x32
    1bb8:	47b0      	blx	r6
			for (uint16_t col=0;col<ST7789_t.width;col+=8)
    1bba:	3408      	adds	r4, #8
    1bbc:	b2a4      	uxth	r4, r4
    1bbe:	88eb      	ldrh	r3, [r5, #6]
    1bc0:	42a3      	cmp	r3, r4
    1bc2:	d8ef      	bhi.n	1ba4 <Test_Graphic_VLine+0x14>
			}
			for (uint16_t col=4;col<ST7789_t.width;col+=8)
    1bc4:	2b04      	cmp	r3, #4
    1bc6:	d912      	bls.n	1bee <Test_Graphic_VLine+0x5e>
    1bc8:	2404      	movs	r4, #4
			{
				ST7789_drawFastVLine(&ST7789_t,col,0,ST7789_t.height,ST7789_BLUE);
    1bca:	4d0a      	ldr	r5, [pc, #40]	; (1bf4 <Test_Graphic_VLine+0x64>)
    1bcc:	4f0a      	ldr	r7, [pc, #40]	; (1bf8 <Test_Graphic_VLine+0x68>)
				delay_ms(50);
    1bce:	4e0b      	ldr	r6, [pc, #44]	; (1bfc <Test_Graphic_VLine+0x6c>)
				ST7789_drawFastVLine(&ST7789_t,col,0,ST7789_t.height,ST7789_BLUE);
    1bd0:	2208      	movs	r2, #8
    1bd2:	5eab      	ldrsh	r3, [r5, r2]
    1bd4:	b221      	sxth	r1, r4
    1bd6:	221f      	movs	r2, #31
    1bd8:	9200      	str	r2, [sp, #0]
    1bda:	2200      	movs	r2, #0
    1bdc:	0028      	movs	r0, r5
    1bde:	47b8      	blx	r7
				delay_ms(50);
    1be0:	2032      	movs	r0, #50	; 0x32
    1be2:	47b0      	blx	r6
			for (uint16_t col=4;col<ST7789_t.width;col+=8)
    1be4:	3408      	adds	r4, #8
    1be6:	b2a4      	uxth	r4, r4
    1be8:	88eb      	ldrh	r3, [r5, #6]
    1bea:	42a3      	cmp	r3, r4
    1bec:	d8f0      	bhi.n	1bd0 <Test_Graphic_VLine+0x40>
			}
			
	}
    1bee:	b003      	add	sp, #12
    1bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bf2:	46c0      	nop			; (mov r8, r8)
    1bf4:	20000b34 	.word	0x20000b34
    1bf8:	00000989 	.word	0x00000989
    1bfc:	0000115d 	.word	0x0000115d

00001c00 <Test_Graphic_HLine>:

	void Test_Graphic_HLine()
	{
    1c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c02:	b083      	sub	sp, #12
		for (uint16_t row=0;row<ST7789_t.height;row+=8)
    1c04:	4b17      	ldr	r3, [pc, #92]	; (1c64 <Test_Graphic_HLine+0x64>)
    1c06:	891b      	ldrh	r3, [r3, #8]
    1c08:	2b00      	cmp	r3, #0
    1c0a:	d028      	beq.n	1c5e <Test_Graphic_HLine+0x5e>
    1c0c:	2400      	movs	r4, #0
		{
			ST7789_drawFastHLine(&ST7789_t,0,row,ST7789_t.width,ST7789_RED);
    1c0e:	4d15      	ldr	r5, [pc, #84]	; (1c64 <Test_Graphic_HLine+0x64>)
    1c10:	4f15      	ldr	r7, [pc, #84]	; (1c68 <Test_Graphic_HLine+0x68>)
			delay_ms(50);
    1c12:	4e16      	ldr	r6, [pc, #88]	; (1c6c <Test_Graphic_HLine+0x6c>)
			ST7789_drawFastHLine(&ST7789_t,0,row,ST7789_t.width,ST7789_RED);
    1c14:	2206      	movs	r2, #6
    1c16:	5eab      	ldrsh	r3, [r5, r2]
    1c18:	b222      	sxth	r2, r4
    1c1a:	21f8      	movs	r1, #248	; 0xf8
    1c1c:	0209      	lsls	r1, r1, #8
    1c1e:	9100      	str	r1, [sp, #0]
    1c20:	2100      	movs	r1, #0
    1c22:	0028      	movs	r0, r5
    1c24:	47b8      	blx	r7
			delay_ms(50);
    1c26:	2032      	movs	r0, #50	; 0x32
    1c28:	47b0      	blx	r6
		for (uint16_t row=0;row<ST7789_t.height;row+=8)
    1c2a:	3408      	adds	r4, #8
    1c2c:	b2a4      	uxth	r4, r4
    1c2e:	892b      	ldrh	r3, [r5, #8]
    1c30:	42a3      	cmp	r3, r4
    1c32:	d8ef      	bhi.n	1c14 <Test_Graphic_HLine+0x14>
		}
		for (uint16_t row=4;row<ST7789_t.height;row+=8)
    1c34:	2b04      	cmp	r3, #4
    1c36:	d912      	bls.n	1c5e <Test_Graphic_HLine+0x5e>
    1c38:	2404      	movs	r4, #4
		{
			ST7789_drawFastHLine(&ST7789_t,0,row,ST7789_t.width,ST7789_CYAN);
    1c3a:	4d0a      	ldr	r5, [pc, #40]	; (1c64 <Test_Graphic_HLine+0x64>)
    1c3c:	4f0a      	ldr	r7, [pc, #40]	; (1c68 <Test_Graphic_HLine+0x68>)
			delay_ms(50);
    1c3e:	4e0b      	ldr	r6, [pc, #44]	; (1c6c <Test_Graphic_HLine+0x6c>)
			ST7789_drawFastHLine(&ST7789_t,0,row,ST7789_t.width,ST7789_CYAN);
    1c40:	2206      	movs	r2, #6
    1c42:	5eab      	ldrsh	r3, [r5, r2]
    1c44:	b222      	sxth	r2, r4
    1c46:	490a      	ldr	r1, [pc, #40]	; (1c70 <Test_Graphic_HLine+0x70>)
    1c48:	9100      	str	r1, [sp, #0]
    1c4a:	2100      	movs	r1, #0
    1c4c:	0028      	movs	r0, r5
    1c4e:	47b8      	blx	r7
			delay_ms(50);
    1c50:	2032      	movs	r0, #50	; 0x32
    1c52:	47b0      	blx	r6
		for (uint16_t row=4;row<ST7789_t.height;row+=8)
    1c54:	3408      	adds	r4, #8
    1c56:	b2a4      	uxth	r4, r4
    1c58:	892b      	ldrh	r3, [r5, #8]
    1c5a:	42a3      	cmp	r3, r4
    1c5c:	d8f0      	bhi.n	1c40 <Test_Graphic_HLine+0x40>
		}
	
	}
    1c5e:	b003      	add	sp, #12
    1c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c62:	46c0      	nop			; (mov r8, r8)
    1c64:	20000b34 	.word	0x20000b34
    1c68:	00000a19 	.word	0x00000a19
    1c6c:	0000115d 	.word	0x0000115d
    1c70:	000007ff 	.word	0x000007ff

00001c74 <Test_Graphic_Rect>:
	
	void Test_Graphic_Rect()
	{
    1c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c76:	46c6      	mov	lr, r8
    1c78:	b500      	push	{lr}
    1c7a:	b082      	sub	sp, #8
			ST7789_drawRect(&ST7789_t,32,32,64,32,ST7789_CYAN);
    1c7c:	4c20      	ldr	r4, [pc, #128]	; (1d00 <Test_Graphic_Rect+0x8c>)
    1c7e:	4b21      	ldr	r3, [pc, #132]	; (1d04 <Test_Graphic_Rect+0x90>)
    1c80:	9301      	str	r3, [sp, #4]
    1c82:	2320      	movs	r3, #32
    1c84:	9300      	str	r3, [sp, #0]
    1c86:	3320      	adds	r3, #32
    1c88:	2220      	movs	r2, #32
    1c8a:	2120      	movs	r1, #32
    1c8c:	0020      	movs	r0, r4
    1c8e:	4d1e      	ldr	r5, [pc, #120]	; (1d08 <Test_Graphic_Rect+0x94>)
    1c90:	47a8      	blx	r5
			ST7789_drawRect(&ST7789_t,16,16,96,64,ST7789_RED);
    1c92:	26f8      	movs	r6, #248	; 0xf8
    1c94:	0236      	lsls	r6, r6, #8
    1c96:	9601      	str	r6, [sp, #4]
    1c98:	2340      	movs	r3, #64	; 0x40
    1c9a:	9300      	str	r3, [sp, #0]
    1c9c:	3320      	adds	r3, #32
    1c9e:	2210      	movs	r2, #16
    1ca0:	2110      	movs	r1, #16
    1ca2:	0020      	movs	r0, r4
    1ca4:	47a8      	blx	r5
			ST7789_drawRect(&ST7789_t,16,128,72,16,ST7789_YELLOW);
    1ca6:	4b19      	ldr	r3, [pc, #100]	; (1d0c <Test_Graphic_Rect+0x98>)
    1ca8:	4698      	mov	r8, r3
    1caa:	9301      	str	r3, [sp, #4]
    1cac:	2710      	movs	r7, #16
    1cae:	9700      	str	r7, [sp, #0]
    1cb0:	2348      	movs	r3, #72	; 0x48
    1cb2:	2280      	movs	r2, #128	; 0x80
    1cb4:	2110      	movs	r1, #16
    1cb6:	0020      	movs	r0, r4
    1cb8:	47a8      	blx	r5
			ST7789_fillRect(&ST7789_t,168,128,16,48,ST7789_GREEN);
    1cba:	23fc      	movs	r3, #252	; 0xfc
    1cbc:	00db      	lsls	r3, r3, #3
    1cbe:	9301      	str	r3, [sp, #4]
    1cc0:	2330      	movs	r3, #48	; 0x30
    1cc2:	9300      	str	r3, [sp, #0]
    1cc4:	3b20      	subs	r3, #32
    1cc6:	2280      	movs	r2, #128	; 0x80
    1cc8:	21a8      	movs	r1, #168	; 0xa8
    1cca:	0020      	movs	r0, r4
    1ccc:	4d10      	ldr	r5, [pc, #64]	; (1d10 <Test_Graphic_Rect+0x9c>)
    1cce:	47a8      	blx	r5
			ST7789_fillRect(&ST7789_t,16,216,24,16,ST7789_YELLOW);
    1cd0:	4643      	mov	r3, r8
    1cd2:	9301      	str	r3, [sp, #4]
    1cd4:	9700      	str	r7, [sp, #0]
    1cd6:	2318      	movs	r3, #24
    1cd8:	22d8      	movs	r2, #216	; 0xd8
    1cda:	2110      	movs	r1, #16
    1cdc:	0020      	movs	r0, r4
    1cde:	47a8      	blx	r5
			ST7789_fillRect(&ST7789_t,64,216,32,24,ST7789_RED);
    1ce0:	9601      	str	r6, [sp, #4]
    1ce2:	2318      	movs	r3, #24
    1ce4:	9300      	str	r3, [sp, #0]
    1ce6:	3308      	adds	r3, #8
    1ce8:	22d8      	movs	r2, #216	; 0xd8
    1cea:	2140      	movs	r1, #64	; 0x40
    1cec:	0020      	movs	r0, r4
    1cee:	47a8      	blx	r5
			delay_ms(1000);
    1cf0:	20fa      	movs	r0, #250	; 0xfa
    1cf2:	0080      	lsls	r0, r0, #2
    1cf4:	4b07      	ldr	r3, [pc, #28]	; (1d14 <Test_Graphic_Rect+0xa0>)
    1cf6:	4798      	blx	r3
		
	}	
    1cf8:	b002      	add	sp, #8
    1cfa:	bc04      	pop	{r2}
    1cfc:	4690      	mov	r8, r2
    1cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d00:	20000b34 	.word	0x20000b34
    1d04:	000007ff 	.word	0x000007ff
    1d08:	00000aa9 	.word	0x00000aa9
    1d0c:	0000ffe0 	.word	0x0000ffe0
    1d10:	00000b0d 	.word	0x00000b0d
    1d14:	0000115d 	.word	0x0000115d

00001d18 <Test_Graphic_Cir>:
	
	void Test_Graphic_Cir()
	{
    1d18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d1a:	b083      	sub	sp, #12
		for (uint16_t i=(ST7789_t.width/6)-1 ; i>4 ;i-=2)
    1d1c:	4b1c      	ldr	r3, [pc, #112]	; (1d90 <Test_Graphic_Cir+0x78>)
    1d1e:	88d8      	ldrh	r0, [r3, #6]
    1d20:	2106      	movs	r1, #6
    1d22:	4b1c      	ldr	r3, [pc, #112]	; (1d94 <Test_Graphic_Cir+0x7c>)
    1d24:	4798      	blx	r3
    1d26:	3801      	subs	r0, #1
    1d28:	b284      	uxth	r4, r0
    1d2a:	2c04      	cmp	r4, #4
    1d2c:	d911      	bls.n	1d52 <Test_Graphic_Cir+0x3a>
		{
		ST7789_drawCircle(&ST7789_t,ST7789_t.width/2,ST7789_t.height/2,i,ST7789_BLUE);	
    1d2e:	4d18      	ldr	r5, [pc, #96]	; (1d90 <Test_Graphic_Cir+0x78>)
    1d30:	4f19      	ldr	r7, [pc, #100]	; (1d98 <Test_Graphic_Cir+0x80>)
		delay_ms(50);
    1d32:	4e1a      	ldr	r6, [pc, #104]	; (1d9c <Test_Graphic_Cir+0x84>)
		ST7789_drawCircle(&ST7789_t,ST7789_t.width/2,ST7789_t.height/2,i,ST7789_BLUE);	
    1d34:	b223      	sxth	r3, r4
    1d36:	892a      	ldrh	r2, [r5, #8]
    1d38:	0852      	lsrs	r2, r2, #1
    1d3a:	88e9      	ldrh	r1, [r5, #6]
    1d3c:	0849      	lsrs	r1, r1, #1
    1d3e:	201f      	movs	r0, #31
    1d40:	9000      	str	r0, [sp, #0]
    1d42:	0028      	movs	r0, r5
    1d44:	47b8      	blx	r7
		delay_ms(50);
    1d46:	2032      	movs	r0, #50	; 0x32
    1d48:	47b0      	blx	r6
		for (uint16_t i=(ST7789_t.width/6)-1 ; i>4 ;i-=2)
    1d4a:	3c02      	subs	r4, #2
    1d4c:	b2a4      	uxth	r4, r4
    1d4e:	2c04      	cmp	r4, #4
    1d50:	d8f0      	bhi.n	1d34 <Test_Graphic_Cir+0x1c>
		}
		delay_ms(2000);
    1d52:	20fa      	movs	r0, #250	; 0xfa
    1d54:	00c0      	lsls	r0, r0, #3
    1d56:	4e11      	ldr	r6, [pc, #68]	; (1d9c <Test_Graphic_Cir+0x84>)
    1d58:	47b0      	blx	r6
		ST7789_fillScreen(&ST7789_t,ST7789_WHITE);	
    1d5a:	4c0d      	ldr	r4, [pc, #52]	; (1d90 <Test_Graphic_Cir+0x78>)
    1d5c:	4910      	ldr	r1, [pc, #64]	; (1da0 <Test_Graphic_Cir+0x88>)
    1d5e:	0020      	movs	r0, r4
    1d60:	4b10      	ldr	r3, [pc, #64]	; (1da4 <Test_Graphic_Cir+0x8c>)
    1d62:	4798      	blx	r3
		ST7789_fillCircle(&ST7789_t,ST7789_t.width/2,ST7789_t.height/2,(ST7789_t.width/6)-1,ST7789_RED);
    1d64:	88e5      	ldrh	r5, [r4, #6]
    1d66:	2106      	movs	r1, #6
    1d68:	0028      	movs	r0, r5
    1d6a:	4b0a      	ldr	r3, [pc, #40]	; (1d94 <Test_Graphic_Cir+0x7c>)
    1d6c:	4798      	blx	r3
    1d6e:	3801      	subs	r0, #1
    1d70:	b203      	sxth	r3, r0
    1d72:	8922      	ldrh	r2, [r4, #8]
    1d74:	0852      	lsrs	r2, r2, #1
    1d76:	0869      	lsrs	r1, r5, #1
    1d78:	20f8      	movs	r0, #248	; 0xf8
    1d7a:	0200      	lsls	r0, r0, #8
    1d7c:	9000      	str	r0, [sp, #0]
    1d7e:	0020      	movs	r0, r4
    1d80:	4c09      	ldr	r4, [pc, #36]	; (1da8 <Test_Graphic_Cir+0x90>)
    1d82:	47a0      	blx	r4
		delay_ms(500);
    1d84:	20fa      	movs	r0, #250	; 0xfa
    1d86:	0040      	lsls	r0, r0, #1
    1d88:	47b0      	blx	r6
	}
    1d8a:	b003      	add	sp, #12
    1d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	20000b34 	.word	0x20000b34
    1d94:	00002175 	.word	0x00002175
    1d98:	00000c1d 	.word	0x00000c1d
    1d9c:	0000115d 	.word	0x0000115d
    1da0:	0000ffff 	.word	0x0000ffff
    1da4:	00000b9d 	.word	0x00000b9d
    1da8:	00000ecd 	.word	0x00000ecd

00001dac <Test_Text_char>:
	
	void Test_Text_char()
	{
    1dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dae:	46ce      	mov	lr, r9
    1db0:	b500      	push	{lr}
    1db2:	b084      	sub	sp, #16
		ST7789_DrawCharAt(&ST7789_t,5,5,'A',&Font24,1,ST7789_BLACK);
    1db4:	2400      	movs	r4, #0
    1db6:	9402      	str	r4, [sp, #8]
    1db8:	2501      	movs	r5, #1
    1dba:	9501      	str	r5, [sp, #4]
    1dbc:	4b2e      	ldr	r3, [pc, #184]	; (1e78 <Test_Text_char+0xcc>)
    1dbe:	4699      	mov	r9, r3
    1dc0:	9300      	str	r3, [sp, #0]
    1dc2:	2341      	movs	r3, #65	; 0x41
    1dc4:	2205      	movs	r2, #5
    1dc6:	2105      	movs	r1, #5
    1dc8:	482c      	ldr	r0, [pc, #176]	; (1e7c <Test_Text_char+0xd0>)
    1dca:	4e2d      	ldr	r6, [pc, #180]	; (1e80 <Test_Text_char+0xd4>)
    1dcc:	47b0      	blx	r6
		ST7789_DrawCharAt(&ST7789_t,64,5,'X',&Font16,1,ST7789_BLACK);
    1dce:	9402      	str	r4, [sp, #8]
    1dd0:	9501      	str	r5, [sp, #4]
    1dd2:	4f2c      	ldr	r7, [pc, #176]	; (1e84 <Test_Text_char+0xd8>)
    1dd4:	9700      	str	r7, [sp, #0]
    1dd6:	2358      	movs	r3, #88	; 0x58
    1dd8:	2205      	movs	r2, #5
    1dda:	2140      	movs	r1, #64	; 0x40
    1ddc:	4827      	ldr	r0, [pc, #156]	; (1e7c <Test_Text_char+0xd0>)
    1dde:	47b0      	blx	r6
		ST7789_DrawStringAt(&ST7789_t,5,24,"Hello World",&Font24,1,ST7789_BLACK);
    1de0:	9402      	str	r4, [sp, #8]
    1de2:	9501      	str	r5, [sp, #4]
    1de4:	464b      	mov	r3, r9
    1de6:	9300      	str	r3, [sp, #0]
    1de8:	4b27      	ldr	r3, [pc, #156]	; (1e88 <Test_Text_char+0xdc>)
    1dea:	2218      	movs	r2, #24
    1dec:	2105      	movs	r1, #5
    1dee:	4823      	ldr	r0, [pc, #140]	; (1e7c <Test_Text_char+0xd0>)
    1df0:	4e26      	ldr	r6, [pc, #152]	; (1e8c <Test_Text_char+0xe0>)
    1df2:	47b0      	blx	r6
		ST7789_DrawStringAt(&ST7789_t,5,48,"ST7789 Display",&Font16,1,ST7789_BLACK);
    1df4:	9402      	str	r4, [sp, #8]
    1df6:	9501      	str	r5, [sp, #4]
    1df8:	9700      	str	r7, [sp, #0]
    1dfa:	4b25      	ldr	r3, [pc, #148]	; (1e90 <Test_Text_char+0xe4>)
    1dfc:	2230      	movs	r2, #48	; 0x30
    1dfe:	2105      	movs	r1, #5
    1e00:	481e      	ldr	r0, [pc, #120]	; (1e7c <Test_Text_char+0xd0>)
    1e02:	47b0      	blx	r6
		ST7789_DrawStringAt(&ST7789_t,5,68,"With SAMD21J18",&Font16,1,ST7789_RED);
    1e04:	24f8      	movs	r4, #248	; 0xf8
    1e06:	0224      	lsls	r4, r4, #8
    1e08:	9402      	str	r4, [sp, #8]
    1e0a:	9501      	str	r5, [sp, #4]
    1e0c:	9700      	str	r7, [sp, #0]
    1e0e:	4b21      	ldr	r3, [pc, #132]	; (1e94 <Test_Text_char+0xe8>)
    1e10:	2244      	movs	r2, #68	; 0x44
    1e12:	2105      	movs	r1, #5
    1e14:	4819      	ldr	r0, [pc, #100]	; (1e7c <Test_Text_char+0xd0>)
    1e16:	47b0      	blx	r6
		ST7789_DrawStringAt(&ST7789_t,5,88,"& SAML22J18",&Font16,1,ST7789_RED);
    1e18:	9402      	str	r4, [sp, #8]
    1e1a:	9501      	str	r5, [sp, #4]
    1e1c:	9700      	str	r7, [sp, #0]
    1e1e:	4b1e      	ldr	r3, [pc, #120]	; (1e98 <Test_Text_char+0xec>)
    1e20:	2258      	movs	r2, #88	; 0x58
    1e22:	2105      	movs	r1, #5
    1e24:	4815      	ldr	r0, [pc, #84]	; (1e7c <Test_Text_char+0xd0>)
    1e26:	47b0      	blx	r6
		ST7789_DrawStringAt(&ST7789_t,5,108,"With SPI Bus",&Font16,1,ST7789_BLUE);
    1e28:	241f      	movs	r4, #31
    1e2a:	9402      	str	r4, [sp, #8]
    1e2c:	9501      	str	r5, [sp, #4]
    1e2e:	9700      	str	r7, [sp, #0]
    1e30:	4b1a      	ldr	r3, [pc, #104]	; (1e9c <Test_Text_char+0xf0>)
    1e32:	226c      	movs	r2, #108	; 0x6c
    1e34:	2105      	movs	r1, #5
    1e36:	4811      	ldr	r0, [pc, #68]	; (1e7c <Test_Text_char+0xd0>)
    1e38:	47b0      	blx	r6
		ST7789_DrawStringAt(&ST7789_t,5,128,"Programmed by",&Font16,1,ST7789_BLUE);
    1e3a:	9402      	str	r4, [sp, #8]
    1e3c:	9501      	str	r5, [sp, #4]
    1e3e:	9700      	str	r7, [sp, #0]
    1e40:	4b17      	ldr	r3, [pc, #92]	; (1ea0 <Test_Text_char+0xf4>)
    1e42:	2280      	movs	r2, #128	; 0x80
    1e44:	2105      	movs	r1, #5
    1e46:	480d      	ldr	r0, [pc, #52]	; (1e7c <Test_Text_char+0xd0>)
    1e48:	47b0      	blx	r6
		ST7789_DrawStringAt(&ST7789_t,5,150,"M.Rawashdeh",&Font24,1,ST7789_BLUE);
    1e4a:	9402      	str	r4, [sp, #8]
    1e4c:	9501      	str	r5, [sp, #4]
    1e4e:	464b      	mov	r3, r9
    1e50:	9300      	str	r3, [sp, #0]
    1e52:	4b14      	ldr	r3, [pc, #80]	; (1ea4 <Test_Text_char+0xf8>)
    1e54:	2296      	movs	r2, #150	; 0x96
    1e56:	2105      	movs	r1, #5
    1e58:	4808      	ldr	r0, [pc, #32]	; (1e7c <Test_Text_char+0xd0>)
    1e5a:	47b0      	blx	r6
		ST7789_DrawStringAt(&ST7789_t,5,190,"March 2020",&Font16,2,ST7789_BLUE);
    1e5c:	9402      	str	r4, [sp, #8]
    1e5e:	2302      	movs	r3, #2
    1e60:	9301      	str	r3, [sp, #4]
    1e62:	9700      	str	r7, [sp, #0]
    1e64:	4b10      	ldr	r3, [pc, #64]	; (1ea8 <Test_Text_char+0xfc>)
    1e66:	22be      	movs	r2, #190	; 0xbe
    1e68:	2105      	movs	r1, #5
    1e6a:	4804      	ldr	r0, [pc, #16]	; (1e7c <Test_Text_char+0xd0>)
    1e6c:	47b0      	blx	r6
	}
    1e6e:	b004      	add	sp, #16
    1e70:	bc04      	pop	{r2}
    1e72:	4691      	mov	r9, r2
    1e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	20000018 	.word	0x20000018
    1e7c:	20000b34 	.word	0x20000b34
    1e80:	00000f11 	.word	0x00000f11
    1e84:	20000008 	.word	0x20000008
    1e88:	00009d64 	.word	0x00009d64
    1e8c:	00001029 	.word	0x00001029
    1e90:	00009d70 	.word	0x00009d70
    1e94:	00009d80 	.word	0x00009d80
    1e98:	00009d90 	.word	0x00009d90
    1e9c:	00009d9c 	.word	0x00009d9c
    1ea0:	00009dac 	.word	0x00009dac
    1ea4:	00009dbc 	.word	0x00009dbc
    1ea8:	00009dc8 	.word	0x00009dc8

00001eac <Test_draw_bitmap>:
	void Test_draw_bitmap()
	{
    1eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eae:	b085      	sub	sp, #20
		ST7789_drawBitmap(&ST7789_t,0,0,USB_ICON,240,240,ST7789_BLACK);
    1eb0:	2300      	movs	r3, #0
    1eb2:	9302      	str	r3, [sp, #8]
    1eb4:	33f0      	adds	r3, #240	; 0xf0
    1eb6:	9301      	str	r3, [sp, #4]
    1eb8:	9300      	str	r3, [sp, #0]
    1eba:	4b27      	ldr	r3, [pc, #156]	; (1f58 <Test_draw_bitmap+0xac>)
    1ebc:	2200      	movs	r2, #0
    1ebe:	2100      	movs	r1, #0
    1ec0:	4826      	ldr	r0, [pc, #152]	; (1f5c <Test_draw_bitmap+0xb0>)
    1ec2:	4c27      	ldr	r4, [pc, #156]	; (1f60 <Test_draw_bitmap+0xb4>)
    1ec4:	47a0      	blx	r4
		delay_ms(50);
    1ec6:	2032      	movs	r0, #50	; 0x32
    1ec8:	4b26      	ldr	r3, [pc, #152]	; (1f64 <Test_draw_bitmap+0xb8>)
    1eca:	4798      	blx	r3
    1ecc:	24ff      	movs	r4, #255	; 0xff
		 for (int16_t c=255;c>0;c-=25)
		 {
			 ST7789_drawBitmap(&ST7789_t,0,0,USB_ICON,240,240,ST7789_color565(&ST7789_t,c,255-c,8));		 			 
    1ece:	4d23      	ldr	r5, [pc, #140]	; (1f5c <Test_draw_bitmap+0xb0>)
    1ed0:	4f25      	ldr	r7, [pc, #148]	; (1f68 <Test_draw_bitmap+0xbc>)
    1ed2:	43e2      	mvns	r2, r4
    1ed4:	b2d2      	uxtb	r2, r2
    1ed6:	2308      	movs	r3, #8
    1ed8:	0021      	movs	r1, r4
    1eda:	0028      	movs	r0, r5
    1edc:	47b8      	blx	r7
    1ede:	9002      	str	r0, [sp, #8]
    1ee0:	23f0      	movs	r3, #240	; 0xf0
    1ee2:	9301      	str	r3, [sp, #4]
    1ee4:	9300      	str	r3, [sp, #0]
    1ee6:	4b1c      	ldr	r3, [pc, #112]	; (1f58 <Test_draw_bitmap+0xac>)
    1ee8:	2200      	movs	r2, #0
    1eea:	2100      	movs	r1, #0
    1eec:	0028      	movs	r0, r5
    1eee:	4e1c      	ldr	r6, [pc, #112]	; (1f60 <Test_draw_bitmap+0xb4>)
    1ef0:	47b0      	blx	r6
    1ef2:	3c19      	subs	r4, #25
    1ef4:	b2e4      	uxtb	r4, r4
		 for (int16_t c=255;c>0;c-=25)
    1ef6:	2cec      	cmp	r4, #236	; 0xec
    1ef8:	d1eb      	bne.n	1ed2 <Test_draw_bitmap+0x26>
		 }
		 delay_ms(50);
    1efa:	2032      	movs	r0, #50	; 0x32
    1efc:	4c19      	ldr	r4, [pc, #100]	; (1f64 <Test_draw_bitmap+0xb8>)
    1efe:	47a0      	blx	r4
		ST7789_fillScreen(&ST7789_t,ST7789_BLACK);
    1f00:	4d16      	ldr	r5, [pc, #88]	; (1f5c <Test_draw_bitmap+0xb0>)
    1f02:	2100      	movs	r1, #0
    1f04:	0028      	movs	r0, r5
    1f06:	4b19      	ldr	r3, [pc, #100]	; (1f6c <Test_draw_bitmap+0xc0>)
    1f08:	4798      	blx	r3
		ST7789_drawBitmap(&ST7789_t,0,0,USB_ICON,240,240,ST7789_WHITE);
    1f0a:	4b19      	ldr	r3, [pc, #100]	; (1f70 <Test_draw_bitmap+0xc4>)
    1f0c:	9302      	str	r3, [sp, #8]
    1f0e:	23f0      	movs	r3, #240	; 0xf0
    1f10:	9301      	str	r3, [sp, #4]
    1f12:	9300      	str	r3, [sp, #0]
    1f14:	4b10      	ldr	r3, [pc, #64]	; (1f58 <Test_draw_bitmap+0xac>)
    1f16:	2200      	movs	r2, #0
    1f18:	2100      	movs	r1, #0
    1f1a:	0028      	movs	r0, r5
    1f1c:	4d10      	ldr	r5, [pc, #64]	; (1f60 <Test_draw_bitmap+0xb4>)
    1f1e:	47a8      	blx	r5
		delay_ms(50);
    1f20:	2032      	movs	r0, #50	; 0x32
    1f22:	47a0      	blx	r4
    1f24:	24ff      	movs	r4, #255	; 0xff
		for (int16_t c=255;c>0;c-=25)
		{
			ST7789_drawBitmap(&ST7789_t,0,0,USB_ICON,240,240,ST7789_color565(&ST7789_t,c,255-c,8));
    1f26:	4d0d      	ldr	r5, [pc, #52]	; (1f5c <Test_draw_bitmap+0xb0>)
    1f28:	4f0f      	ldr	r7, [pc, #60]	; (1f68 <Test_draw_bitmap+0xbc>)
    1f2a:	43e2      	mvns	r2, r4
    1f2c:	b2d2      	uxtb	r2, r2
    1f2e:	2308      	movs	r3, #8
    1f30:	0021      	movs	r1, r4
    1f32:	0028      	movs	r0, r5
    1f34:	47b8      	blx	r7
    1f36:	9002      	str	r0, [sp, #8]
    1f38:	23f0      	movs	r3, #240	; 0xf0
    1f3a:	9301      	str	r3, [sp, #4]
    1f3c:	9300      	str	r3, [sp, #0]
    1f3e:	4b06      	ldr	r3, [pc, #24]	; (1f58 <Test_draw_bitmap+0xac>)
    1f40:	2200      	movs	r2, #0
    1f42:	2100      	movs	r1, #0
    1f44:	0028      	movs	r0, r5
    1f46:	4e06      	ldr	r6, [pc, #24]	; (1f60 <Test_draw_bitmap+0xb4>)
    1f48:	47b0      	blx	r6
    1f4a:	3c19      	subs	r4, #25
    1f4c:	b2e4      	uxtb	r4, r4
		for (int16_t c=255;c>0;c-=25)
    1f4e:	2cec      	cmp	r4, #236	; 0xec
    1f50:	d1eb      	bne.n	1f2a <Test_draw_bitmap+0x7e>
		}
	}
    1f52:	b005      	add	sp, #20
    1f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f56:	46c0      	nop			; (mov r8, r8)
    1f58:	00007170 	.word	0x00007170
    1f5c:	20000b34 	.word	0x20000b34
    1f60:	00001081 	.word	0x00001081
    1f64:	0000115d 	.word	0x0000115d
    1f68:	000007cd 	.word	0x000007cd
    1f6c:	00000b9d 	.word	0x00000b9d
    1f70:	0000ffff 	.word	0x0000ffff

00001f74 <Test_Graphic_FillRect>:
	
	void Test_Graphic_FillRect()
	{
    1f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		ST7789_fillScreen(&ST7789_t,ST7789_RED);
    1f76:	21f8      	movs	r1, #248	; 0xf8
    1f78:	0209      	lsls	r1, r1, #8
    1f7a:	4810      	ldr	r0, [pc, #64]	; (1fbc <Test_Graphic_FillRect+0x48>)
    1f7c:	4c10      	ldr	r4, [pc, #64]	; (1fc0 <Test_Graphic_FillRect+0x4c>)
    1f7e:	47a0      	blx	r4
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    1f80:	27c0      	movs	r7, #192	; 0xc0
    1f82:	05ff      	lsls	r7, r7, #23
    1f84:	269c      	movs	r6, #156	; 0x9c
    1f86:	2580      	movs	r5, #128	; 0x80
    1f88:	05ed      	lsls	r5, r5, #23
    1f8a:	51bd      	str	r5, [r7, r6]
		gpio_toggle_pin_level(LED0);
		ST7789_fillScreen(&ST7789_t,ST7789_BLACK);
    1f8c:	2100      	movs	r1, #0
    1f8e:	480b      	ldr	r0, [pc, #44]	; (1fbc <Test_Graphic_FillRect+0x48>)
    1f90:	47a0      	blx	r4
    1f92:	51bd      	str	r5, [r7, r6]
		gpio_toggle_pin_level(LED0);
		ST7789_fillScreen(&ST7789_t,ST7789_BLUE);
    1f94:	211f      	movs	r1, #31
    1f96:	4809      	ldr	r0, [pc, #36]	; (1fbc <Test_Graphic_FillRect+0x48>)
    1f98:	47a0      	blx	r4
    1f9a:	51bd      	str	r5, [r7, r6]
		gpio_toggle_pin_level(LED0);
		ST7789_fillScreen(&ST7789_t,ST7789_CYAN);
    1f9c:	4909      	ldr	r1, [pc, #36]	; (1fc4 <Test_Graphic_FillRect+0x50>)
    1f9e:	4807      	ldr	r0, [pc, #28]	; (1fbc <Test_Graphic_FillRect+0x48>)
    1fa0:	47a0      	blx	r4
    1fa2:	51bd      	str	r5, [r7, r6]
		gpio_toggle_pin_level(LED0);
		ST7789_fillScreen(&ST7789_t,ST7789_WHITE);
    1fa4:	4908      	ldr	r1, [pc, #32]	; (1fc8 <Test_Graphic_FillRect+0x54>)
    1fa6:	4805      	ldr	r0, [pc, #20]	; (1fbc <Test_Graphic_FillRect+0x48>)
    1fa8:	47a0      	blx	r4
    1faa:	51bd      	str	r5, [r7, r6]
		gpio_toggle_pin_level(LED0);
		ST7789_fillScreen(&ST7789_t,ST7789_YELLOW);
    1fac:	4907      	ldr	r1, [pc, #28]	; (1fcc <Test_Graphic_FillRect+0x58>)
    1fae:	4803      	ldr	r0, [pc, #12]	; (1fbc <Test_Graphic_FillRect+0x48>)
    1fb0:	47a0      	blx	r4
    1fb2:	51bd      	str	r5, [r7, r6]
		gpio_toggle_pin_level(LED0);
		ST7789_fillScreen(&ST7789_t,ST7789_BLUE);
    1fb4:	211f      	movs	r1, #31
    1fb6:	4801      	ldr	r0, [pc, #4]	; (1fbc <Test_Graphic_FillRect+0x48>)
    1fb8:	47a0      	blx	r4
		
	}
    1fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fbc:	20000b34 	.word	0x20000b34
    1fc0:	00000b9d 	.word	0x00000b9d
    1fc4:	000007ff 	.word	0x000007ff
    1fc8:	0000ffff 	.word	0x0000ffff
    1fcc:	0000ffe0 	.word	0x0000ffe0

00001fd0 <main>:
int main(void)
{
    1fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fd2:	46ce      	mov	lr, r9
    1fd4:	b500      	push	{lr}
	atmel_start_init();
    1fd6:	4b20      	ldr	r3, [pc, #128]	; (2058 <STACK_SIZE+0x58>)
    1fd8:	4798      	blx	r3
	Port_test();
    1fda:	4b20      	ldr	r3, [pc, #128]	; (205c <STACK_SIZE+0x5c>)
    1fdc:	4798      	blx	r3
	Start_Graphic_Lib();
    1fde:	4b20      	ldr	r3, [pc, #128]	; (2060 <STACK_SIZE+0x60>)
    1fe0:	4798      	blx	r3
	uint16_t time_delay=1000;
	ST7789_fillScreen(&ST7789_t,ST7789_BLACK);
    1fe2:	2100      	movs	r1, #0
    1fe4:	481f      	ldr	r0, [pc, #124]	; (2064 <STACK_SIZE+0x64>)
    1fe6:	4b20      	ldr	r3, [pc, #128]	; (2068 <STACK_SIZE+0x68>)
    1fe8:	4798      	blx	r3
	while (1)
	{
		Test_Graphic_FillRect();
    1fea:	4b20      	ldr	r3, [pc, #128]	; (206c <STACK_SIZE+0x6c>)
    1fec:	4699      	mov	r9, r3
		ST7789_fillScreen(&ST7789_t,ST7789_WHITE);
    1fee:	4c1e      	ldr	r4, [pc, #120]	; (2068 <STACK_SIZE+0x68>)
		Test_Graphic_FillRect();
    1ff0:	47c8      	blx	r9
		ST7789_fillScreen(&ST7789_t,ST7789_WHITE);
    1ff2:	4e1f      	ldr	r6, [pc, #124]	; (2070 <STACK_SIZE+0x70>)
    1ff4:	0031      	movs	r1, r6
    1ff6:	481b      	ldr	r0, [pc, #108]	; (2064 <STACK_SIZE+0x64>)
    1ff8:	47a0      	blx	r4
		Test_Text_char();
    1ffa:	4b1e      	ldr	r3, [pc, #120]	; (2074 <STACK_SIZE+0x74>)
    1ffc:	4798      	blx	r3
		delay_ms(time_delay);
    1ffe:	27fa      	movs	r7, #250	; 0xfa
    2000:	00bf      	lsls	r7, r7, #2
    2002:	0038      	movs	r0, r7
    2004:	4d1c      	ldr	r5, [pc, #112]	; (2078 <STACK_SIZE+0x78>)
    2006:	47a8      	blx	r5
		ST7789_fillScreen(&ST7789_t,ST7789_WHITE);
    2008:	0031      	movs	r1, r6
    200a:	4816      	ldr	r0, [pc, #88]	; (2064 <STACK_SIZE+0x64>)
    200c:	47a0      	blx	r4
		Test_Graphic_HLine();
    200e:	4b1b      	ldr	r3, [pc, #108]	; (207c <STACK_SIZE+0x7c>)
    2010:	4798      	blx	r3
		delay_ms(time_delay);
    2012:	0038      	movs	r0, r7
    2014:	47a8      	blx	r5
		ST7789_fillScreen(&ST7789_t,ST7789_WHITE);
    2016:	0031      	movs	r1, r6
    2018:	4812      	ldr	r0, [pc, #72]	; (2064 <STACK_SIZE+0x64>)
    201a:	47a0      	blx	r4
		Test_Graphic_VLine();
    201c:	4b18      	ldr	r3, [pc, #96]	; (2080 <STACK_SIZE+0x80>)
    201e:	4798      	blx	r3
		delay_ms(time_delay);
    2020:	0038      	movs	r0, r7
    2022:	47a8      	blx	r5
		ST7789_fillScreen(&ST7789_t,ST7789_BLACK);
    2024:	2100      	movs	r1, #0
    2026:	480f      	ldr	r0, [pc, #60]	; (2064 <STACK_SIZE+0x64>)
    2028:	47a0      	blx	r4
		Test_Graphic_Rect();
    202a:	4b16      	ldr	r3, [pc, #88]	; (2084 <STACK_SIZE+0x84>)
    202c:	4798      	blx	r3
		delay_ms(time_delay);
    202e:	0038      	movs	r0, r7
    2030:	47a8      	blx	r5
		ST7789_fillScreen(&ST7789_t,ST7789_WHITE);
    2032:	0031      	movs	r1, r6
    2034:	480b      	ldr	r0, [pc, #44]	; (2064 <STACK_SIZE+0x64>)
    2036:	47a0      	blx	r4
		Test_Graphic_Cir();
    2038:	4b13      	ldr	r3, [pc, #76]	; (2088 <STACK_SIZE+0x88>)
    203a:	4798      	blx	r3
		delay_ms(time_delay);
    203c:	0038      	movs	r0, r7
    203e:	47a8      	blx	r5
		ST7789_fillScreen(&ST7789_t,ST7789_WHITE);
    2040:	0031      	movs	r1, r6
    2042:	4808      	ldr	r0, [pc, #32]	; (2064 <STACK_SIZE+0x64>)
    2044:	47a0      	blx	r4
		Test_draw_bitmap();
    2046:	4b11      	ldr	r3, [pc, #68]	; (208c <STACK_SIZE+0x8c>)
    2048:	4798      	blx	r3
		delay_ms(time_delay);
    204a:	0038      	movs	r0, r7
    204c:	47a8      	blx	r5
		ST7789_fillScreen(&ST7789_t,ST7789_WHITE);
    204e:	0031      	movs	r1, r6
    2050:	4804      	ldr	r0, [pc, #16]	; (2064 <STACK_SIZE+0x64>)
    2052:	47a0      	blx	r4
    2054:	e7cc      	b.n	1ff0 <main+0x20>
    2056:	46c0      	nop			; (mov r8, r8)
    2058:	00000115 	.word	0x00000115
    205c:	00001b6d 	.word	0x00001b6d
    2060:	00001b49 	.word	0x00001b49
    2064:	20000b34 	.word	0x20000b34
    2068:	00000b9d 	.word	0x00000b9d
    206c:	00001f75 	.word	0x00001f75
    2070:	0000ffff 	.word	0x0000ffff
    2074:	00001dad 	.word	0x00001dad
    2078:	0000115d 	.word	0x0000115d
    207c:	00001c01 	.word	0x00001c01
    2080:	00001b91 	.word	0x00001b91
    2084:	00001c75 	.word	0x00001c75
    2088:	00001d19 	.word	0x00001d19
    208c:	00001ead 	.word	0x00001ead

00002090 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    2090:	b510      	push	{r4, lr}
    2092:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    2094:	2800      	cmp	r0, #0
    2096:	d109      	bne.n	20ac <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    2098:	0011      	movs	r1, r2
    209a:	0018      	movs	r0, r3
    209c:	4b05      	ldr	r3, [pc, #20]	; (20b4 <_read+0x24>)
    209e:	4798      	blx	r3
    20a0:	2800      	cmp	r0, #0
    20a2:	db00      	blt.n	20a6 <_read+0x16>
	if (n < 0) {
		return -1;
	}

	return n;
}
    20a4:	bd10      	pop	{r4, pc}
    20a6:	2001      	movs	r0, #1
    20a8:	4240      	negs	r0, r0
    20aa:	e7fb      	b.n	20a4 <_read+0x14>
		return -1;
    20ac:	2001      	movs	r0, #1
    20ae:	4240      	negs	r0, r0
    20b0:	e7f8      	b.n	20a4 <_read+0x14>
    20b2:	46c0      	nop			; (mov r8, r8)
    20b4:	0000210d 	.word	0x0000210d

000020b8 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    20b8:	b510      	push	{r4, lr}
    20ba:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    20bc:	3801      	subs	r0, #1
    20be:	2802      	cmp	r0, #2
    20c0:	d809      	bhi.n	20d6 <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    20c2:	0011      	movs	r1, r2
    20c4:	0018      	movs	r0, r3
    20c6:	4b05      	ldr	r3, [pc, #20]	; (20dc <_write+0x24>)
    20c8:	4798      	blx	r3
    20ca:	2800      	cmp	r0, #0
    20cc:	db00      	blt.n	20d0 <_write+0x18>
	if (n < 0) {
		return -1;
	}

	return n;
}
    20ce:	bd10      	pop	{r4, pc}
    20d0:	2001      	movs	r0, #1
    20d2:	4240      	negs	r0, r0
    20d4:	e7fb      	b.n	20ce <_write+0x16>
		return -1;
    20d6:	2001      	movs	r0, #1
    20d8:	4240      	negs	r0, r0
    20da:	e7f8      	b.n	20ce <_write+0x16>
    20dc:	00002131 	.word	0x00002131

000020e0 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    20e0:	b570      	push	{r4, r5, r6, lr}
    20e2:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    20e4:	4d06      	ldr	r5, [pc, #24]	; (2100 <stdio_io_init+0x20>)
    20e6:	682b      	ldr	r3, [r5, #0]
    20e8:	6898      	ldr	r0, [r3, #8]
    20ea:	2100      	movs	r1, #0
    20ec:	4c05      	ldr	r4, [pc, #20]	; (2104 <stdio_io_init+0x24>)
    20ee:	47a0      	blx	r4
	setbuf(stdin, NULL);
    20f0:	682b      	ldr	r3, [r5, #0]
    20f2:	6858      	ldr	r0, [r3, #4]
    20f4:	2100      	movs	r1, #0
    20f6:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    20f8:	4b03      	ldr	r3, [pc, #12]	; (2108 <stdio_io_init+0x28>)
    20fa:	601e      	str	r6, [r3, #0]
}
    20fc:	bd70      	pop	{r4, r5, r6, pc}
    20fe:	46c0      	nop			; (mov r8, r8)
    2100:	20000028 	.word	0x20000028
    2104:	00002369 	.word	0x00002369
    2108:	20000894 	.word	0x20000894

0000210c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    210c:	b510      	push	{r4, lr}
    210e:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    2110:	4b05      	ldr	r3, [pc, #20]	; (2128 <stdio_io_read+0x1c>)
    2112:	6818      	ldr	r0, [r3, #0]
    2114:	2800      	cmp	r0, #0
    2116:	d004      	beq.n	2122 <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    2118:	b28a      	uxth	r2, r1
    211a:	0021      	movs	r1, r4
    211c:	4b03      	ldr	r3, [pc, #12]	; (212c <stdio_io_read+0x20>)
    211e:	4798      	blx	r3
}
    2120:	bd10      	pop	{r4, pc}
		return 0;
    2122:	2000      	movs	r0, #0
    2124:	e7fc      	b.n	2120 <stdio_io_read+0x14>
    2126:	46c0      	nop			; (mov r8, r8)
    2128:	20000894 	.word	0x20000894
    212c:	00001211 	.word	0x00001211

00002130 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    2130:	b510      	push	{r4, lr}
    2132:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    2134:	4b05      	ldr	r3, [pc, #20]	; (214c <stdio_io_write+0x1c>)
    2136:	6818      	ldr	r0, [r3, #0]
    2138:	2800      	cmp	r0, #0
    213a:	d004      	beq.n	2146 <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    213c:	b28a      	uxth	r2, r1
    213e:	0021      	movs	r1, r4
    2140:	4b03      	ldr	r3, [pc, #12]	; (2150 <stdio_io_write+0x20>)
    2142:	4798      	blx	r3
}
    2144:	bd10      	pop	{r4, pc}
		return 0;
    2146:	2000      	movs	r0, #0
    2148:	e7fc      	b.n	2144 <stdio_io_write+0x14>
    214a:	46c0      	nop			; (mov r8, r8)
    214c:	20000894 	.word	0x20000894
    2150:	000011dd 	.word	0x000011dd

00002154 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    2154:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    2156:	4c04      	ldr	r4, [pc, #16]	; (2168 <stdio_redirect_init+0x14>)
    2158:	0020      	movs	r0, r4
    215a:	4b04      	ldr	r3, [pc, #16]	; (216c <stdio_redirect_init+0x18>)
    215c:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    215e:	0020      	movs	r0, r4
    2160:	4b03      	ldr	r3, [pc, #12]	; (2170 <stdio_redirect_init+0x1c>)
    2162:	4798      	blx	r3
}
    2164:	bd10      	pop	{r4, pc}
    2166:	46c0      	nop			; (mov r8, r8)
    2168:	200008e8 	.word	0x200008e8
    216c:	000014e1 	.word	0x000014e1
    2170:	000020e1 	.word	0x000020e1

00002174 <__udivsi3>:
    2174:	2200      	movs	r2, #0
    2176:	0843      	lsrs	r3, r0, #1
    2178:	428b      	cmp	r3, r1
    217a:	d374      	bcc.n	2266 <__udivsi3+0xf2>
    217c:	0903      	lsrs	r3, r0, #4
    217e:	428b      	cmp	r3, r1
    2180:	d35f      	bcc.n	2242 <__udivsi3+0xce>
    2182:	0a03      	lsrs	r3, r0, #8
    2184:	428b      	cmp	r3, r1
    2186:	d344      	bcc.n	2212 <__udivsi3+0x9e>
    2188:	0b03      	lsrs	r3, r0, #12
    218a:	428b      	cmp	r3, r1
    218c:	d328      	bcc.n	21e0 <__udivsi3+0x6c>
    218e:	0c03      	lsrs	r3, r0, #16
    2190:	428b      	cmp	r3, r1
    2192:	d30d      	bcc.n	21b0 <__udivsi3+0x3c>
    2194:	22ff      	movs	r2, #255	; 0xff
    2196:	0209      	lsls	r1, r1, #8
    2198:	ba12      	rev	r2, r2
    219a:	0c03      	lsrs	r3, r0, #16
    219c:	428b      	cmp	r3, r1
    219e:	d302      	bcc.n	21a6 <__udivsi3+0x32>
    21a0:	1212      	asrs	r2, r2, #8
    21a2:	0209      	lsls	r1, r1, #8
    21a4:	d065      	beq.n	2272 <__udivsi3+0xfe>
    21a6:	0b03      	lsrs	r3, r0, #12
    21a8:	428b      	cmp	r3, r1
    21aa:	d319      	bcc.n	21e0 <__udivsi3+0x6c>
    21ac:	e000      	b.n	21b0 <__udivsi3+0x3c>
    21ae:	0a09      	lsrs	r1, r1, #8
    21b0:	0bc3      	lsrs	r3, r0, #15
    21b2:	428b      	cmp	r3, r1
    21b4:	d301      	bcc.n	21ba <__udivsi3+0x46>
    21b6:	03cb      	lsls	r3, r1, #15
    21b8:	1ac0      	subs	r0, r0, r3
    21ba:	4152      	adcs	r2, r2
    21bc:	0b83      	lsrs	r3, r0, #14
    21be:	428b      	cmp	r3, r1
    21c0:	d301      	bcc.n	21c6 <__udivsi3+0x52>
    21c2:	038b      	lsls	r3, r1, #14
    21c4:	1ac0      	subs	r0, r0, r3
    21c6:	4152      	adcs	r2, r2
    21c8:	0b43      	lsrs	r3, r0, #13
    21ca:	428b      	cmp	r3, r1
    21cc:	d301      	bcc.n	21d2 <__udivsi3+0x5e>
    21ce:	034b      	lsls	r3, r1, #13
    21d0:	1ac0      	subs	r0, r0, r3
    21d2:	4152      	adcs	r2, r2
    21d4:	0b03      	lsrs	r3, r0, #12
    21d6:	428b      	cmp	r3, r1
    21d8:	d301      	bcc.n	21de <__udivsi3+0x6a>
    21da:	030b      	lsls	r3, r1, #12
    21dc:	1ac0      	subs	r0, r0, r3
    21de:	4152      	adcs	r2, r2
    21e0:	0ac3      	lsrs	r3, r0, #11
    21e2:	428b      	cmp	r3, r1
    21e4:	d301      	bcc.n	21ea <__udivsi3+0x76>
    21e6:	02cb      	lsls	r3, r1, #11
    21e8:	1ac0      	subs	r0, r0, r3
    21ea:	4152      	adcs	r2, r2
    21ec:	0a83      	lsrs	r3, r0, #10
    21ee:	428b      	cmp	r3, r1
    21f0:	d301      	bcc.n	21f6 <__udivsi3+0x82>
    21f2:	028b      	lsls	r3, r1, #10
    21f4:	1ac0      	subs	r0, r0, r3
    21f6:	4152      	adcs	r2, r2
    21f8:	0a43      	lsrs	r3, r0, #9
    21fa:	428b      	cmp	r3, r1
    21fc:	d301      	bcc.n	2202 <__udivsi3+0x8e>
    21fe:	024b      	lsls	r3, r1, #9
    2200:	1ac0      	subs	r0, r0, r3
    2202:	4152      	adcs	r2, r2
    2204:	0a03      	lsrs	r3, r0, #8
    2206:	428b      	cmp	r3, r1
    2208:	d301      	bcc.n	220e <__udivsi3+0x9a>
    220a:	020b      	lsls	r3, r1, #8
    220c:	1ac0      	subs	r0, r0, r3
    220e:	4152      	adcs	r2, r2
    2210:	d2cd      	bcs.n	21ae <__udivsi3+0x3a>
    2212:	09c3      	lsrs	r3, r0, #7
    2214:	428b      	cmp	r3, r1
    2216:	d301      	bcc.n	221c <__udivsi3+0xa8>
    2218:	01cb      	lsls	r3, r1, #7
    221a:	1ac0      	subs	r0, r0, r3
    221c:	4152      	adcs	r2, r2
    221e:	0983      	lsrs	r3, r0, #6
    2220:	428b      	cmp	r3, r1
    2222:	d301      	bcc.n	2228 <__udivsi3+0xb4>
    2224:	018b      	lsls	r3, r1, #6
    2226:	1ac0      	subs	r0, r0, r3
    2228:	4152      	adcs	r2, r2
    222a:	0943      	lsrs	r3, r0, #5
    222c:	428b      	cmp	r3, r1
    222e:	d301      	bcc.n	2234 <__udivsi3+0xc0>
    2230:	014b      	lsls	r3, r1, #5
    2232:	1ac0      	subs	r0, r0, r3
    2234:	4152      	adcs	r2, r2
    2236:	0903      	lsrs	r3, r0, #4
    2238:	428b      	cmp	r3, r1
    223a:	d301      	bcc.n	2240 <__udivsi3+0xcc>
    223c:	010b      	lsls	r3, r1, #4
    223e:	1ac0      	subs	r0, r0, r3
    2240:	4152      	adcs	r2, r2
    2242:	08c3      	lsrs	r3, r0, #3
    2244:	428b      	cmp	r3, r1
    2246:	d301      	bcc.n	224c <__udivsi3+0xd8>
    2248:	00cb      	lsls	r3, r1, #3
    224a:	1ac0      	subs	r0, r0, r3
    224c:	4152      	adcs	r2, r2
    224e:	0883      	lsrs	r3, r0, #2
    2250:	428b      	cmp	r3, r1
    2252:	d301      	bcc.n	2258 <__udivsi3+0xe4>
    2254:	008b      	lsls	r3, r1, #2
    2256:	1ac0      	subs	r0, r0, r3
    2258:	4152      	adcs	r2, r2
    225a:	0843      	lsrs	r3, r0, #1
    225c:	428b      	cmp	r3, r1
    225e:	d301      	bcc.n	2264 <__udivsi3+0xf0>
    2260:	004b      	lsls	r3, r1, #1
    2262:	1ac0      	subs	r0, r0, r3
    2264:	4152      	adcs	r2, r2
    2266:	1a41      	subs	r1, r0, r1
    2268:	d200      	bcs.n	226c <__udivsi3+0xf8>
    226a:	4601      	mov	r1, r0
    226c:	4152      	adcs	r2, r2
    226e:	4610      	mov	r0, r2
    2270:	4770      	bx	lr
    2272:	e7ff      	b.n	2274 <__udivsi3+0x100>
    2274:	b501      	push	{r0, lr}
    2276:	2000      	movs	r0, #0
    2278:	f000 f806 	bl	2288 <__aeabi_idiv0>
    227c:	bd02      	pop	{r1, pc}
    227e:	46c0      	nop			; (mov r8, r8)

00002280 <__aeabi_uidivmod>:
    2280:	2900      	cmp	r1, #0
    2282:	d0f7      	beq.n	2274 <__udivsi3+0x100>
    2284:	e776      	b.n	2174 <__udivsi3>
    2286:	4770      	bx	lr

00002288 <__aeabi_idiv0>:
    2288:	4770      	bx	lr
    228a:	46c0      	nop			; (mov r8, r8)

0000228c <__libc_init_array>:
    228c:	b570      	push	{r4, r5, r6, lr}
    228e:	4e0d      	ldr	r6, [pc, #52]	; (22c4 <__libc_init_array+0x38>)
    2290:	4d0d      	ldr	r5, [pc, #52]	; (22c8 <__libc_init_array+0x3c>)
    2292:	2400      	movs	r4, #0
    2294:	1bad      	subs	r5, r5, r6
    2296:	10ad      	asrs	r5, r5, #2
    2298:	d005      	beq.n	22a6 <__libc_init_array+0x1a>
    229a:	00a3      	lsls	r3, r4, #2
    229c:	58f3      	ldr	r3, [r6, r3]
    229e:	3401      	adds	r4, #1
    22a0:	4798      	blx	r3
    22a2:	42a5      	cmp	r5, r4
    22a4:	d1f9      	bne.n	229a <__libc_init_array+0xe>
    22a6:	f007 fd97 	bl	9dd8 <_init>
    22aa:	4e08      	ldr	r6, [pc, #32]	; (22cc <__libc_init_array+0x40>)
    22ac:	4d08      	ldr	r5, [pc, #32]	; (22d0 <__libc_init_array+0x44>)
    22ae:	2400      	movs	r4, #0
    22b0:	1bad      	subs	r5, r5, r6
    22b2:	10ad      	asrs	r5, r5, #2
    22b4:	d005      	beq.n	22c2 <__libc_init_array+0x36>
    22b6:	00a3      	lsls	r3, r4, #2
    22b8:	58f3      	ldr	r3, [r6, r3]
    22ba:	3401      	adds	r4, #1
    22bc:	4798      	blx	r3
    22be:	42a5      	cmp	r5, r4
    22c0:	d1f9      	bne.n	22b6 <__libc_init_array+0x2a>
    22c2:	bd70      	pop	{r4, r5, r6, pc}
    22c4:	00009de4 	.word	0x00009de4
    22c8:	00009de4 	.word	0x00009de4
    22cc:	00009de4 	.word	0x00009de4
    22d0:	00009dec 	.word	0x00009dec

000022d4 <memset>:
    22d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22d6:	0783      	lsls	r3, r0, #30
    22d8:	d043      	beq.n	2362 <memset+0x8e>
    22da:	1e54      	subs	r4, r2, #1
    22dc:	2a00      	cmp	r2, #0
    22de:	d03f      	beq.n	2360 <memset+0x8c>
    22e0:	b2ce      	uxtb	r6, r1
    22e2:	0002      	movs	r2, r0
    22e4:	2503      	movs	r5, #3
    22e6:	e002      	b.n	22ee <memset+0x1a>
    22e8:	001a      	movs	r2, r3
    22ea:	3c01      	subs	r4, #1
    22ec:	d338      	bcc.n	2360 <memset+0x8c>
    22ee:	1c53      	adds	r3, r2, #1
    22f0:	7016      	strb	r6, [r2, #0]
    22f2:	422b      	tst	r3, r5
    22f4:	d1f8      	bne.n	22e8 <memset+0x14>
    22f6:	2c03      	cmp	r4, #3
    22f8:	d92a      	bls.n	2350 <memset+0x7c>
    22fa:	22ff      	movs	r2, #255	; 0xff
    22fc:	400a      	ands	r2, r1
    22fe:	0215      	lsls	r5, r2, #8
    2300:	4315      	orrs	r5, r2
    2302:	042a      	lsls	r2, r5, #16
    2304:	4315      	orrs	r5, r2
    2306:	2c0f      	cmp	r4, #15
    2308:	d914      	bls.n	2334 <memset+0x60>
    230a:	0027      	movs	r7, r4
    230c:	001a      	movs	r2, r3
    230e:	3f10      	subs	r7, #16
    2310:	093e      	lsrs	r6, r7, #4
    2312:	3601      	adds	r6, #1
    2314:	0136      	lsls	r6, r6, #4
    2316:	199e      	adds	r6, r3, r6
    2318:	6015      	str	r5, [r2, #0]
    231a:	6055      	str	r5, [r2, #4]
    231c:	6095      	str	r5, [r2, #8]
    231e:	60d5      	str	r5, [r2, #12]
    2320:	3210      	adds	r2, #16
    2322:	4296      	cmp	r6, r2
    2324:	d1f8      	bne.n	2318 <memset+0x44>
    2326:	220f      	movs	r2, #15
    2328:	4397      	bics	r7, r2
    232a:	3710      	adds	r7, #16
    232c:	19db      	adds	r3, r3, r7
    232e:	4014      	ands	r4, r2
    2330:	2c03      	cmp	r4, #3
    2332:	d90d      	bls.n	2350 <memset+0x7c>
    2334:	001a      	movs	r2, r3
    2336:	1f27      	subs	r7, r4, #4
    2338:	08be      	lsrs	r6, r7, #2
    233a:	3601      	adds	r6, #1
    233c:	00b6      	lsls	r6, r6, #2
    233e:	199e      	adds	r6, r3, r6
    2340:	c220      	stmia	r2!, {r5}
    2342:	42b2      	cmp	r2, r6
    2344:	d1fc      	bne.n	2340 <memset+0x6c>
    2346:	2203      	movs	r2, #3
    2348:	4397      	bics	r7, r2
    234a:	3704      	adds	r7, #4
    234c:	19db      	adds	r3, r3, r7
    234e:	4014      	ands	r4, r2
    2350:	2c00      	cmp	r4, #0
    2352:	d005      	beq.n	2360 <memset+0x8c>
    2354:	b2c9      	uxtb	r1, r1
    2356:	191c      	adds	r4, r3, r4
    2358:	7019      	strb	r1, [r3, #0]
    235a:	3301      	adds	r3, #1
    235c:	429c      	cmp	r4, r3
    235e:	d1fb      	bne.n	2358 <memset+0x84>
    2360:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2362:	0014      	movs	r4, r2
    2364:	0003      	movs	r3, r0
    2366:	e7c6      	b.n	22f6 <memset+0x22>

00002368 <setbuf>:
    2368:	424a      	negs	r2, r1
    236a:	414a      	adcs	r2, r1
    236c:	2380      	movs	r3, #128	; 0x80
    236e:	b510      	push	{r4, lr}
    2370:	0052      	lsls	r2, r2, #1
    2372:	00db      	lsls	r3, r3, #3
    2374:	f000 f802 	bl	237c <setvbuf>
    2378:	bd10      	pop	{r4, pc}
    237a:	46c0      	nop			; (mov r8, r8)

0000237c <setvbuf>:
    237c:	b5f0      	push	{r4, r5, r6, r7, lr}
    237e:	4647      	mov	r7, r8
    2380:	46ce      	mov	lr, r9
    2382:	b580      	push	{r7, lr}
    2384:	001f      	movs	r7, r3
    2386:	4b63      	ldr	r3, [pc, #396]	; (2514 <setvbuf+0x198>)
    2388:	b083      	sub	sp, #12
    238a:	681d      	ldr	r5, [r3, #0]
    238c:	0004      	movs	r4, r0
    238e:	4688      	mov	r8, r1
    2390:	0016      	movs	r6, r2
    2392:	2d00      	cmp	r5, #0
    2394:	d002      	beq.n	239c <setvbuf+0x20>
    2396:	6bab      	ldr	r3, [r5, #56]	; 0x38
    2398:	2b00      	cmp	r3, #0
    239a:	d066      	beq.n	246a <setvbuf+0xee>
    239c:	2e02      	cmp	r6, #2
    239e:	d005      	beq.n	23ac <setvbuf+0x30>
    23a0:	2e01      	cmp	r6, #1
    23a2:	d900      	bls.n	23a6 <setvbuf+0x2a>
    23a4:	e0a1      	b.n	24ea <setvbuf+0x16e>
    23a6:	2f00      	cmp	r7, #0
    23a8:	da00      	bge.n	23ac <setvbuf+0x30>
    23aa:	e09e      	b.n	24ea <setvbuf+0x16e>
    23ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
    23ae:	07db      	lsls	r3, r3, #31
    23b0:	d533      	bpl.n	241a <setvbuf+0x9e>
    23b2:	0021      	movs	r1, r4
    23b4:	0028      	movs	r0, r5
    23b6:	f000 f96d 	bl	2694 <_fflush_r>
    23ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
    23bc:	2900      	cmp	r1, #0
    23be:	d008      	beq.n	23d2 <setvbuf+0x56>
    23c0:	0023      	movs	r3, r4
    23c2:	3340      	adds	r3, #64	; 0x40
    23c4:	4299      	cmp	r1, r3
    23c6:	d002      	beq.n	23ce <setvbuf+0x52>
    23c8:	0028      	movs	r0, r5
    23ca:	f000 fa67 	bl	289c <_free_r>
    23ce:	2300      	movs	r3, #0
    23d0:	6323      	str	r3, [r4, #48]	; 0x30
    23d2:	2300      	movs	r3, #0
    23d4:	61a3      	str	r3, [r4, #24]
    23d6:	6063      	str	r3, [r4, #4]
    23d8:	220c      	movs	r2, #12
    23da:	5ea3      	ldrsh	r3, [r4, r2]
    23dc:	061a      	lsls	r2, r3, #24
    23de:	d43d      	bmi.n	245c <setvbuf+0xe0>
    23e0:	4a4d      	ldr	r2, [pc, #308]	; (2518 <setvbuf+0x19c>)
    23e2:	4013      	ands	r3, r2
    23e4:	81a3      	strh	r3, [r4, #12]
    23e6:	2e02      	cmp	r6, #2
    23e8:	d01e      	beq.n	2428 <setvbuf+0xac>
    23ea:	ab01      	add	r3, sp, #4
    23ec:	466a      	mov	r2, sp
    23ee:	0021      	movs	r1, r4
    23f0:	0028      	movs	r0, r5
    23f2:	f000 fb5f 	bl	2ab4 <__swhatbuf_r>
    23f6:	89a3      	ldrh	r3, [r4, #12]
    23f8:	4318      	orrs	r0, r3
    23fa:	81a0      	strh	r0, [r4, #12]
    23fc:	2f00      	cmp	r7, #0
    23fe:	d138      	bne.n	2472 <setvbuf+0xf6>
    2400:	9f00      	ldr	r7, [sp, #0]
    2402:	0038      	movs	r0, r7
    2404:	f000 fb86 	bl	2b14 <malloc>
    2408:	4680      	mov	r8, r0
    240a:	2800      	cmp	r0, #0
    240c:	d100      	bne.n	2410 <setvbuf+0x94>
    240e:	e06f      	b.n	24f0 <setvbuf+0x174>
    2410:	2280      	movs	r2, #128	; 0x80
    2412:	89a3      	ldrh	r3, [r4, #12]
    2414:	4313      	orrs	r3, r2
    2416:	81a3      	strh	r3, [r4, #12]
    2418:	e02e      	b.n	2478 <setvbuf+0xfc>
    241a:	89a3      	ldrh	r3, [r4, #12]
    241c:	059b      	lsls	r3, r3, #22
    241e:	d4c8      	bmi.n	23b2 <setvbuf+0x36>
    2420:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2422:	f000 fb43 	bl	2aac <__retarget_lock_acquire_recursive>
    2426:	e7c4      	b.n	23b2 <setvbuf+0x36>
    2428:	2500      	movs	r5, #0
    242a:	2202      	movs	r2, #2
    242c:	4313      	orrs	r3, r2
    242e:	2200      	movs	r2, #0
    2430:	60a2      	str	r2, [r4, #8]
    2432:	0022      	movs	r2, r4
    2434:	3243      	adds	r2, #67	; 0x43
    2436:	6022      	str	r2, [r4, #0]
    2438:	6122      	str	r2, [r4, #16]
    243a:	2201      	movs	r2, #1
    243c:	6e61      	ldr	r1, [r4, #100]	; 0x64
    243e:	81a3      	strh	r3, [r4, #12]
    2440:	6162      	str	r2, [r4, #20]
    2442:	4211      	tst	r1, r2
    2444:	d104      	bne.n	2450 <setvbuf+0xd4>
    2446:	059b      	lsls	r3, r3, #22
    2448:	d402      	bmi.n	2450 <setvbuf+0xd4>
    244a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    244c:	f000 fb30 	bl	2ab0 <__retarget_lock_release_recursive>
    2450:	0028      	movs	r0, r5
    2452:	b003      	add	sp, #12
    2454:	bc0c      	pop	{r2, r3}
    2456:	4690      	mov	r8, r2
    2458:	4699      	mov	r9, r3
    245a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    245c:	6921      	ldr	r1, [r4, #16]
    245e:	0028      	movs	r0, r5
    2460:	f000 fa1c 	bl	289c <_free_r>
    2464:	220c      	movs	r2, #12
    2466:	5ea3      	ldrsh	r3, [r4, r2]
    2468:	e7ba      	b.n	23e0 <setvbuf+0x64>
    246a:	0028      	movs	r0, r5
    246c:	f000 f96c 	bl	2748 <__sinit>
    2470:	e794      	b.n	239c <setvbuf+0x20>
    2472:	4643      	mov	r3, r8
    2474:	2b00      	cmp	r3, #0
    2476:	d0c4      	beq.n	2402 <setvbuf+0x86>
    2478:	6bab      	ldr	r3, [r5, #56]	; 0x38
    247a:	2b00      	cmp	r3, #0
    247c:	d027      	beq.n	24ce <setvbuf+0x152>
    247e:	9b00      	ldr	r3, [sp, #0]
    2480:	429f      	cmp	r7, r3
    2482:	d02a      	beq.n	24da <setvbuf+0x15e>
    2484:	2380      	movs	r3, #128	; 0x80
    2486:	89a2      	ldrh	r2, [r4, #12]
    2488:	011b      	lsls	r3, r3, #4
    248a:	4313      	orrs	r3, r2
    248c:	b21b      	sxth	r3, r3
    248e:	81a3      	strh	r3, [r4, #12]
    2490:	2e01      	cmp	r6, #1
    2492:	d026      	beq.n	24e2 <setvbuf+0x166>
    2494:	4642      	mov	r2, r8
    2496:	6022      	str	r2, [r4, #0]
    2498:	6122      	str	r2, [r4, #16]
    249a:	2208      	movs	r2, #8
    249c:	b29b      	uxth	r3, r3
    249e:	6167      	str	r7, [r4, #20]
    24a0:	401a      	ands	r2, r3
    24a2:	d00b      	beq.n	24bc <setvbuf+0x140>
    24a4:	07da      	lsls	r2, r3, #31
    24a6:	d510      	bpl.n	24ca <setvbuf+0x14e>
    24a8:	2200      	movs	r2, #0
    24aa:	2501      	movs	r5, #1
    24ac:	60a2      	str	r2, [r4, #8]
    24ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
    24b0:	427f      	negs	r7, r7
    24b2:	61a7      	str	r7, [r4, #24]
    24b4:	4015      	ands	r5, r2
    24b6:	d0c6      	beq.n	2446 <setvbuf+0xca>
    24b8:	2500      	movs	r5, #0
    24ba:	e7c9      	b.n	2450 <setvbuf+0xd4>
    24bc:	60a2      	str	r2, [r4, #8]
    24be:	2501      	movs	r5, #1
    24c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
    24c2:	4015      	ands	r5, r2
    24c4:	d0bf      	beq.n	2446 <setvbuf+0xca>
    24c6:	2500      	movs	r5, #0
    24c8:	e7c2      	b.n	2450 <setvbuf+0xd4>
    24ca:	60a7      	str	r7, [r4, #8]
    24cc:	e7f7      	b.n	24be <setvbuf+0x142>
    24ce:	0028      	movs	r0, r5
    24d0:	f000 f93a 	bl	2748 <__sinit>
    24d4:	9b00      	ldr	r3, [sp, #0]
    24d6:	429f      	cmp	r7, r3
    24d8:	d1d4      	bne.n	2484 <setvbuf+0x108>
    24da:	220c      	movs	r2, #12
    24dc:	5ea3      	ldrsh	r3, [r4, r2]
    24de:	2e01      	cmp	r6, #1
    24e0:	d1d8      	bne.n	2494 <setvbuf+0x118>
    24e2:	2201      	movs	r2, #1
    24e4:	4313      	orrs	r3, r2
    24e6:	81a3      	strh	r3, [r4, #12]
    24e8:	e7d4      	b.n	2494 <setvbuf+0x118>
    24ea:	2501      	movs	r5, #1
    24ec:	426d      	negs	r5, r5
    24ee:	e7af      	b.n	2450 <setvbuf+0xd4>
    24f0:	9b00      	ldr	r3, [sp, #0]
    24f2:	4699      	mov	r9, r3
    24f4:	42bb      	cmp	r3, r7
    24f6:	d005      	beq.n	2504 <setvbuf+0x188>
    24f8:	0018      	movs	r0, r3
    24fa:	f000 fb0b 	bl	2b14 <malloc>
    24fe:	4680      	mov	r8, r0
    2500:	2800      	cmp	r0, #0
    2502:	d104      	bne.n	250e <setvbuf+0x192>
    2504:	2501      	movs	r5, #1
    2506:	220c      	movs	r2, #12
    2508:	5ea3      	ldrsh	r3, [r4, r2]
    250a:	426d      	negs	r5, r5
    250c:	e78d      	b.n	242a <setvbuf+0xae>
    250e:	464f      	mov	r7, r9
    2510:	e77e      	b.n	2410 <setvbuf+0x94>
    2512:	46c0      	nop			; (mov r8, r8)
    2514:	20000028 	.word	0x20000028
    2518:	fffff35c 	.word	0xfffff35c

0000251c <register_fini>:
    251c:	4b03      	ldr	r3, [pc, #12]	; (252c <register_fini+0x10>)
    251e:	b510      	push	{r4, lr}
    2520:	2b00      	cmp	r3, #0
    2522:	d002      	beq.n	252a <register_fini+0xe>
    2524:	4802      	ldr	r0, [pc, #8]	; (2530 <register_fini+0x14>)
    2526:	f000 f805 	bl	2534 <atexit>
    252a:	bd10      	pop	{r4, pc}
    252c:	00000000 	.word	0x00000000
    2530:	000027c9 	.word	0x000027c9

00002534 <atexit>:
    2534:	b510      	push	{r4, lr}
    2536:	0001      	movs	r1, r0
    2538:	2300      	movs	r3, #0
    253a:	2200      	movs	r2, #0
    253c:	2000      	movs	r0, #0
    253e:	f000 fe2b 	bl	3198 <__register_exitproc>
    2542:	bd10      	pop	{r4, pc}

00002544 <__sflush_r>:
    2544:	b5f0      	push	{r4, r5, r6, r7, lr}
    2546:	46c6      	mov	lr, r8
    2548:	b500      	push	{lr}
    254a:	230c      	movs	r3, #12
    254c:	5eca      	ldrsh	r2, [r1, r3]
    254e:	4680      	mov	r8, r0
    2550:	b293      	uxth	r3, r2
    2552:	000c      	movs	r4, r1
    2554:	0719      	lsls	r1, r3, #28
    2556:	d440      	bmi.n	25da <__sflush_r+0x96>
    2558:	2380      	movs	r3, #128	; 0x80
    255a:	011b      	lsls	r3, r3, #4
    255c:	4313      	orrs	r3, r2
    255e:	6862      	ldr	r2, [r4, #4]
    2560:	81a3      	strh	r3, [r4, #12]
    2562:	2a00      	cmp	r2, #0
    2564:	dc00      	bgt.n	2568 <__sflush_r+0x24>
    2566:	e070      	b.n	264a <__sflush_r+0x106>
    2568:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    256a:	2e00      	cmp	r6, #0
    256c:	d031      	beq.n	25d2 <__sflush_r+0x8e>
    256e:	4642      	mov	r2, r8
    2570:	4641      	mov	r1, r8
    2572:	6815      	ldr	r5, [r2, #0]
    2574:	2200      	movs	r2, #0
    2576:	b29b      	uxth	r3, r3
    2578:	600a      	str	r2, [r1, #0]
    257a:	04da      	lsls	r2, r3, #19
    257c:	d400      	bmi.n	2580 <__sflush_r+0x3c>
    257e:	e069      	b.n	2654 <__sflush_r+0x110>
    2580:	6d22      	ldr	r2, [r4, #80]	; 0x50
    2582:	075b      	lsls	r3, r3, #29
    2584:	d506      	bpl.n	2594 <__sflush_r+0x50>
    2586:	6863      	ldr	r3, [r4, #4]
    2588:	1ad2      	subs	r2, r2, r3
    258a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    258c:	2b00      	cmp	r3, #0
    258e:	d001      	beq.n	2594 <__sflush_r+0x50>
    2590:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2592:	1ad2      	subs	r2, r2, r3
    2594:	2300      	movs	r3, #0
    2596:	69e1      	ldr	r1, [r4, #28]
    2598:	4640      	mov	r0, r8
    259a:	47b0      	blx	r6
    259c:	1c43      	adds	r3, r0, #1
    259e:	d03d      	beq.n	261c <__sflush_r+0xd8>
    25a0:	89a3      	ldrh	r3, [r4, #12]
    25a2:	4a3a      	ldr	r2, [pc, #232]	; (268c <__sflush_r+0x148>)
    25a4:	4013      	ands	r3, r2
    25a6:	2200      	movs	r2, #0
    25a8:	6062      	str	r2, [r4, #4]
    25aa:	6922      	ldr	r2, [r4, #16]
    25ac:	b21b      	sxth	r3, r3
    25ae:	81a3      	strh	r3, [r4, #12]
    25b0:	6022      	str	r2, [r4, #0]
    25b2:	04db      	lsls	r3, r3, #19
    25b4:	d447      	bmi.n	2646 <__sflush_r+0x102>
    25b6:	4643      	mov	r3, r8
    25b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    25ba:	601d      	str	r5, [r3, #0]
    25bc:	2900      	cmp	r1, #0
    25be:	d008      	beq.n	25d2 <__sflush_r+0x8e>
    25c0:	0023      	movs	r3, r4
    25c2:	3340      	adds	r3, #64	; 0x40
    25c4:	4299      	cmp	r1, r3
    25c6:	d002      	beq.n	25ce <__sflush_r+0x8a>
    25c8:	4640      	mov	r0, r8
    25ca:	f000 f967 	bl	289c <_free_r>
    25ce:	2300      	movs	r3, #0
    25d0:	6323      	str	r3, [r4, #48]	; 0x30
    25d2:	2000      	movs	r0, #0
    25d4:	bc04      	pop	{r2}
    25d6:	4690      	mov	r8, r2
    25d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25da:	6926      	ldr	r6, [r4, #16]
    25dc:	2e00      	cmp	r6, #0
    25de:	d0f8      	beq.n	25d2 <__sflush_r+0x8e>
    25e0:	6822      	ldr	r2, [r4, #0]
    25e2:	6026      	str	r6, [r4, #0]
    25e4:	1b95      	subs	r5, r2, r6
    25e6:	2200      	movs	r2, #0
    25e8:	079b      	lsls	r3, r3, #30
    25ea:	d100      	bne.n	25ee <__sflush_r+0xaa>
    25ec:	6962      	ldr	r2, [r4, #20]
    25ee:	60a2      	str	r2, [r4, #8]
    25f0:	2d00      	cmp	r5, #0
    25f2:	dc04      	bgt.n	25fe <__sflush_r+0xba>
    25f4:	e7ed      	b.n	25d2 <__sflush_r+0x8e>
    25f6:	1836      	adds	r6, r6, r0
    25f8:	1a2d      	subs	r5, r5, r0
    25fa:	2d00      	cmp	r5, #0
    25fc:	dde9      	ble.n	25d2 <__sflush_r+0x8e>
    25fe:	002b      	movs	r3, r5
    2600:	0032      	movs	r2, r6
    2602:	69e1      	ldr	r1, [r4, #28]
    2604:	4640      	mov	r0, r8
    2606:	6a67      	ldr	r7, [r4, #36]	; 0x24
    2608:	47b8      	blx	r7
    260a:	2800      	cmp	r0, #0
    260c:	dcf3      	bgt.n	25f6 <__sflush_r+0xb2>
    260e:	2240      	movs	r2, #64	; 0x40
    2610:	2001      	movs	r0, #1
    2612:	89a3      	ldrh	r3, [r4, #12]
    2614:	4240      	negs	r0, r0
    2616:	4313      	orrs	r3, r2
    2618:	81a3      	strh	r3, [r4, #12]
    261a:	e7db      	b.n	25d4 <__sflush_r+0x90>
    261c:	4643      	mov	r3, r8
    261e:	6819      	ldr	r1, [r3, #0]
    2620:	291d      	cmp	r1, #29
    2622:	d8f4      	bhi.n	260e <__sflush_r+0xca>
    2624:	4b1a      	ldr	r3, [pc, #104]	; (2690 <__sflush_r+0x14c>)
    2626:	2201      	movs	r2, #1
    2628:	40cb      	lsrs	r3, r1
    262a:	439a      	bics	r2, r3
    262c:	d1ef      	bne.n	260e <__sflush_r+0xca>
    262e:	89a3      	ldrh	r3, [r4, #12]
    2630:	4e16      	ldr	r6, [pc, #88]	; (268c <__sflush_r+0x148>)
    2632:	6062      	str	r2, [r4, #4]
    2634:	4033      	ands	r3, r6
    2636:	6922      	ldr	r2, [r4, #16]
    2638:	b21b      	sxth	r3, r3
    263a:	81a3      	strh	r3, [r4, #12]
    263c:	6022      	str	r2, [r4, #0]
    263e:	04db      	lsls	r3, r3, #19
    2640:	d5b9      	bpl.n	25b6 <__sflush_r+0x72>
    2642:	2900      	cmp	r1, #0
    2644:	d1b7      	bne.n	25b6 <__sflush_r+0x72>
    2646:	6520      	str	r0, [r4, #80]	; 0x50
    2648:	e7b5      	b.n	25b6 <__sflush_r+0x72>
    264a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    264c:	2a00      	cmp	r2, #0
    264e:	dd00      	ble.n	2652 <__sflush_r+0x10e>
    2650:	e78a      	b.n	2568 <__sflush_r+0x24>
    2652:	e7be      	b.n	25d2 <__sflush_r+0x8e>
    2654:	2200      	movs	r2, #0
    2656:	2301      	movs	r3, #1
    2658:	69e1      	ldr	r1, [r4, #28]
    265a:	4640      	mov	r0, r8
    265c:	47b0      	blx	r6
    265e:	0002      	movs	r2, r0
    2660:	1c43      	adds	r3, r0, #1
    2662:	d002      	beq.n	266a <__sflush_r+0x126>
    2664:	89a3      	ldrh	r3, [r4, #12]
    2666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2668:	e78b      	b.n	2582 <__sflush_r+0x3e>
    266a:	4643      	mov	r3, r8
    266c:	681b      	ldr	r3, [r3, #0]
    266e:	2b00      	cmp	r3, #0
    2670:	d0f8      	beq.n	2664 <__sflush_r+0x120>
    2672:	2b1d      	cmp	r3, #29
    2674:	d001      	beq.n	267a <__sflush_r+0x136>
    2676:	2b16      	cmp	r3, #22
    2678:	d103      	bne.n	2682 <__sflush_r+0x13e>
    267a:	4643      	mov	r3, r8
    267c:	2000      	movs	r0, #0
    267e:	601d      	str	r5, [r3, #0]
    2680:	e7a8      	b.n	25d4 <__sflush_r+0x90>
    2682:	2140      	movs	r1, #64	; 0x40
    2684:	89a3      	ldrh	r3, [r4, #12]
    2686:	430b      	orrs	r3, r1
    2688:	81a3      	strh	r3, [r4, #12]
    268a:	e7a3      	b.n	25d4 <__sflush_r+0x90>
    268c:	fffff7ff 	.word	0xfffff7ff
    2690:	20400001 	.word	0x20400001

00002694 <_fflush_r>:
    2694:	b570      	push	{r4, r5, r6, lr}
    2696:	0005      	movs	r5, r0
    2698:	000c      	movs	r4, r1
    269a:	2800      	cmp	r0, #0
    269c:	d002      	beq.n	26a4 <_fflush_r+0x10>
    269e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    26a0:	2b00      	cmp	r3, #0
    26a2:	d016      	beq.n	26d2 <_fflush_r+0x3e>
    26a4:	220c      	movs	r2, #12
    26a6:	5ea3      	ldrsh	r3, [r4, r2]
    26a8:	2600      	movs	r6, #0
    26aa:	2b00      	cmp	r3, #0
    26ac:	d00f      	beq.n	26ce <_fflush_r+0x3a>
    26ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
    26b0:	07d2      	lsls	r2, r2, #31
    26b2:	d401      	bmi.n	26b8 <_fflush_r+0x24>
    26b4:	059b      	lsls	r3, r3, #22
    26b6:	d513      	bpl.n	26e0 <_fflush_r+0x4c>
    26b8:	0021      	movs	r1, r4
    26ba:	0028      	movs	r0, r5
    26bc:	f7ff ff42 	bl	2544 <__sflush_r>
    26c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    26c2:	0006      	movs	r6, r0
    26c4:	07db      	lsls	r3, r3, #31
    26c6:	d402      	bmi.n	26ce <_fflush_r+0x3a>
    26c8:	89a3      	ldrh	r3, [r4, #12]
    26ca:	059b      	lsls	r3, r3, #22
    26cc:	d504      	bpl.n	26d8 <_fflush_r+0x44>
    26ce:	0030      	movs	r0, r6
    26d0:	bd70      	pop	{r4, r5, r6, pc}
    26d2:	f000 f839 	bl	2748 <__sinit>
    26d6:	e7e5      	b.n	26a4 <_fflush_r+0x10>
    26d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    26da:	f000 f9e9 	bl	2ab0 <__retarget_lock_release_recursive>
    26de:	e7f6      	b.n	26ce <_fflush_r+0x3a>
    26e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    26e2:	f000 f9e3 	bl	2aac <__retarget_lock_acquire_recursive>
    26e6:	e7e7      	b.n	26b8 <_fflush_r+0x24>

000026e8 <_cleanup_r>:
    26e8:	b510      	push	{r4, lr}
    26ea:	4902      	ldr	r1, [pc, #8]	; (26f4 <_cleanup_r+0xc>)
    26ec:	f000 f9b4 	bl	2a58 <_fwalk_reent>
    26f0:	bd10      	pop	{r4, pc}
    26f2:	46c0      	nop			; (mov r8, r8)
    26f4:	000032b1 	.word	0x000032b1

000026f8 <std.isra.0>:
    26f8:	2300      	movs	r3, #0
    26fa:	b510      	push	{r4, lr}
    26fc:	0004      	movs	r4, r0
    26fe:	6003      	str	r3, [r0, #0]
    2700:	6043      	str	r3, [r0, #4]
    2702:	6083      	str	r3, [r0, #8]
    2704:	8181      	strh	r1, [r0, #12]
    2706:	6643      	str	r3, [r0, #100]	; 0x64
    2708:	81c2      	strh	r2, [r0, #14]
    270a:	6103      	str	r3, [r0, #16]
    270c:	6143      	str	r3, [r0, #20]
    270e:	6183      	str	r3, [r0, #24]
    2710:	2208      	movs	r2, #8
    2712:	2100      	movs	r1, #0
    2714:	305c      	adds	r0, #92	; 0x5c
    2716:	f7ff fddd 	bl	22d4 <memset>
    271a:	0020      	movs	r0, r4
    271c:	4b06      	ldr	r3, [pc, #24]	; (2738 <std.isra.0+0x40>)
    271e:	61e4      	str	r4, [r4, #28]
    2720:	6223      	str	r3, [r4, #32]
    2722:	4b06      	ldr	r3, [pc, #24]	; (273c <std.isra.0+0x44>)
    2724:	3058      	adds	r0, #88	; 0x58
    2726:	6263      	str	r3, [r4, #36]	; 0x24
    2728:	4b05      	ldr	r3, [pc, #20]	; (2740 <std.isra.0+0x48>)
    272a:	62a3      	str	r3, [r4, #40]	; 0x28
    272c:	4b05      	ldr	r3, [pc, #20]	; (2744 <std.isra.0+0x4c>)
    272e:	62e3      	str	r3, [r4, #44]	; 0x2c
    2730:	f000 f9b8 	bl	2aa4 <__retarget_lock_init_recursive>
    2734:	bd10      	pop	{r4, pc}
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	000030d5 	.word	0x000030d5
    273c:	000030fd 	.word	0x000030fd
    2740:	00003139 	.word	0x00003139
    2744:	00003165 	.word	0x00003165

00002748 <__sinit>:
    2748:	b570      	push	{r4, r5, r6, lr}
    274a:	0004      	movs	r4, r0
    274c:	4d14      	ldr	r5, [pc, #80]	; (27a0 <__sinit+0x58>)
    274e:	0028      	movs	r0, r5
    2750:	f000 f9ac 	bl	2aac <__retarget_lock_acquire_recursive>
    2754:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2756:	2b00      	cmp	r3, #0
    2758:	d11d      	bne.n	2796 <__sinit+0x4e>
    275a:	4a12      	ldr	r2, [pc, #72]	; (27a4 <__sinit+0x5c>)
    275c:	2104      	movs	r1, #4
    275e:	63e2      	str	r2, [r4, #60]	; 0x3c
    2760:	22b8      	movs	r2, #184	; 0xb8
    2762:	0092      	lsls	r2, r2, #2
    2764:	50a3      	str	r3, [r4, r2]
    2766:	23b9      	movs	r3, #185	; 0xb9
    2768:	2203      	movs	r2, #3
    276a:	009b      	lsls	r3, r3, #2
    276c:	50e2      	str	r2, [r4, r3]
    276e:	3308      	adds	r3, #8
    2770:	18e2      	adds	r2, r4, r3
    2772:	3b04      	subs	r3, #4
    2774:	50e2      	str	r2, [r4, r3]
    2776:	6860      	ldr	r0, [r4, #4]
    2778:	2200      	movs	r2, #0
    277a:	f7ff ffbd 	bl	26f8 <std.isra.0>
    277e:	2201      	movs	r2, #1
    2780:	2109      	movs	r1, #9
    2782:	68a0      	ldr	r0, [r4, #8]
    2784:	f7ff ffb8 	bl	26f8 <std.isra.0>
    2788:	2202      	movs	r2, #2
    278a:	2112      	movs	r1, #18
    278c:	68e0      	ldr	r0, [r4, #12]
    278e:	f7ff ffb3 	bl	26f8 <std.isra.0>
    2792:	2301      	movs	r3, #1
    2794:	63a3      	str	r3, [r4, #56]	; 0x38
    2796:	0028      	movs	r0, r5
    2798:	f000 f98a 	bl	2ab0 <__retarget_lock_release_recursive>
    279c:	bd70      	pop	{r4, r5, r6, pc}
    279e:	46c0      	nop			; (mov r8, r8)
    27a0:	20000d50 	.word	0x20000d50
    27a4:	000026e9 	.word	0x000026e9

000027a8 <__sfp_lock_acquire>:
    27a8:	b510      	push	{r4, lr}
    27aa:	4802      	ldr	r0, [pc, #8]	; (27b4 <__sfp_lock_acquire+0xc>)
    27ac:	f000 f97e 	bl	2aac <__retarget_lock_acquire_recursive>
    27b0:	bd10      	pop	{r4, pc}
    27b2:	46c0      	nop			; (mov r8, r8)
    27b4:	20000d64 	.word	0x20000d64

000027b8 <__sfp_lock_release>:
    27b8:	b510      	push	{r4, lr}
    27ba:	4802      	ldr	r0, [pc, #8]	; (27c4 <__sfp_lock_release+0xc>)
    27bc:	f000 f978 	bl	2ab0 <__retarget_lock_release_recursive>
    27c0:	bd10      	pop	{r4, pc}
    27c2:	46c0      	nop			; (mov r8, r8)
    27c4:	20000d64 	.word	0x20000d64

000027c8 <__libc_fini_array>:
    27c8:	b570      	push	{r4, r5, r6, lr}
    27ca:	4b09      	ldr	r3, [pc, #36]	; (27f0 <__libc_fini_array+0x28>)
    27cc:	4c09      	ldr	r4, [pc, #36]	; (27f4 <__libc_fini_array+0x2c>)
    27ce:	1ae4      	subs	r4, r4, r3
    27d0:	10a4      	asrs	r4, r4, #2
    27d2:	d009      	beq.n	27e8 <__libc_fini_array+0x20>
    27d4:	4a08      	ldr	r2, [pc, #32]	; (27f8 <__libc_fini_array+0x30>)
    27d6:	18a5      	adds	r5, r4, r2
    27d8:	00ad      	lsls	r5, r5, #2
    27da:	18ed      	adds	r5, r5, r3
    27dc:	682b      	ldr	r3, [r5, #0]
    27de:	3c01      	subs	r4, #1
    27e0:	4798      	blx	r3
    27e2:	3d04      	subs	r5, #4
    27e4:	2c00      	cmp	r4, #0
    27e6:	d1f9      	bne.n	27dc <__libc_fini_array+0x14>
    27e8:	f007 fb00 	bl	9dec <_fini>
    27ec:	bd70      	pop	{r4, r5, r6, pc}
    27ee:	46c0      	nop			; (mov r8, r8)
    27f0:	00009df8 	.word	0x00009df8
    27f4:	00009dfc 	.word	0x00009dfc
    27f8:	3fffffff 	.word	0x3fffffff

000027fc <_malloc_trim_r>:
    27fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27fe:	000c      	movs	r4, r1
    2800:	0006      	movs	r6, r0
    2802:	f000 fc45 	bl	3090 <__malloc_lock>
    2806:	4f20      	ldr	r7, [pc, #128]	; (2888 <_malloc_trim_r+0x8c>)
    2808:	68bb      	ldr	r3, [r7, #8]
    280a:	685d      	ldr	r5, [r3, #4]
    280c:	2303      	movs	r3, #3
    280e:	439d      	bics	r5, r3
    2810:	4b1e      	ldr	r3, [pc, #120]	; (288c <_malloc_trim_r+0x90>)
    2812:	1b2c      	subs	r4, r5, r4
    2814:	469c      	mov	ip, r3
    2816:	4464      	add	r4, ip
    2818:	0b24      	lsrs	r4, r4, #12
    281a:	4b1d      	ldr	r3, [pc, #116]	; (2890 <_malloc_trim_r+0x94>)
    281c:	3c01      	subs	r4, #1
    281e:	0324      	lsls	r4, r4, #12
    2820:	429c      	cmp	r4, r3
    2822:	dd07      	ble.n	2834 <_malloc_trim_r+0x38>
    2824:	2100      	movs	r1, #0
    2826:	0030      	movs	r0, r6
    2828:	f000 fc42 	bl	30b0 <_sbrk_r>
    282c:	68bb      	ldr	r3, [r7, #8]
    282e:	195b      	adds	r3, r3, r5
    2830:	4298      	cmp	r0, r3
    2832:	d004      	beq.n	283e <_malloc_trim_r+0x42>
    2834:	0030      	movs	r0, r6
    2836:	f000 fc33 	bl	30a0 <__malloc_unlock>
    283a:	2000      	movs	r0, #0
    283c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    283e:	4261      	negs	r1, r4
    2840:	0030      	movs	r0, r6
    2842:	f000 fc35 	bl	30b0 <_sbrk_r>
    2846:	1c43      	adds	r3, r0, #1
    2848:	d00d      	beq.n	2866 <_malloc_trim_r+0x6a>
    284a:	2201      	movs	r2, #1
    284c:	68bb      	ldr	r3, [r7, #8]
    284e:	1b2d      	subs	r5, r5, r4
    2850:	4315      	orrs	r5, r2
    2852:	605d      	str	r5, [r3, #4]
    2854:	4b0f      	ldr	r3, [pc, #60]	; (2894 <_malloc_trim_r+0x98>)
    2856:	0030      	movs	r0, r6
    2858:	681a      	ldr	r2, [r3, #0]
    285a:	1b14      	subs	r4, r2, r4
    285c:	601c      	str	r4, [r3, #0]
    285e:	f000 fc1f 	bl	30a0 <__malloc_unlock>
    2862:	2001      	movs	r0, #1
    2864:	e7ea      	b.n	283c <_malloc_trim_r+0x40>
    2866:	2100      	movs	r1, #0
    2868:	0030      	movs	r0, r6
    286a:	f000 fc21 	bl	30b0 <_sbrk_r>
    286e:	68ba      	ldr	r2, [r7, #8]
    2870:	1a83      	subs	r3, r0, r2
    2872:	2b0f      	cmp	r3, #15
    2874:	ddde      	ble.n	2834 <_malloc_trim_r+0x38>
    2876:	4908      	ldr	r1, [pc, #32]	; (2898 <_malloc_trim_r+0x9c>)
    2878:	6809      	ldr	r1, [r1, #0]
    287a:	1a40      	subs	r0, r0, r1
    287c:	4905      	ldr	r1, [pc, #20]	; (2894 <_malloc_trim_r+0x98>)
    287e:	6008      	str	r0, [r1, #0]
    2880:	2101      	movs	r1, #1
    2882:	430b      	orrs	r3, r1
    2884:	6053      	str	r3, [r2, #4]
    2886:	e7d5      	b.n	2834 <_malloc_trim_r+0x38>
    2888:	2000045c 	.word	0x2000045c
    288c:	00000fef 	.word	0x00000fef
    2890:	00000fff 	.word	0x00000fff
    2894:	20000898 	.word	0x20000898
    2898:	20000864 	.word	0x20000864

0000289c <_free_r>:
    289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    289e:	0004      	movs	r4, r0
    28a0:	1e0d      	subs	r5, r1, #0
    28a2:	d03c      	beq.n	291e <_free_r+0x82>
    28a4:	f000 fbf4 	bl	3090 <__malloc_lock>
    28a8:	0029      	movs	r1, r5
    28aa:	3908      	subs	r1, #8
    28ac:	6848      	ldr	r0, [r1, #4]
    28ae:	2301      	movs	r3, #1
    28b0:	0005      	movs	r5, r0
    28b2:	2603      	movs	r6, #3
    28b4:	439d      	bics	r5, r3
    28b6:	194a      	adds	r2, r1, r5
    28b8:	469c      	mov	ip, r3
    28ba:	4f61      	ldr	r7, [pc, #388]	; (2a40 <_free_r+0x1a4>)
    28bc:	6853      	ldr	r3, [r2, #4]
    28be:	43b3      	bics	r3, r6
    28c0:	68be      	ldr	r6, [r7, #8]
    28c2:	42b2      	cmp	r2, r6
    28c4:	d056      	beq.n	2974 <_free_r+0xd8>
    28c6:	4666      	mov	r6, ip
    28c8:	6053      	str	r3, [r2, #4]
    28ca:	4206      	tst	r6, r0
    28cc:	d10a      	bne.n	28e4 <_free_r+0x48>
    28ce:	003e      	movs	r6, r7
    28d0:	6808      	ldr	r0, [r1, #0]
    28d2:	3608      	adds	r6, #8
    28d4:	1a09      	subs	r1, r1, r0
    28d6:	182d      	adds	r5, r5, r0
    28d8:	6888      	ldr	r0, [r1, #8]
    28da:	42b0      	cmp	r0, r6
    28dc:	d065      	beq.n	29aa <_free_r+0x10e>
    28de:	68ce      	ldr	r6, [r1, #12]
    28e0:	60c6      	str	r6, [r0, #12]
    28e2:	60b0      	str	r0, [r6, #8]
    28e4:	2001      	movs	r0, #1
    28e6:	18d6      	adds	r6, r2, r3
    28e8:	6876      	ldr	r6, [r6, #4]
    28ea:	4206      	tst	r6, r0
    28ec:	d033      	beq.n	2956 <_free_r+0xba>
    28ee:	4b55      	ldr	r3, [pc, #340]	; (2a44 <_free_r+0x1a8>)
    28f0:	4328      	orrs	r0, r5
    28f2:	6048      	str	r0, [r1, #4]
    28f4:	514d      	str	r5, [r1, r5]
    28f6:	429d      	cmp	r5, r3
    28f8:	d812      	bhi.n	2920 <_free_r+0x84>
    28fa:	08ed      	lsrs	r5, r5, #3
    28fc:	3bff      	subs	r3, #255	; 0xff
    28fe:	10aa      	asrs	r2, r5, #2
    2900:	3bff      	subs	r3, #255	; 0xff
    2902:	4093      	lsls	r3, r2
    2904:	687a      	ldr	r2, [r7, #4]
    2906:	00ed      	lsls	r5, r5, #3
    2908:	4313      	orrs	r3, r2
    290a:	607b      	str	r3, [r7, #4]
    290c:	19ef      	adds	r7, r5, r7
    290e:	68bb      	ldr	r3, [r7, #8]
    2910:	60cf      	str	r7, [r1, #12]
    2912:	608b      	str	r3, [r1, #8]
    2914:	60b9      	str	r1, [r7, #8]
    2916:	60d9      	str	r1, [r3, #12]
    2918:	0020      	movs	r0, r4
    291a:	f000 fbc1 	bl	30a0 <__malloc_unlock>
    291e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2920:	0a68      	lsrs	r0, r5, #9
    2922:	2804      	cmp	r0, #4
    2924:	d850      	bhi.n	29c8 <_free_r+0x12c>
    2926:	09a8      	lsrs	r0, r5, #6
    2928:	0002      	movs	r2, r0
    292a:	3039      	adds	r0, #57	; 0x39
    292c:	3238      	adds	r2, #56	; 0x38
    292e:	00c0      	lsls	r0, r0, #3
    2930:	1838      	adds	r0, r7, r0
    2932:	3808      	subs	r0, #8
    2934:	6883      	ldr	r3, [r0, #8]
    2936:	2603      	movs	r6, #3
    2938:	4298      	cmp	r0, r3
    293a:	d04c      	beq.n	29d6 <_free_r+0x13a>
    293c:	685a      	ldr	r2, [r3, #4]
    293e:	43b2      	bics	r2, r6
    2940:	4295      	cmp	r5, r2
    2942:	d230      	bcs.n	29a6 <_free_r+0x10a>
    2944:	689b      	ldr	r3, [r3, #8]
    2946:	4298      	cmp	r0, r3
    2948:	d1f8      	bne.n	293c <_free_r+0xa0>
    294a:	68c3      	ldr	r3, [r0, #12]
    294c:	60cb      	str	r3, [r1, #12]
    294e:	6088      	str	r0, [r1, #8]
    2950:	6099      	str	r1, [r3, #8]
    2952:	60c1      	str	r1, [r0, #12]
    2954:	e7e0      	b.n	2918 <_free_r+0x7c>
    2956:	18ed      	adds	r5, r5, r3
    2958:	4e3b      	ldr	r6, [pc, #236]	; (2a48 <_free_r+0x1ac>)
    295a:	6893      	ldr	r3, [r2, #8]
    295c:	42b3      	cmp	r3, r6
    295e:	d042      	beq.n	29e6 <_free_r+0x14a>
    2960:	68d2      	ldr	r2, [r2, #12]
    2962:	4328      	orrs	r0, r5
    2964:	60da      	str	r2, [r3, #12]
    2966:	6093      	str	r3, [r2, #8]
    2968:	4b36      	ldr	r3, [pc, #216]	; (2a44 <_free_r+0x1a8>)
    296a:	6048      	str	r0, [r1, #4]
    296c:	514d      	str	r5, [r1, r5]
    296e:	429d      	cmp	r5, r3
    2970:	d8d6      	bhi.n	2920 <_free_r+0x84>
    2972:	e7c2      	b.n	28fa <_free_r+0x5e>
    2974:	4662      	mov	r2, ip
    2976:	18eb      	adds	r3, r5, r3
    2978:	4202      	tst	r2, r0
    297a:	d106      	bne.n	298a <_free_r+0xee>
    297c:	680a      	ldr	r2, [r1, #0]
    297e:	1a89      	subs	r1, r1, r2
    2980:	6888      	ldr	r0, [r1, #8]
    2982:	189b      	adds	r3, r3, r2
    2984:	68ca      	ldr	r2, [r1, #12]
    2986:	60c2      	str	r2, [r0, #12]
    2988:	6090      	str	r0, [r2, #8]
    298a:	2201      	movs	r2, #1
    298c:	431a      	orrs	r2, r3
    298e:	604a      	str	r2, [r1, #4]
    2990:	4a2e      	ldr	r2, [pc, #184]	; (2a4c <_free_r+0x1b0>)
    2992:	60b9      	str	r1, [r7, #8]
    2994:	6812      	ldr	r2, [r2, #0]
    2996:	4293      	cmp	r3, r2
    2998:	d3be      	bcc.n	2918 <_free_r+0x7c>
    299a:	4b2d      	ldr	r3, [pc, #180]	; (2a50 <_free_r+0x1b4>)
    299c:	0020      	movs	r0, r4
    299e:	6819      	ldr	r1, [r3, #0]
    29a0:	f7ff ff2c 	bl	27fc <_malloc_trim_r>
    29a4:	e7b8      	b.n	2918 <_free_r+0x7c>
    29a6:	0018      	movs	r0, r3
    29a8:	e7cf      	b.n	294a <_free_r+0xae>
    29aa:	4666      	mov	r6, ip
    29ac:	18d0      	adds	r0, r2, r3
    29ae:	6840      	ldr	r0, [r0, #4]
    29b0:	4230      	tst	r0, r6
    29b2:	d13f      	bne.n	2a34 <_free_r+0x198>
    29b4:	6890      	ldr	r0, [r2, #8]
    29b6:	195d      	adds	r5, r3, r5
    29b8:	68d3      	ldr	r3, [r2, #12]
    29ba:	60c3      	str	r3, [r0, #12]
    29bc:	6098      	str	r0, [r3, #8]
    29be:	4663      	mov	r3, ip
    29c0:	432b      	orrs	r3, r5
    29c2:	604b      	str	r3, [r1, #4]
    29c4:	514d      	str	r5, [r1, r5]
    29c6:	e7a7      	b.n	2918 <_free_r+0x7c>
    29c8:	2814      	cmp	r0, #20
    29ca:	d814      	bhi.n	29f6 <_free_r+0x15a>
    29cc:	0002      	movs	r2, r0
    29ce:	305c      	adds	r0, #92	; 0x5c
    29d0:	325b      	adds	r2, #91	; 0x5b
    29d2:	00c0      	lsls	r0, r0, #3
    29d4:	e7ac      	b.n	2930 <_free_r+0x94>
    29d6:	2301      	movs	r3, #1
    29d8:	1092      	asrs	r2, r2, #2
    29da:	4093      	lsls	r3, r2
    29dc:	687a      	ldr	r2, [r7, #4]
    29de:	4313      	orrs	r3, r2
    29e0:	607b      	str	r3, [r7, #4]
    29e2:	0003      	movs	r3, r0
    29e4:	e7b2      	b.n	294c <_free_r+0xb0>
    29e6:	4328      	orrs	r0, r5
    29e8:	60d9      	str	r1, [r3, #12]
    29ea:	6099      	str	r1, [r3, #8]
    29ec:	60cb      	str	r3, [r1, #12]
    29ee:	608b      	str	r3, [r1, #8]
    29f0:	6048      	str	r0, [r1, #4]
    29f2:	514d      	str	r5, [r1, r5]
    29f4:	e790      	b.n	2918 <_free_r+0x7c>
    29f6:	2854      	cmp	r0, #84	; 0x54
    29f8:	d805      	bhi.n	2a06 <_free_r+0x16a>
    29fa:	0b28      	lsrs	r0, r5, #12
    29fc:	0002      	movs	r2, r0
    29fe:	306f      	adds	r0, #111	; 0x6f
    2a00:	326e      	adds	r2, #110	; 0x6e
    2a02:	00c0      	lsls	r0, r0, #3
    2a04:	e794      	b.n	2930 <_free_r+0x94>
    2a06:	22aa      	movs	r2, #170	; 0xaa
    2a08:	0052      	lsls	r2, r2, #1
    2a0a:	4290      	cmp	r0, r2
    2a0c:	d805      	bhi.n	2a1a <_free_r+0x17e>
    2a0e:	0be8      	lsrs	r0, r5, #15
    2a10:	0002      	movs	r2, r0
    2a12:	3078      	adds	r0, #120	; 0x78
    2a14:	3277      	adds	r2, #119	; 0x77
    2a16:	00c0      	lsls	r0, r0, #3
    2a18:	e78a      	b.n	2930 <_free_r+0x94>
    2a1a:	4a0e      	ldr	r2, [pc, #56]	; (2a54 <_free_r+0x1b8>)
    2a1c:	4290      	cmp	r0, r2
    2a1e:	d805      	bhi.n	2a2c <_free_r+0x190>
    2a20:	0ca8      	lsrs	r0, r5, #18
    2a22:	0002      	movs	r2, r0
    2a24:	307d      	adds	r0, #125	; 0x7d
    2a26:	327c      	adds	r2, #124	; 0x7c
    2a28:	00c0      	lsls	r0, r0, #3
    2a2a:	e781      	b.n	2930 <_free_r+0x94>
    2a2c:	20fe      	movs	r0, #254	; 0xfe
    2a2e:	227e      	movs	r2, #126	; 0x7e
    2a30:	0080      	lsls	r0, r0, #2
    2a32:	e77d      	b.n	2930 <_free_r+0x94>
    2a34:	4663      	mov	r3, ip
    2a36:	432b      	orrs	r3, r5
    2a38:	604b      	str	r3, [r1, #4]
    2a3a:	6015      	str	r5, [r2, #0]
    2a3c:	e76c      	b.n	2918 <_free_r+0x7c>
    2a3e:	46c0      	nop			; (mov r8, r8)
    2a40:	2000045c 	.word	0x2000045c
    2a44:	000001ff 	.word	0x000001ff
    2a48:	20000464 	.word	0x20000464
    2a4c:	20000868 	.word	0x20000868
    2a50:	200008c8 	.word	0x200008c8
    2a54:	00000554 	.word	0x00000554

00002a58 <_fwalk_reent>:
    2a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a5a:	4647      	mov	r7, r8
    2a5c:	46ce      	mov	lr, r9
    2a5e:	b580      	push	{r7, lr}
    2a60:	27b8      	movs	r7, #184	; 0xb8
    2a62:	4680      	mov	r8, r0
    2a64:	00bf      	lsls	r7, r7, #2
    2a66:	4447      	add	r7, r8
    2a68:	4689      	mov	r9, r1
    2a6a:	2600      	movs	r6, #0
    2a6c:	2f00      	cmp	r7, #0
    2a6e:	d014      	beq.n	2a9a <_fwalk_reent+0x42>
    2a70:	687b      	ldr	r3, [r7, #4]
    2a72:	68bc      	ldr	r4, [r7, #8]
    2a74:	1e5d      	subs	r5, r3, #1
    2a76:	d40d      	bmi.n	2a94 <_fwalk_reent+0x3c>
    2a78:	89a3      	ldrh	r3, [r4, #12]
    2a7a:	2b01      	cmp	r3, #1
    2a7c:	d907      	bls.n	2a8e <_fwalk_reent+0x36>
    2a7e:	220e      	movs	r2, #14
    2a80:	5ea3      	ldrsh	r3, [r4, r2]
    2a82:	3301      	adds	r3, #1
    2a84:	d003      	beq.n	2a8e <_fwalk_reent+0x36>
    2a86:	0021      	movs	r1, r4
    2a88:	4640      	mov	r0, r8
    2a8a:	47c8      	blx	r9
    2a8c:	4306      	orrs	r6, r0
    2a8e:	3468      	adds	r4, #104	; 0x68
    2a90:	3d01      	subs	r5, #1
    2a92:	d2f1      	bcs.n	2a78 <_fwalk_reent+0x20>
    2a94:	683f      	ldr	r7, [r7, #0]
    2a96:	2f00      	cmp	r7, #0
    2a98:	d1ea      	bne.n	2a70 <_fwalk_reent+0x18>
    2a9a:	0030      	movs	r0, r6
    2a9c:	bc0c      	pop	{r2, r3}
    2a9e:	4690      	mov	r8, r2
    2aa0:	4699      	mov	r9, r3
    2aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002aa4 <__retarget_lock_init_recursive>:
    2aa4:	4770      	bx	lr
    2aa6:	46c0      	nop			; (mov r8, r8)

00002aa8 <__retarget_lock_close_recursive>:
    2aa8:	4770      	bx	lr
    2aaa:	46c0      	nop			; (mov r8, r8)

00002aac <__retarget_lock_acquire_recursive>:
    2aac:	4770      	bx	lr
    2aae:	46c0      	nop			; (mov r8, r8)

00002ab0 <__retarget_lock_release_recursive>:
    2ab0:	4770      	bx	lr
    2ab2:	46c0      	nop			; (mov r8, r8)

00002ab4 <__swhatbuf_r>:
    2ab4:	b570      	push	{r4, r5, r6, lr}
    2ab6:	000c      	movs	r4, r1
    2ab8:	001e      	movs	r6, r3
    2aba:	230e      	movs	r3, #14
    2abc:	5ec9      	ldrsh	r1, [r1, r3]
    2abe:	b090      	sub	sp, #64	; 0x40
    2ac0:	0015      	movs	r5, r2
    2ac2:	2900      	cmp	r1, #0
    2ac4:	db15      	blt.n	2af2 <__swhatbuf_r+0x3e>
    2ac6:	aa01      	add	r2, sp, #4
    2ac8:	f000 fc58 	bl	337c <_fstat_r>
    2acc:	2800      	cmp	r0, #0
    2ace:	db10      	blt.n	2af2 <__swhatbuf_r+0x3e>
    2ad0:	22f0      	movs	r2, #240	; 0xf0
    2ad2:	9b02      	ldr	r3, [sp, #8]
    2ad4:	0212      	lsls	r2, r2, #8
    2ad6:	4013      	ands	r3, r2
    2ad8:	4a0d      	ldr	r2, [pc, #52]	; (2b10 <__swhatbuf_r+0x5c>)
    2ada:	2080      	movs	r0, #128	; 0x80
    2adc:	4694      	mov	ip, r2
    2ade:	4463      	add	r3, ip
    2ae0:	425a      	negs	r2, r3
    2ae2:	4153      	adcs	r3, r2
    2ae4:	6033      	str	r3, [r6, #0]
    2ae6:	2380      	movs	r3, #128	; 0x80
    2ae8:	00db      	lsls	r3, r3, #3
    2aea:	602b      	str	r3, [r5, #0]
    2aec:	0100      	lsls	r0, r0, #4
    2aee:	b010      	add	sp, #64	; 0x40
    2af0:	bd70      	pop	{r4, r5, r6, pc}
    2af2:	2300      	movs	r3, #0
    2af4:	6033      	str	r3, [r6, #0]
    2af6:	89a3      	ldrh	r3, [r4, #12]
    2af8:	061b      	lsls	r3, r3, #24
    2afa:	d503      	bpl.n	2b04 <__swhatbuf_r+0x50>
    2afc:	2340      	movs	r3, #64	; 0x40
    2afe:	2000      	movs	r0, #0
    2b00:	602b      	str	r3, [r5, #0]
    2b02:	e7f4      	b.n	2aee <__swhatbuf_r+0x3a>
    2b04:	2380      	movs	r3, #128	; 0x80
    2b06:	00db      	lsls	r3, r3, #3
    2b08:	602b      	str	r3, [r5, #0]
    2b0a:	2000      	movs	r0, #0
    2b0c:	e7ef      	b.n	2aee <__swhatbuf_r+0x3a>
    2b0e:	46c0      	nop			; (mov r8, r8)
    2b10:	ffffe000 	.word	0xffffe000

00002b14 <malloc>:
    2b14:	b510      	push	{r4, lr}
    2b16:	4b03      	ldr	r3, [pc, #12]	; (2b24 <malloc+0x10>)
    2b18:	0001      	movs	r1, r0
    2b1a:	6818      	ldr	r0, [r3, #0]
    2b1c:	f000 f804 	bl	2b28 <_malloc_r>
    2b20:	bd10      	pop	{r4, pc}
    2b22:	46c0      	nop			; (mov r8, r8)
    2b24:	20000028 	.word	0x20000028

00002b28 <_malloc_r>:
    2b28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b2a:	4657      	mov	r7, sl
    2b2c:	4645      	mov	r5, r8
    2b2e:	46de      	mov	lr, fp
    2b30:	464e      	mov	r6, r9
    2b32:	b5e0      	push	{r5, r6, r7, lr}
    2b34:	000d      	movs	r5, r1
    2b36:	350b      	adds	r5, #11
    2b38:	b083      	sub	sp, #12
    2b3a:	0007      	movs	r7, r0
    2b3c:	2d16      	cmp	r5, #22
    2b3e:	d800      	bhi.n	2b42 <_malloc_r+0x1a>
    2b40:	e09f      	b.n	2c82 <_malloc_r+0x15a>
    2b42:	2307      	movs	r3, #7
    2b44:	439d      	bics	r5, r3
    2b46:	d500      	bpl.n	2b4a <_malloc_r+0x22>
    2b48:	e0c4      	b.n	2cd4 <_malloc_r+0x1ac>
    2b4a:	42a9      	cmp	r1, r5
    2b4c:	d900      	bls.n	2b50 <_malloc_r+0x28>
    2b4e:	e0c1      	b.n	2cd4 <_malloc_r+0x1ac>
    2b50:	f000 fa9e 	bl	3090 <__malloc_lock>
    2b54:	23f8      	movs	r3, #248	; 0xf8
    2b56:	33ff      	adds	r3, #255	; 0xff
    2b58:	429d      	cmp	r5, r3
    2b5a:	d800      	bhi.n	2b5e <_malloc_r+0x36>
    2b5c:	e28f      	b.n	307e <_malloc_r+0x556>
    2b5e:	0a68      	lsrs	r0, r5, #9
    2b60:	d100      	bne.n	2b64 <_malloc_r+0x3c>
    2b62:	e0bb      	b.n	2cdc <_malloc_r+0x1b4>
    2b64:	2804      	cmp	r0, #4
    2b66:	d900      	bls.n	2b6a <_malloc_r+0x42>
    2b68:	e162      	b.n	2e30 <_malloc_r+0x308>
    2b6a:	2338      	movs	r3, #56	; 0x38
    2b6c:	4698      	mov	r8, r3
    2b6e:	09a8      	lsrs	r0, r5, #6
    2b70:	4480      	add	r8, r0
    2b72:	3039      	adds	r0, #57	; 0x39
    2b74:	00c1      	lsls	r1, r0, #3
    2b76:	4ed2      	ldr	r6, [pc, #840]	; (2ec0 <_malloc_r+0x398>)
    2b78:	1871      	adds	r1, r6, r1
    2b7a:	3908      	subs	r1, #8
    2b7c:	68cc      	ldr	r4, [r1, #12]
    2b7e:	42a1      	cmp	r1, r4
    2b80:	d019      	beq.n	2bb6 <_malloc_r+0x8e>
    2b82:	2303      	movs	r3, #3
    2b84:	6862      	ldr	r2, [r4, #4]
    2b86:	439a      	bics	r2, r3
    2b88:	0013      	movs	r3, r2
    2b8a:	1b52      	subs	r2, r2, r5
    2b8c:	2a0f      	cmp	r2, #15
    2b8e:	dd00      	ble.n	2b92 <_malloc_r+0x6a>
    2b90:	e0aa      	b.n	2ce8 <_malloc_r+0x1c0>
    2b92:	2a00      	cmp	r2, #0
    2b94:	db00      	blt.n	2b98 <_malloc_r+0x70>
    2b96:	e088      	b.n	2caa <_malloc_r+0x182>
    2b98:	2303      	movs	r3, #3
    2b9a:	469c      	mov	ip, r3
    2b9c:	e008      	b.n	2bb0 <_malloc_r+0x88>
    2b9e:	4662      	mov	r2, ip
    2ba0:	6863      	ldr	r3, [r4, #4]
    2ba2:	4393      	bics	r3, r2
    2ba4:	1b5a      	subs	r2, r3, r5
    2ba6:	2a0f      	cmp	r2, #15
    2ba8:	dd00      	ble.n	2bac <_malloc_r+0x84>
    2baa:	e09d      	b.n	2ce8 <_malloc_r+0x1c0>
    2bac:	2a00      	cmp	r2, #0
    2bae:	da7c      	bge.n	2caa <_malloc_r+0x182>
    2bb0:	68e4      	ldr	r4, [r4, #12]
    2bb2:	42a1      	cmp	r1, r4
    2bb4:	d1f3      	bne.n	2b9e <_malloc_r+0x76>
    2bb6:	0032      	movs	r2, r6
    2bb8:	6934      	ldr	r4, [r6, #16]
    2bba:	3208      	adds	r2, #8
    2bbc:	4294      	cmp	r4, r2
    2bbe:	d100      	bne.n	2bc2 <_malloc_r+0x9a>
    2bc0:	e190      	b.n	2ee4 <_malloc_r+0x3bc>
    2bc2:	2303      	movs	r3, #3
    2bc4:	6861      	ldr	r1, [r4, #4]
    2bc6:	4399      	bics	r1, r3
    2bc8:	4689      	mov	r9, r1
    2bca:	1b49      	subs	r1, r1, r5
    2bcc:	290f      	cmp	r1, #15
    2bce:	dd00      	ble.n	2bd2 <_malloc_r+0xaa>
    2bd0:	e162      	b.n	2e98 <_malloc_r+0x370>
    2bd2:	6172      	str	r2, [r6, #20]
    2bd4:	6132      	str	r2, [r6, #16]
    2bd6:	2900      	cmp	r1, #0
    2bd8:	db00      	blt.n	2bdc <_malloc_r+0xb4>
    2bda:	e087      	b.n	2cec <_malloc_r+0x1c4>
    2bdc:	4ab9      	ldr	r2, [pc, #740]	; (2ec4 <_malloc_r+0x39c>)
    2bde:	464b      	mov	r3, r9
    2be0:	4591      	cmp	r9, r2
    2be2:	d900      	bls.n	2be6 <_malloc_r+0xbe>
    2be4:	e130      	b.n	2e48 <_malloc_r+0x320>
    2be6:	08db      	lsrs	r3, r3, #3
    2be8:	3aff      	subs	r2, #255	; 0xff
    2bea:	1099      	asrs	r1, r3, #2
    2bec:	3aff      	subs	r2, #255	; 0xff
    2bee:	408a      	lsls	r2, r1
    2bf0:	00db      	lsls	r3, r3, #3
    2bf2:	6871      	ldr	r1, [r6, #4]
    2bf4:	199b      	adds	r3, r3, r6
    2bf6:	430a      	orrs	r2, r1
    2bf8:	6899      	ldr	r1, [r3, #8]
    2bfa:	6072      	str	r2, [r6, #4]
    2bfc:	60e3      	str	r3, [r4, #12]
    2bfe:	60a1      	str	r1, [r4, #8]
    2c00:	609c      	str	r4, [r3, #8]
    2c02:	0013      	movs	r3, r2
    2c04:	60cc      	str	r4, [r1, #12]
    2c06:	2101      	movs	r1, #1
    2c08:	1082      	asrs	r2, r0, #2
    2c0a:	4091      	lsls	r1, r2
    2c0c:	4299      	cmp	r1, r3
    2c0e:	d86f      	bhi.n	2cf0 <_malloc_r+0x1c8>
    2c10:	420b      	tst	r3, r1
    2c12:	d105      	bne.n	2c20 <_malloc_r+0xf8>
    2c14:	2203      	movs	r2, #3
    2c16:	4390      	bics	r0, r2
    2c18:	0049      	lsls	r1, r1, #1
    2c1a:	3004      	adds	r0, #4
    2c1c:	420b      	tst	r3, r1
    2c1e:	d0fb      	beq.n	2c18 <_malloc_r+0xf0>
    2c20:	2303      	movs	r3, #3
    2c22:	4698      	mov	r8, r3
    2c24:	00c3      	lsls	r3, r0, #3
    2c26:	4699      	mov	r9, r3
    2c28:	44b1      	add	r9, r6
    2c2a:	46cc      	mov	ip, r9
    2c2c:	4682      	mov	sl, r0
    2c2e:	4663      	mov	r3, ip
    2c30:	68dc      	ldr	r4, [r3, #12]
    2c32:	45a4      	cmp	ip, r4
    2c34:	d107      	bne.n	2c46 <_malloc_r+0x11e>
    2c36:	e157      	b.n	2ee8 <_malloc_r+0x3c0>
    2c38:	2a00      	cmp	r2, #0
    2c3a:	db00      	blt.n	2c3e <_malloc_r+0x116>
    2c3c:	e166      	b.n	2f0c <_malloc_r+0x3e4>
    2c3e:	68e4      	ldr	r4, [r4, #12]
    2c40:	45a4      	cmp	ip, r4
    2c42:	d100      	bne.n	2c46 <_malloc_r+0x11e>
    2c44:	e150      	b.n	2ee8 <_malloc_r+0x3c0>
    2c46:	4642      	mov	r2, r8
    2c48:	6863      	ldr	r3, [r4, #4]
    2c4a:	4393      	bics	r3, r2
    2c4c:	1b5a      	subs	r2, r3, r5
    2c4e:	2a0f      	cmp	r2, #15
    2c50:	ddf2      	ble.n	2c38 <_malloc_r+0x110>
    2c52:	2001      	movs	r0, #1
    2c54:	4680      	mov	r8, r0
    2c56:	1961      	adds	r1, r4, r5
    2c58:	4305      	orrs	r5, r0
    2c5a:	6065      	str	r5, [r4, #4]
    2c5c:	68a0      	ldr	r0, [r4, #8]
    2c5e:	68e5      	ldr	r5, [r4, #12]
    2c60:	3608      	adds	r6, #8
    2c62:	60c5      	str	r5, [r0, #12]
    2c64:	60a8      	str	r0, [r5, #8]
    2c66:	4640      	mov	r0, r8
    2c68:	60f1      	str	r1, [r6, #12]
    2c6a:	60b1      	str	r1, [r6, #8]
    2c6c:	4310      	orrs	r0, r2
    2c6e:	6048      	str	r0, [r1, #4]
    2c70:	60ce      	str	r6, [r1, #12]
    2c72:	608e      	str	r6, [r1, #8]
    2c74:	0038      	movs	r0, r7
    2c76:	50e2      	str	r2, [r4, r3]
    2c78:	f000 fa12 	bl	30a0 <__malloc_unlock>
    2c7c:	0020      	movs	r0, r4
    2c7e:	3008      	adds	r0, #8
    2c80:	e021      	b.n	2cc6 <_malloc_r+0x19e>
    2c82:	2910      	cmp	r1, #16
    2c84:	d826      	bhi.n	2cd4 <_malloc_r+0x1ac>
    2c86:	0038      	movs	r0, r7
    2c88:	f000 fa02 	bl	3090 <__malloc_lock>
    2c8c:	2510      	movs	r5, #16
    2c8e:	2318      	movs	r3, #24
    2c90:	2002      	movs	r0, #2
    2c92:	4e8b      	ldr	r6, [pc, #556]	; (2ec0 <_malloc_r+0x398>)
    2c94:	18f3      	adds	r3, r6, r3
    2c96:	001a      	movs	r2, r3
    2c98:	685c      	ldr	r4, [r3, #4]
    2c9a:	3a08      	subs	r2, #8
    2c9c:	4294      	cmp	r4, r2
    2c9e:	d100      	bne.n	2ca2 <_malloc_r+0x17a>
    2ca0:	e12e      	b.n	2f00 <_malloc_r+0x3d8>
    2ca2:	2303      	movs	r3, #3
    2ca4:	6862      	ldr	r2, [r4, #4]
    2ca6:	439a      	bics	r2, r3
    2ca8:	0013      	movs	r3, r2
    2caa:	68e2      	ldr	r2, [r4, #12]
    2cac:	68a1      	ldr	r1, [r4, #8]
    2cae:	60ca      	str	r2, [r1, #12]
    2cb0:	6091      	str	r1, [r2, #8]
    2cb2:	2201      	movs	r2, #1
    2cb4:	18e3      	adds	r3, r4, r3
    2cb6:	6859      	ldr	r1, [r3, #4]
    2cb8:	0038      	movs	r0, r7
    2cba:	430a      	orrs	r2, r1
    2cbc:	605a      	str	r2, [r3, #4]
    2cbe:	f000 f9ef 	bl	30a0 <__malloc_unlock>
    2cc2:	0020      	movs	r0, r4
    2cc4:	3008      	adds	r0, #8
    2cc6:	b003      	add	sp, #12
    2cc8:	bc3c      	pop	{r2, r3, r4, r5}
    2cca:	4690      	mov	r8, r2
    2ccc:	4699      	mov	r9, r3
    2cce:	46a2      	mov	sl, r4
    2cd0:	46ab      	mov	fp, r5
    2cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cd4:	230c      	movs	r3, #12
    2cd6:	2000      	movs	r0, #0
    2cd8:	603b      	str	r3, [r7, #0]
    2cda:	e7f4      	b.n	2cc6 <_malloc_r+0x19e>
    2cdc:	2180      	movs	r1, #128	; 0x80
    2cde:	233f      	movs	r3, #63	; 0x3f
    2ce0:	2040      	movs	r0, #64	; 0x40
    2ce2:	0089      	lsls	r1, r1, #2
    2ce4:	4698      	mov	r8, r3
    2ce6:	e746      	b.n	2b76 <_malloc_r+0x4e>
    2ce8:	4640      	mov	r0, r8
    2cea:	e764      	b.n	2bb6 <_malloc_r+0x8e>
    2cec:	464b      	mov	r3, r9
    2cee:	e7e0      	b.n	2cb2 <_malloc_r+0x18a>
    2cf0:	2303      	movs	r3, #3
    2cf2:	68b4      	ldr	r4, [r6, #8]
    2cf4:	6862      	ldr	r2, [r4, #4]
    2cf6:	439a      	bics	r2, r3
    2cf8:	4690      	mov	r8, r2
    2cfa:	42aa      	cmp	r2, r5
    2cfc:	d303      	bcc.n	2d06 <_malloc_r+0x1de>
    2cfe:	1b53      	subs	r3, r2, r5
    2d00:	2b0f      	cmp	r3, #15
    2d02:	dd00      	ble.n	2d06 <_malloc_r+0x1de>
    2d04:	e086      	b.n	2e14 <_malloc_r+0x2ec>
    2d06:	0023      	movs	r3, r4
    2d08:	4443      	add	r3, r8
    2d0a:	4a6f      	ldr	r2, [pc, #444]	; (2ec8 <_malloc_r+0x3a0>)
    2d0c:	9301      	str	r3, [sp, #4]
    2d0e:	4b6f      	ldr	r3, [pc, #444]	; (2ecc <_malloc_r+0x3a4>)
    2d10:	4693      	mov	fp, r2
    2d12:	681b      	ldr	r3, [r3, #0]
    2d14:	6812      	ldr	r2, [r2, #0]
    2d16:	18eb      	adds	r3, r5, r3
    2d18:	3201      	adds	r2, #1
    2d1a:	d100      	bne.n	2d1e <_malloc_r+0x1f6>
    2d1c:	e168      	b.n	2ff0 <_malloc_r+0x4c8>
    2d1e:	4a6c      	ldr	r2, [pc, #432]	; (2ed0 <_malloc_r+0x3a8>)
    2d20:	4694      	mov	ip, r2
    2d22:	4463      	add	r3, ip
    2d24:	0b1b      	lsrs	r3, r3, #12
    2d26:	031b      	lsls	r3, r3, #12
    2d28:	9300      	str	r3, [sp, #0]
    2d2a:	9900      	ldr	r1, [sp, #0]
    2d2c:	0038      	movs	r0, r7
    2d2e:	f000 f9bf 	bl	30b0 <_sbrk_r>
    2d32:	0003      	movs	r3, r0
    2d34:	4681      	mov	r9, r0
    2d36:	3301      	adds	r3, #1
    2d38:	d061      	beq.n	2dfe <_malloc_r+0x2d6>
    2d3a:	9b01      	ldr	r3, [sp, #4]
    2d3c:	4283      	cmp	r3, r0
    2d3e:	d900      	bls.n	2d42 <_malloc_r+0x21a>
    2d40:	e0ff      	b.n	2f42 <_malloc_r+0x41a>
    2d42:	4b64      	ldr	r3, [pc, #400]	; (2ed4 <_malloc_r+0x3ac>)
    2d44:	9a00      	ldr	r2, [sp, #0]
    2d46:	469a      	mov	sl, r3
    2d48:	681b      	ldr	r3, [r3, #0]
    2d4a:	469c      	mov	ip, r3
    2d4c:	4653      	mov	r3, sl
    2d4e:	4462      	add	r2, ip
    2d50:	601a      	str	r2, [r3, #0]
    2d52:	9b01      	ldr	r3, [sp, #4]
    2d54:	0011      	movs	r1, r2
    2d56:	4283      	cmp	r3, r0
    2d58:	d100      	bne.n	2d5c <_malloc_r+0x234>
    2d5a:	e155      	b.n	3008 <_malloc_r+0x4e0>
    2d5c:	465b      	mov	r3, fp
    2d5e:	681b      	ldr	r3, [r3, #0]
    2d60:	3301      	adds	r3, #1
    2d62:	d100      	bne.n	2d66 <_malloc_r+0x23e>
    2d64:	e16c      	b.n	3040 <_malloc_r+0x518>
    2d66:	464b      	mov	r3, r9
    2d68:	9a01      	ldr	r2, [sp, #4]
    2d6a:	1a9b      	subs	r3, r3, r2
    2d6c:	1859      	adds	r1, r3, r1
    2d6e:	4653      	mov	r3, sl
    2d70:	6019      	str	r1, [r3, #0]
    2d72:	2307      	movs	r3, #7
    2d74:	464a      	mov	r2, r9
    2d76:	4013      	ands	r3, r2
    2d78:	d100      	bne.n	2d7c <_malloc_r+0x254>
    2d7a:	e124      	b.n	2fc6 <_malloc_r+0x49e>
    2d7c:	2108      	movs	r1, #8
    2d7e:	4689      	mov	r9, r1
    2d80:	4955      	ldr	r1, [pc, #340]	; (2ed8 <_malloc_r+0x3b0>)
    2d82:	1ad2      	subs	r2, r2, r3
    2d84:	4491      	add	r9, r2
    2d86:	1acb      	subs	r3, r1, r3
    2d88:	9a00      	ldr	r2, [sp, #0]
    2d8a:	0038      	movs	r0, r7
    2d8c:	444a      	add	r2, r9
    2d8e:	0511      	lsls	r1, r2, #20
    2d90:	0d09      	lsrs	r1, r1, #20
    2d92:	1a5b      	subs	r3, r3, r1
    2d94:	0019      	movs	r1, r3
    2d96:	469b      	mov	fp, r3
    2d98:	f000 f98a 	bl	30b0 <_sbrk_r>
    2d9c:	1c43      	adds	r3, r0, #1
    2d9e:	d100      	bne.n	2da2 <_malloc_r+0x27a>
    2da0:	e142      	b.n	3028 <_malloc_r+0x500>
    2da2:	464b      	mov	r3, r9
    2da4:	1ac0      	subs	r0, r0, r3
    2da6:	2301      	movs	r3, #1
    2da8:	4458      	add	r0, fp
    2daa:	4318      	orrs	r0, r3
    2dac:	4653      	mov	r3, sl
    2dae:	681b      	ldr	r3, [r3, #0]
    2db0:	445b      	add	r3, fp
    2db2:	0019      	movs	r1, r3
    2db4:	4653      	mov	r3, sl
    2db6:	6019      	str	r1, [r3, #0]
    2db8:	464b      	mov	r3, r9
    2dba:	60b3      	str	r3, [r6, #8]
    2dbc:	6058      	str	r0, [r3, #4]
    2dbe:	42b4      	cmp	r4, r6
    2dc0:	d013      	beq.n	2dea <_malloc_r+0x2c2>
    2dc2:	4643      	mov	r3, r8
    2dc4:	2b0f      	cmp	r3, #15
    2dc6:	d800      	bhi.n	2dca <_malloc_r+0x2a2>
    2dc8:	e0e8      	b.n	2f9c <_malloc_r+0x474>
    2dca:	4643      	mov	r3, r8
    2dcc:	2207      	movs	r2, #7
    2dce:	6860      	ldr	r0, [r4, #4]
    2dd0:	3b0c      	subs	r3, #12
    2dd2:	4393      	bics	r3, r2
    2dd4:	3a06      	subs	r2, #6
    2dd6:	4002      	ands	r2, r0
    2dd8:	2005      	movs	r0, #5
    2dda:	431a      	orrs	r2, r3
    2ddc:	6062      	str	r2, [r4, #4]
    2dde:	18e2      	adds	r2, r4, r3
    2de0:	6050      	str	r0, [r2, #4]
    2de2:	6090      	str	r0, [r2, #8]
    2de4:	2b0f      	cmp	r3, #15
    2de6:	d900      	bls.n	2dea <_malloc_r+0x2c2>
    2de8:	e122      	b.n	3030 <_malloc_r+0x508>
    2dea:	4b3c      	ldr	r3, [pc, #240]	; (2edc <_malloc_r+0x3b4>)
    2dec:	681a      	ldr	r2, [r3, #0]
    2dee:	4291      	cmp	r1, r2
    2df0:	d900      	bls.n	2df4 <_malloc_r+0x2cc>
    2df2:	6019      	str	r1, [r3, #0]
    2df4:	4b3a      	ldr	r3, [pc, #232]	; (2ee0 <_malloc_r+0x3b8>)
    2df6:	681a      	ldr	r2, [r3, #0]
    2df8:	4291      	cmp	r1, r2
    2dfa:	d900      	bls.n	2dfe <_malloc_r+0x2d6>
    2dfc:	6019      	str	r1, [r3, #0]
    2dfe:	2303      	movs	r3, #3
    2e00:	68b4      	ldr	r4, [r6, #8]
    2e02:	6862      	ldr	r2, [r4, #4]
    2e04:	439a      	bics	r2, r3
    2e06:	1b53      	subs	r3, r2, r5
    2e08:	4295      	cmp	r5, r2
    2e0a:	d900      	bls.n	2e0e <_malloc_r+0x2e6>
    2e0c:	e0c9      	b.n	2fa2 <_malloc_r+0x47a>
    2e0e:	2b0f      	cmp	r3, #15
    2e10:	dc00      	bgt.n	2e14 <_malloc_r+0x2ec>
    2e12:	e0c6      	b.n	2fa2 <_malloc_r+0x47a>
    2e14:	2201      	movs	r2, #1
    2e16:	0029      	movs	r1, r5
    2e18:	4313      	orrs	r3, r2
    2e1a:	4311      	orrs	r1, r2
    2e1c:	1965      	adds	r5, r4, r5
    2e1e:	6061      	str	r1, [r4, #4]
    2e20:	0038      	movs	r0, r7
    2e22:	60b5      	str	r5, [r6, #8]
    2e24:	606b      	str	r3, [r5, #4]
    2e26:	f000 f93b 	bl	30a0 <__malloc_unlock>
    2e2a:	0020      	movs	r0, r4
    2e2c:	3008      	adds	r0, #8
    2e2e:	e74a      	b.n	2cc6 <_malloc_r+0x19e>
    2e30:	2814      	cmp	r0, #20
    2e32:	d97a      	bls.n	2f2a <_malloc_r+0x402>
    2e34:	2854      	cmp	r0, #84	; 0x54
    2e36:	d900      	bls.n	2e3a <_malloc_r+0x312>
    2e38:	e0ba      	b.n	2fb0 <_malloc_r+0x488>
    2e3a:	236e      	movs	r3, #110	; 0x6e
    2e3c:	4698      	mov	r8, r3
    2e3e:	0b28      	lsrs	r0, r5, #12
    2e40:	4480      	add	r8, r0
    2e42:	306f      	adds	r0, #111	; 0x6f
    2e44:	00c1      	lsls	r1, r0, #3
    2e46:	e696      	b.n	2b76 <_malloc_r+0x4e>
    2e48:	0a5a      	lsrs	r2, r3, #9
    2e4a:	2a04      	cmp	r2, #4
    2e4c:	d973      	bls.n	2f36 <_malloc_r+0x40e>
    2e4e:	2a14      	cmp	r2, #20
    2e50:	d900      	bls.n	2e54 <_malloc_r+0x32c>
    2e52:	e0d0      	b.n	2ff6 <_malloc_r+0x4ce>
    2e54:	0011      	movs	r1, r2
    2e56:	325c      	adds	r2, #92	; 0x5c
    2e58:	315b      	adds	r1, #91	; 0x5b
    2e5a:	00d2      	lsls	r2, r2, #3
    2e5c:	2308      	movs	r3, #8
    2e5e:	425b      	negs	r3, r3
    2e60:	469c      	mov	ip, r3
    2e62:	18b2      	adds	r2, r6, r2
    2e64:	4494      	add	ip, r2
    2e66:	4663      	mov	r3, ip
    2e68:	689a      	ldr	r2, [r3, #8]
    2e6a:	2303      	movs	r3, #3
    2e6c:	4698      	mov	r8, r3
    2e6e:	4594      	cmp	ip, r2
    2e70:	d100      	bne.n	2e74 <_malloc_r+0x34c>
    2e72:	e0ab      	b.n	2fcc <_malloc_r+0x4a4>
    2e74:	4643      	mov	r3, r8
    2e76:	6851      	ldr	r1, [r2, #4]
    2e78:	4399      	bics	r1, r3
    2e7a:	4589      	cmp	r9, r1
    2e7c:	d300      	bcc.n	2e80 <_malloc_r+0x358>
    2e7e:	e095      	b.n	2fac <_malloc_r+0x484>
    2e80:	6892      	ldr	r2, [r2, #8]
    2e82:	4594      	cmp	ip, r2
    2e84:	d1f6      	bne.n	2e74 <_malloc_r+0x34c>
    2e86:	4663      	mov	r3, ip
    2e88:	68da      	ldr	r2, [r3, #12]
    2e8a:	6873      	ldr	r3, [r6, #4]
    2e8c:	4661      	mov	r1, ip
    2e8e:	60e2      	str	r2, [r4, #12]
    2e90:	60a1      	str	r1, [r4, #8]
    2e92:	6094      	str	r4, [r2, #8]
    2e94:	60cc      	str	r4, [r1, #12]
    2e96:	e6b6      	b.n	2c06 <_malloc_r+0xde>
    2e98:	2301      	movs	r3, #1
    2e9a:	1960      	adds	r0, r4, r5
    2e9c:	431d      	orrs	r5, r3
    2e9e:	6065      	str	r5, [r4, #4]
    2ea0:	6170      	str	r0, [r6, #20]
    2ea2:	6130      	str	r0, [r6, #16]
    2ea4:	60c2      	str	r2, [r0, #12]
    2ea6:	6082      	str	r2, [r0, #8]
    2ea8:	001a      	movs	r2, r3
    2eaa:	464b      	mov	r3, r9
    2eac:	430a      	orrs	r2, r1
    2eae:	6042      	str	r2, [r0, #4]
    2eb0:	0038      	movs	r0, r7
    2eb2:	50e1      	str	r1, [r4, r3]
    2eb4:	f000 f8f4 	bl	30a0 <__malloc_unlock>
    2eb8:	0020      	movs	r0, r4
    2eba:	3008      	adds	r0, #8
    2ebc:	e703      	b.n	2cc6 <_malloc_r+0x19e>
    2ebe:	46c0      	nop			; (mov r8, r8)
    2ec0:	2000045c 	.word	0x2000045c
    2ec4:	000001ff 	.word	0x000001ff
    2ec8:	20000864 	.word	0x20000864
    2ecc:	200008c8 	.word	0x200008c8
    2ed0:	0000100f 	.word	0x0000100f
    2ed4:	20000898 	.word	0x20000898
    2ed8:	00001008 	.word	0x00001008
    2edc:	200008c0 	.word	0x200008c0
    2ee0:	200008c4 	.word	0x200008c4
    2ee4:	6873      	ldr	r3, [r6, #4]
    2ee6:	e68e      	b.n	2c06 <_malloc_r+0xde>
    2ee8:	2308      	movs	r3, #8
    2eea:	469b      	mov	fp, r3
    2eec:	3b07      	subs	r3, #7
    2eee:	44dc      	add	ip, fp
    2ef0:	469b      	mov	fp, r3
    2ef2:	44da      	add	sl, fp
    2ef4:	4643      	mov	r3, r8
    2ef6:	4652      	mov	r2, sl
    2ef8:	4213      	tst	r3, r2
    2efa:	d000      	beq.n	2efe <_malloc_r+0x3d6>
    2efc:	e697      	b.n	2c2e <_malloc_r+0x106>
    2efe:	e037      	b.n	2f70 <_malloc_r+0x448>
    2f00:	68dc      	ldr	r4, [r3, #12]
    2f02:	3002      	adds	r0, #2
    2f04:	42a3      	cmp	r3, r4
    2f06:	d100      	bne.n	2f0a <_malloc_r+0x3e2>
    2f08:	e655      	b.n	2bb6 <_malloc_r+0x8e>
    2f0a:	e6ca      	b.n	2ca2 <_malloc_r+0x17a>
    2f0c:	2201      	movs	r2, #1
    2f0e:	18e3      	adds	r3, r4, r3
    2f10:	6859      	ldr	r1, [r3, #4]
    2f12:	0038      	movs	r0, r7
    2f14:	430a      	orrs	r2, r1
    2f16:	605a      	str	r2, [r3, #4]
    2f18:	68e3      	ldr	r3, [r4, #12]
    2f1a:	68a2      	ldr	r2, [r4, #8]
    2f1c:	60d3      	str	r3, [r2, #12]
    2f1e:	609a      	str	r2, [r3, #8]
    2f20:	f000 f8be 	bl	30a0 <__malloc_unlock>
    2f24:	0020      	movs	r0, r4
    2f26:	3008      	adds	r0, #8
    2f28:	e6cd      	b.n	2cc6 <_malloc_r+0x19e>
    2f2a:	235b      	movs	r3, #91	; 0x5b
    2f2c:	4698      	mov	r8, r3
    2f2e:	4480      	add	r8, r0
    2f30:	305c      	adds	r0, #92	; 0x5c
    2f32:	00c1      	lsls	r1, r0, #3
    2f34:	e61f      	b.n	2b76 <_malloc_r+0x4e>
    2f36:	099a      	lsrs	r2, r3, #6
    2f38:	0011      	movs	r1, r2
    2f3a:	3239      	adds	r2, #57	; 0x39
    2f3c:	3138      	adds	r1, #56	; 0x38
    2f3e:	00d2      	lsls	r2, r2, #3
    2f40:	e78c      	b.n	2e5c <_malloc_r+0x334>
    2f42:	42b4      	cmp	r4, r6
    2f44:	d000      	beq.n	2f48 <_malloc_r+0x420>
    2f46:	e75a      	b.n	2dfe <_malloc_r+0x2d6>
    2f48:	4b4f      	ldr	r3, [pc, #316]	; (3088 <_malloc_r+0x560>)
    2f4a:	9a00      	ldr	r2, [sp, #0]
    2f4c:	469a      	mov	sl, r3
    2f4e:	681b      	ldr	r3, [r3, #0]
    2f50:	469c      	mov	ip, r3
    2f52:	4653      	mov	r3, sl
    2f54:	4462      	add	r2, ip
    2f56:	0011      	movs	r1, r2
    2f58:	601a      	str	r2, [r3, #0]
    2f5a:	e6ff      	b.n	2d5c <_malloc_r+0x234>
    2f5c:	2308      	movs	r3, #8
    2f5e:	425b      	negs	r3, r3
    2f60:	469c      	mov	ip, r3
    2f62:	44e1      	add	r9, ip
    2f64:	464b      	mov	r3, r9
    2f66:	689b      	ldr	r3, [r3, #8]
    2f68:	3801      	subs	r0, #1
    2f6a:	4599      	cmp	r9, r3
    2f6c:	d000      	beq.n	2f70 <_malloc_r+0x448>
    2f6e:	e084      	b.n	307a <_malloc_r+0x552>
    2f70:	4643      	mov	r3, r8
    2f72:	4203      	tst	r3, r0
    2f74:	d1f2      	bne.n	2f5c <_malloc_r+0x434>
    2f76:	6873      	ldr	r3, [r6, #4]
    2f78:	438b      	bics	r3, r1
    2f7a:	6073      	str	r3, [r6, #4]
    2f7c:	0049      	lsls	r1, r1, #1
    2f7e:	4299      	cmp	r1, r3
    2f80:	d900      	bls.n	2f84 <_malloc_r+0x45c>
    2f82:	e6b5      	b.n	2cf0 <_malloc_r+0x1c8>
    2f84:	2900      	cmp	r1, #0
    2f86:	d100      	bne.n	2f8a <_malloc_r+0x462>
    2f88:	e6b2      	b.n	2cf0 <_malloc_r+0x1c8>
    2f8a:	4650      	mov	r0, sl
    2f8c:	420b      	tst	r3, r1
    2f8e:	d000      	beq.n	2f92 <_malloc_r+0x46a>
    2f90:	e648      	b.n	2c24 <_malloc_r+0xfc>
    2f92:	0049      	lsls	r1, r1, #1
    2f94:	3004      	adds	r0, #4
    2f96:	420b      	tst	r3, r1
    2f98:	d0fb      	beq.n	2f92 <_malloc_r+0x46a>
    2f9a:	e643      	b.n	2c24 <_malloc_r+0xfc>
    2f9c:	2301      	movs	r3, #1
    2f9e:	464a      	mov	r2, r9
    2fa0:	6053      	str	r3, [r2, #4]
    2fa2:	0038      	movs	r0, r7
    2fa4:	f000 f87c 	bl	30a0 <__malloc_unlock>
    2fa8:	2000      	movs	r0, #0
    2faa:	e68c      	b.n	2cc6 <_malloc_r+0x19e>
    2fac:	4694      	mov	ip, r2
    2fae:	e76a      	b.n	2e86 <_malloc_r+0x35e>
    2fb0:	23aa      	movs	r3, #170	; 0xaa
    2fb2:	005b      	lsls	r3, r3, #1
    2fb4:	4298      	cmp	r0, r3
    2fb6:	d811      	bhi.n	2fdc <_malloc_r+0x4b4>
    2fb8:	3bdd      	subs	r3, #221	; 0xdd
    2fba:	4698      	mov	r8, r3
    2fbc:	0be8      	lsrs	r0, r5, #15
    2fbe:	4480      	add	r8, r0
    2fc0:	3078      	adds	r0, #120	; 0x78
    2fc2:	00c1      	lsls	r1, r0, #3
    2fc4:	e5d7      	b.n	2b76 <_malloc_r+0x4e>
    2fc6:	2380      	movs	r3, #128	; 0x80
    2fc8:	015b      	lsls	r3, r3, #5
    2fca:	e6dd      	b.n	2d88 <_malloc_r+0x260>
    2fcc:	1089      	asrs	r1, r1, #2
    2fce:	3b02      	subs	r3, #2
    2fd0:	408b      	lsls	r3, r1
    2fd2:	6872      	ldr	r2, [r6, #4]
    2fd4:	4313      	orrs	r3, r2
    2fd6:	6073      	str	r3, [r6, #4]
    2fd8:	4662      	mov	r2, ip
    2fda:	e757      	b.n	2e8c <_malloc_r+0x364>
    2fdc:	4b2b      	ldr	r3, [pc, #172]	; (308c <_malloc_r+0x564>)
    2fde:	4298      	cmp	r0, r3
    2fe0:	d81c      	bhi.n	301c <_malloc_r+0x4f4>
    2fe2:	237c      	movs	r3, #124	; 0x7c
    2fe4:	4698      	mov	r8, r3
    2fe6:	0ca8      	lsrs	r0, r5, #18
    2fe8:	4480      	add	r8, r0
    2fea:	307d      	adds	r0, #125	; 0x7d
    2fec:	00c1      	lsls	r1, r0, #3
    2fee:	e5c2      	b.n	2b76 <_malloc_r+0x4e>
    2ff0:	3310      	adds	r3, #16
    2ff2:	9300      	str	r3, [sp, #0]
    2ff4:	e699      	b.n	2d2a <_malloc_r+0x202>
    2ff6:	2a54      	cmp	r2, #84	; 0x54
    2ff8:	d826      	bhi.n	3048 <_malloc_r+0x520>
    2ffa:	464b      	mov	r3, r9
    2ffc:	0b1a      	lsrs	r2, r3, #12
    2ffe:	0011      	movs	r1, r2
    3000:	326f      	adds	r2, #111	; 0x6f
    3002:	316e      	adds	r1, #110	; 0x6e
    3004:	00d2      	lsls	r2, r2, #3
    3006:	e729      	b.n	2e5c <_malloc_r+0x334>
    3008:	051b      	lsls	r3, r3, #20
    300a:	d000      	beq.n	300e <_malloc_r+0x4e6>
    300c:	e6a6      	b.n	2d5c <_malloc_r+0x234>
    300e:	2001      	movs	r0, #1
    3010:	9b00      	ldr	r3, [sp, #0]
    3012:	68b2      	ldr	r2, [r6, #8]
    3014:	4443      	add	r3, r8
    3016:	4303      	orrs	r3, r0
    3018:	6053      	str	r3, [r2, #4]
    301a:	e6e6      	b.n	2dea <_malloc_r+0x2c2>
    301c:	21fe      	movs	r1, #254	; 0xfe
    301e:	237e      	movs	r3, #126	; 0x7e
    3020:	207f      	movs	r0, #127	; 0x7f
    3022:	0089      	lsls	r1, r1, #2
    3024:	4698      	mov	r8, r3
    3026:	e5a6      	b.n	2b76 <_malloc_r+0x4e>
    3028:	2300      	movs	r3, #0
    302a:	2001      	movs	r0, #1
    302c:	469b      	mov	fp, r3
    302e:	e6bd      	b.n	2dac <_malloc_r+0x284>
    3030:	0021      	movs	r1, r4
    3032:	0038      	movs	r0, r7
    3034:	3108      	adds	r1, #8
    3036:	f7ff fc31 	bl	289c <_free_r>
    303a:	4653      	mov	r3, sl
    303c:	6819      	ldr	r1, [r3, #0]
    303e:	e6d4      	b.n	2dea <_malloc_r+0x2c2>
    3040:	465b      	mov	r3, fp
    3042:	464a      	mov	r2, r9
    3044:	601a      	str	r2, [r3, #0]
    3046:	e694      	b.n	2d72 <_malloc_r+0x24a>
    3048:	21aa      	movs	r1, #170	; 0xaa
    304a:	0049      	lsls	r1, r1, #1
    304c:	428a      	cmp	r2, r1
    304e:	d806      	bhi.n	305e <_malloc_r+0x536>
    3050:	464b      	mov	r3, r9
    3052:	0bda      	lsrs	r2, r3, #15
    3054:	0011      	movs	r1, r2
    3056:	3278      	adds	r2, #120	; 0x78
    3058:	3177      	adds	r1, #119	; 0x77
    305a:	00d2      	lsls	r2, r2, #3
    305c:	e6fe      	b.n	2e5c <_malloc_r+0x334>
    305e:	490b      	ldr	r1, [pc, #44]	; (308c <_malloc_r+0x564>)
    3060:	428a      	cmp	r2, r1
    3062:	d806      	bhi.n	3072 <_malloc_r+0x54a>
    3064:	464b      	mov	r3, r9
    3066:	0c9a      	lsrs	r2, r3, #18
    3068:	0011      	movs	r1, r2
    306a:	327d      	adds	r2, #125	; 0x7d
    306c:	317c      	adds	r1, #124	; 0x7c
    306e:	00d2      	lsls	r2, r2, #3
    3070:	e6f4      	b.n	2e5c <_malloc_r+0x334>
    3072:	22fe      	movs	r2, #254	; 0xfe
    3074:	217e      	movs	r1, #126	; 0x7e
    3076:	0092      	lsls	r2, r2, #2
    3078:	e6f0      	b.n	2e5c <_malloc_r+0x334>
    307a:	6873      	ldr	r3, [r6, #4]
    307c:	e77e      	b.n	2f7c <_malloc_r+0x454>
    307e:	002b      	movs	r3, r5
    3080:	08e8      	lsrs	r0, r5, #3
    3082:	3308      	adds	r3, #8
    3084:	e605      	b.n	2c92 <_malloc_r+0x16a>
    3086:	46c0      	nop			; (mov r8, r8)
    3088:	20000898 	.word	0x20000898
    308c:	00000554 	.word	0x00000554

00003090 <__malloc_lock>:
    3090:	b510      	push	{r4, lr}
    3092:	4802      	ldr	r0, [pc, #8]	; (309c <__malloc_lock+0xc>)
    3094:	f7ff fd0a 	bl	2aac <__retarget_lock_acquire_recursive>
    3098:	bd10      	pop	{r4, pc}
    309a:	46c0      	nop			; (mov r8, r8)
    309c:	20000d54 	.word	0x20000d54

000030a0 <__malloc_unlock>:
    30a0:	b510      	push	{r4, lr}
    30a2:	4802      	ldr	r0, [pc, #8]	; (30ac <__malloc_unlock+0xc>)
    30a4:	f7ff fd04 	bl	2ab0 <__retarget_lock_release_recursive>
    30a8:	bd10      	pop	{r4, pc}
    30aa:	46c0      	nop			; (mov r8, r8)
    30ac:	20000d54 	.word	0x20000d54

000030b0 <_sbrk_r>:
    30b0:	2300      	movs	r3, #0
    30b2:	b570      	push	{r4, r5, r6, lr}
    30b4:	4c06      	ldr	r4, [pc, #24]	; (30d0 <_sbrk_r+0x20>)
    30b6:	0005      	movs	r5, r0
    30b8:	0008      	movs	r0, r1
    30ba:	6023      	str	r3, [r4, #0]
    30bc:	f7fe fa2a 	bl	1514 <_sbrk>
    30c0:	1c43      	adds	r3, r0, #1
    30c2:	d000      	beq.n	30c6 <_sbrk_r+0x16>
    30c4:	bd70      	pop	{r4, r5, r6, pc}
    30c6:	6823      	ldr	r3, [r4, #0]
    30c8:	2b00      	cmp	r3, #0
    30ca:	d0fb      	beq.n	30c4 <_sbrk_r+0x14>
    30cc:	602b      	str	r3, [r5, #0]
    30ce:	e7f9      	b.n	30c4 <_sbrk_r+0x14>
    30d0:	20000d68 	.word	0x20000d68

000030d4 <__sread>:
    30d4:	b570      	push	{r4, r5, r6, lr}
    30d6:	000c      	movs	r4, r1
    30d8:	250e      	movs	r5, #14
    30da:	5f49      	ldrsh	r1, [r1, r5]
    30dc:	f000 f976 	bl	33cc <_read_r>
    30e0:	2800      	cmp	r0, #0
    30e2:	db03      	blt.n	30ec <__sread+0x18>
    30e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    30e6:	181b      	adds	r3, r3, r0
    30e8:	6523      	str	r3, [r4, #80]	; 0x50
    30ea:	bd70      	pop	{r4, r5, r6, pc}
    30ec:	89a3      	ldrh	r3, [r4, #12]
    30ee:	4a02      	ldr	r2, [pc, #8]	; (30f8 <__sread+0x24>)
    30f0:	4013      	ands	r3, r2
    30f2:	81a3      	strh	r3, [r4, #12]
    30f4:	e7f9      	b.n	30ea <__sread+0x16>
    30f6:	46c0      	nop			; (mov r8, r8)
    30f8:	ffffefff 	.word	0xffffefff

000030fc <__swrite>:
    30fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30fe:	0016      	movs	r6, r2
    3100:	001f      	movs	r7, r3
    3102:	220c      	movs	r2, #12
    3104:	5e8b      	ldrsh	r3, [r1, r2]
    3106:	0005      	movs	r5, r0
    3108:	000c      	movs	r4, r1
    310a:	05da      	lsls	r2, r3, #23
    310c:	d507      	bpl.n	311e <__swrite+0x22>
    310e:	230e      	movs	r3, #14
    3110:	5ec9      	ldrsh	r1, [r1, r3]
    3112:	2200      	movs	r2, #0
    3114:	2302      	movs	r3, #2
    3116:	f000 f945 	bl	33a4 <_lseek_r>
    311a:	220c      	movs	r2, #12
    311c:	5ea3      	ldrsh	r3, [r4, r2]
    311e:	4a05      	ldr	r2, [pc, #20]	; (3134 <__swrite+0x38>)
    3120:	0028      	movs	r0, r5
    3122:	4013      	ands	r3, r2
    3124:	81a3      	strh	r3, [r4, #12]
    3126:	0032      	movs	r2, r6
    3128:	230e      	movs	r3, #14
    312a:	5ee1      	ldrsh	r1, [r4, r3]
    312c:	003b      	movs	r3, r7
    312e:	f000 f81f 	bl	3170 <_write_r>
    3132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3134:	ffffefff 	.word	0xffffefff

00003138 <__sseek>:
    3138:	b570      	push	{r4, r5, r6, lr}
    313a:	000c      	movs	r4, r1
    313c:	250e      	movs	r5, #14
    313e:	5f49      	ldrsh	r1, [r1, r5]
    3140:	f000 f930 	bl	33a4 <_lseek_r>
    3144:	1c43      	adds	r3, r0, #1
    3146:	d006      	beq.n	3156 <__sseek+0x1e>
    3148:	2380      	movs	r3, #128	; 0x80
    314a:	89a2      	ldrh	r2, [r4, #12]
    314c:	015b      	lsls	r3, r3, #5
    314e:	4313      	orrs	r3, r2
    3150:	81a3      	strh	r3, [r4, #12]
    3152:	6520      	str	r0, [r4, #80]	; 0x50
    3154:	bd70      	pop	{r4, r5, r6, pc}
    3156:	89a3      	ldrh	r3, [r4, #12]
    3158:	4a01      	ldr	r2, [pc, #4]	; (3160 <__sseek+0x28>)
    315a:	4013      	ands	r3, r2
    315c:	81a3      	strh	r3, [r4, #12]
    315e:	e7f9      	b.n	3154 <__sseek+0x1c>
    3160:	ffffefff 	.word	0xffffefff

00003164 <__sclose>:
    3164:	b510      	push	{r4, lr}
    3166:	230e      	movs	r3, #14
    3168:	5ec9      	ldrsh	r1, [r1, r3]
    316a:	f000 f88f 	bl	328c <_close_r>
    316e:	bd10      	pop	{r4, pc}

00003170 <_write_r>:
    3170:	b570      	push	{r4, r5, r6, lr}
    3172:	0005      	movs	r5, r0
    3174:	0008      	movs	r0, r1
    3176:	0011      	movs	r1, r2
    3178:	2200      	movs	r2, #0
    317a:	4c06      	ldr	r4, [pc, #24]	; (3194 <_write_r+0x24>)
    317c:	6022      	str	r2, [r4, #0]
    317e:	001a      	movs	r2, r3
    3180:	f7fe ff9a 	bl	20b8 <_write>
    3184:	1c43      	adds	r3, r0, #1
    3186:	d000      	beq.n	318a <_write_r+0x1a>
    3188:	bd70      	pop	{r4, r5, r6, pc}
    318a:	6823      	ldr	r3, [r4, #0]
    318c:	2b00      	cmp	r3, #0
    318e:	d0fb      	beq.n	3188 <_write_r+0x18>
    3190:	602b      	str	r3, [r5, #0]
    3192:	e7f9      	b.n	3188 <_write_r+0x18>
    3194:	20000d68 	.word	0x20000d68

00003198 <__register_exitproc>:
    3198:	b5f0      	push	{r4, r5, r6, r7, lr}
    319a:	464e      	mov	r6, r9
    319c:	4645      	mov	r5, r8
    319e:	46de      	mov	lr, fp
    31a0:	4657      	mov	r7, sl
    31a2:	b5e0      	push	{r5, r6, r7, lr}
    31a4:	4d36      	ldr	r5, [pc, #216]	; (3280 <__register_exitproc+0xe8>)
    31a6:	b083      	sub	sp, #12
    31a8:	0006      	movs	r6, r0
    31aa:	6828      	ldr	r0, [r5, #0]
    31ac:	4698      	mov	r8, r3
    31ae:	000f      	movs	r7, r1
    31b0:	4691      	mov	r9, r2
    31b2:	f7ff fc7b 	bl	2aac <__retarget_lock_acquire_recursive>
    31b6:	4b33      	ldr	r3, [pc, #204]	; (3284 <__register_exitproc+0xec>)
    31b8:	681c      	ldr	r4, [r3, #0]
    31ba:	23a4      	movs	r3, #164	; 0xa4
    31bc:	005b      	lsls	r3, r3, #1
    31be:	58e0      	ldr	r0, [r4, r3]
    31c0:	2800      	cmp	r0, #0
    31c2:	d052      	beq.n	326a <__register_exitproc+0xd2>
    31c4:	6843      	ldr	r3, [r0, #4]
    31c6:	2b1f      	cmp	r3, #31
    31c8:	dc13      	bgt.n	31f2 <__register_exitproc+0x5a>
    31ca:	1c5a      	adds	r2, r3, #1
    31cc:	9201      	str	r2, [sp, #4]
    31ce:	2e00      	cmp	r6, #0
    31d0:	d128      	bne.n	3224 <__register_exitproc+0x8c>
    31d2:	9a01      	ldr	r2, [sp, #4]
    31d4:	3302      	adds	r3, #2
    31d6:	009b      	lsls	r3, r3, #2
    31d8:	6042      	str	r2, [r0, #4]
    31da:	501f      	str	r7, [r3, r0]
    31dc:	6828      	ldr	r0, [r5, #0]
    31de:	f7ff fc67 	bl	2ab0 <__retarget_lock_release_recursive>
    31e2:	2000      	movs	r0, #0
    31e4:	b003      	add	sp, #12
    31e6:	bc3c      	pop	{r2, r3, r4, r5}
    31e8:	4690      	mov	r8, r2
    31ea:	4699      	mov	r9, r3
    31ec:	46a2      	mov	sl, r4
    31ee:	46ab      	mov	fp, r5
    31f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31f2:	4b25      	ldr	r3, [pc, #148]	; (3288 <__register_exitproc+0xf0>)
    31f4:	2b00      	cmp	r3, #0
    31f6:	d03d      	beq.n	3274 <__register_exitproc+0xdc>
    31f8:	20c8      	movs	r0, #200	; 0xc8
    31fa:	0040      	lsls	r0, r0, #1
    31fc:	f7ff fc8a 	bl	2b14 <malloc>
    3200:	2800      	cmp	r0, #0
    3202:	d037      	beq.n	3274 <__register_exitproc+0xdc>
    3204:	22a4      	movs	r2, #164	; 0xa4
    3206:	2300      	movs	r3, #0
    3208:	0052      	lsls	r2, r2, #1
    320a:	58a1      	ldr	r1, [r4, r2]
    320c:	6043      	str	r3, [r0, #4]
    320e:	6001      	str	r1, [r0, #0]
    3210:	50a0      	str	r0, [r4, r2]
    3212:	3240      	adds	r2, #64	; 0x40
    3214:	5083      	str	r3, [r0, r2]
    3216:	3204      	adds	r2, #4
    3218:	5083      	str	r3, [r0, r2]
    321a:	3301      	adds	r3, #1
    321c:	9301      	str	r3, [sp, #4]
    321e:	2300      	movs	r3, #0
    3220:	2e00      	cmp	r6, #0
    3222:	d0d6      	beq.n	31d2 <__register_exitproc+0x3a>
    3224:	009a      	lsls	r2, r3, #2
    3226:	4692      	mov	sl, r2
    3228:	4482      	add	sl, r0
    322a:	464a      	mov	r2, r9
    322c:	2188      	movs	r1, #136	; 0x88
    322e:	4654      	mov	r4, sl
    3230:	5062      	str	r2, [r4, r1]
    3232:	22c4      	movs	r2, #196	; 0xc4
    3234:	0052      	lsls	r2, r2, #1
    3236:	4691      	mov	r9, r2
    3238:	4481      	add	r9, r0
    323a:	464a      	mov	r2, r9
    323c:	3987      	subs	r1, #135	; 0x87
    323e:	4099      	lsls	r1, r3
    3240:	6812      	ldr	r2, [r2, #0]
    3242:	468b      	mov	fp, r1
    3244:	430a      	orrs	r2, r1
    3246:	4694      	mov	ip, r2
    3248:	464a      	mov	r2, r9
    324a:	4661      	mov	r1, ip
    324c:	6011      	str	r1, [r2, #0]
    324e:	2284      	movs	r2, #132	; 0x84
    3250:	4641      	mov	r1, r8
    3252:	0052      	lsls	r2, r2, #1
    3254:	50a1      	str	r1, [r4, r2]
    3256:	2e02      	cmp	r6, #2
    3258:	d1bb      	bne.n	31d2 <__register_exitproc+0x3a>
    325a:	0002      	movs	r2, r0
    325c:	465c      	mov	r4, fp
    325e:	328d      	adds	r2, #141	; 0x8d
    3260:	32ff      	adds	r2, #255	; 0xff
    3262:	6811      	ldr	r1, [r2, #0]
    3264:	430c      	orrs	r4, r1
    3266:	6014      	str	r4, [r2, #0]
    3268:	e7b3      	b.n	31d2 <__register_exitproc+0x3a>
    326a:	0020      	movs	r0, r4
    326c:	304d      	adds	r0, #77	; 0x4d
    326e:	30ff      	adds	r0, #255	; 0xff
    3270:	50e0      	str	r0, [r4, r3]
    3272:	e7a7      	b.n	31c4 <__register_exitproc+0x2c>
    3274:	6828      	ldr	r0, [r5, #0]
    3276:	f7ff fc1b 	bl	2ab0 <__retarget_lock_release_recursive>
    327a:	2001      	movs	r0, #1
    327c:	4240      	negs	r0, r0
    327e:	e7b1      	b.n	31e4 <__register_exitproc+0x4c>
    3280:	20000458 	.word	0x20000458
    3284:	00009dd4 	.word	0x00009dd4
    3288:	00002b15 	.word	0x00002b15

0000328c <_close_r>:
    328c:	2300      	movs	r3, #0
    328e:	b570      	push	{r4, r5, r6, lr}
    3290:	4c06      	ldr	r4, [pc, #24]	; (32ac <_close_r+0x20>)
    3292:	0005      	movs	r5, r0
    3294:	0008      	movs	r0, r1
    3296:	6023      	str	r3, [r4, #0]
    3298:	f7fe f94e 	bl	1538 <_close>
    329c:	1c43      	adds	r3, r0, #1
    329e:	d000      	beq.n	32a2 <_close_r+0x16>
    32a0:	bd70      	pop	{r4, r5, r6, pc}
    32a2:	6823      	ldr	r3, [r4, #0]
    32a4:	2b00      	cmp	r3, #0
    32a6:	d0fb      	beq.n	32a0 <_close_r+0x14>
    32a8:	602b      	str	r3, [r5, #0]
    32aa:	e7f9      	b.n	32a0 <_close_r+0x14>
    32ac:	20000d68 	.word	0x20000d68

000032b0 <_fclose_r>:
    32b0:	b570      	push	{r4, r5, r6, lr}
    32b2:	0005      	movs	r5, r0
    32b4:	1e0c      	subs	r4, r1, #0
    32b6:	d040      	beq.n	333a <_fclose_r+0x8a>
    32b8:	2800      	cmp	r0, #0
    32ba:	d002      	beq.n	32c2 <_fclose_r+0x12>
    32bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
    32be:	2b00      	cmp	r3, #0
    32c0:	d03e      	beq.n	3340 <_fclose_r+0x90>
    32c2:	2601      	movs	r6, #1
    32c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    32c6:	4233      	tst	r3, r6
    32c8:	d133      	bne.n	3332 <_fclose_r+0x82>
    32ca:	89a3      	ldrh	r3, [r4, #12]
    32cc:	059b      	lsls	r3, r3, #22
    32ce:	d543      	bpl.n	3358 <_fclose_r+0xa8>
    32d0:	0021      	movs	r1, r4
    32d2:	0028      	movs	r0, r5
    32d4:	f7ff f936 	bl	2544 <__sflush_r>
    32d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    32da:	0006      	movs	r6, r0
    32dc:	2b00      	cmp	r3, #0
    32de:	d004      	beq.n	32ea <_fclose_r+0x3a>
    32e0:	69e1      	ldr	r1, [r4, #28]
    32e2:	0028      	movs	r0, r5
    32e4:	4798      	blx	r3
    32e6:	2800      	cmp	r0, #0
    32e8:	db44      	blt.n	3374 <_fclose_r+0xc4>
    32ea:	89a3      	ldrh	r3, [r4, #12]
    32ec:	061b      	lsls	r3, r3, #24
    32ee:	d42a      	bmi.n	3346 <_fclose_r+0x96>
    32f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    32f2:	2900      	cmp	r1, #0
    32f4:	d008      	beq.n	3308 <_fclose_r+0x58>
    32f6:	0023      	movs	r3, r4
    32f8:	3340      	adds	r3, #64	; 0x40
    32fa:	4299      	cmp	r1, r3
    32fc:	d002      	beq.n	3304 <_fclose_r+0x54>
    32fe:	0028      	movs	r0, r5
    3300:	f7ff facc 	bl	289c <_free_r>
    3304:	2300      	movs	r3, #0
    3306:	6323      	str	r3, [r4, #48]	; 0x30
    3308:	6c61      	ldr	r1, [r4, #68]	; 0x44
    330a:	2900      	cmp	r1, #0
    330c:	d004      	beq.n	3318 <_fclose_r+0x68>
    330e:	0028      	movs	r0, r5
    3310:	f7ff fac4 	bl	289c <_free_r>
    3314:	2300      	movs	r3, #0
    3316:	6463      	str	r3, [r4, #68]	; 0x44
    3318:	f7ff fa46 	bl	27a8 <__sfp_lock_acquire>
    331c:	2300      	movs	r3, #0
    331e:	81a3      	strh	r3, [r4, #12]
    3320:	6e63      	ldr	r3, [r4, #100]	; 0x64
    3322:	07db      	lsls	r3, r3, #31
    3324:	d514      	bpl.n	3350 <_fclose_r+0xa0>
    3326:	6da0      	ldr	r0, [r4, #88]	; 0x58
    3328:	f7ff fbbe 	bl	2aa8 <__retarget_lock_close_recursive>
    332c:	f7ff fa44 	bl	27b8 <__sfp_lock_release>
    3330:	e004      	b.n	333c <_fclose_r+0x8c>
    3332:	220c      	movs	r2, #12
    3334:	5ea3      	ldrsh	r3, [r4, r2]
    3336:	2b00      	cmp	r3, #0
    3338:	d1ca      	bne.n	32d0 <_fclose_r+0x20>
    333a:	2600      	movs	r6, #0
    333c:	0030      	movs	r0, r6
    333e:	bd70      	pop	{r4, r5, r6, pc}
    3340:	f7ff fa02 	bl	2748 <__sinit>
    3344:	e7bd      	b.n	32c2 <_fclose_r+0x12>
    3346:	6921      	ldr	r1, [r4, #16]
    3348:	0028      	movs	r0, r5
    334a:	f7ff faa7 	bl	289c <_free_r>
    334e:	e7cf      	b.n	32f0 <_fclose_r+0x40>
    3350:	6da0      	ldr	r0, [r4, #88]	; 0x58
    3352:	f7ff fbad 	bl	2ab0 <__retarget_lock_release_recursive>
    3356:	e7e6      	b.n	3326 <_fclose_r+0x76>
    3358:	6da0      	ldr	r0, [r4, #88]	; 0x58
    335a:	f7ff fba7 	bl	2aac <__retarget_lock_acquire_recursive>
    335e:	220c      	movs	r2, #12
    3360:	5ea3      	ldrsh	r3, [r4, r2]
    3362:	2b00      	cmp	r3, #0
    3364:	d1b4      	bne.n	32d0 <_fclose_r+0x20>
    3366:	6e63      	ldr	r3, [r4, #100]	; 0x64
    3368:	401e      	ands	r6, r3
    336a:	d1e6      	bne.n	333a <_fclose_r+0x8a>
    336c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    336e:	f7ff fb9f 	bl	2ab0 <__retarget_lock_release_recursive>
    3372:	e7e3      	b.n	333c <_fclose_r+0x8c>
    3374:	2601      	movs	r6, #1
    3376:	4276      	negs	r6, r6
    3378:	e7b7      	b.n	32ea <_fclose_r+0x3a>
    337a:	46c0      	nop			; (mov r8, r8)

0000337c <_fstat_r>:
    337c:	2300      	movs	r3, #0
    337e:	b570      	push	{r4, r5, r6, lr}
    3380:	4c07      	ldr	r4, [pc, #28]	; (33a0 <_fstat_r+0x24>)
    3382:	0005      	movs	r5, r0
    3384:	0008      	movs	r0, r1
    3386:	0011      	movs	r1, r2
    3388:	6023      	str	r3, [r4, #0]
    338a:	f7fe f8d8 	bl	153e <_fstat>
    338e:	1c43      	adds	r3, r0, #1
    3390:	d000      	beq.n	3394 <_fstat_r+0x18>
    3392:	bd70      	pop	{r4, r5, r6, pc}
    3394:	6823      	ldr	r3, [r4, #0]
    3396:	2b00      	cmp	r3, #0
    3398:	d0fb      	beq.n	3392 <_fstat_r+0x16>
    339a:	602b      	str	r3, [r5, #0]
    339c:	e7f9      	b.n	3392 <_fstat_r+0x16>
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	20000d68 	.word	0x20000d68

000033a4 <_lseek_r>:
    33a4:	b570      	push	{r4, r5, r6, lr}
    33a6:	0005      	movs	r5, r0
    33a8:	0008      	movs	r0, r1
    33aa:	0011      	movs	r1, r2
    33ac:	2200      	movs	r2, #0
    33ae:	4c06      	ldr	r4, [pc, #24]	; (33c8 <_lseek_r+0x24>)
    33b0:	6022      	str	r2, [r4, #0]
    33b2:	001a      	movs	r2, r3
    33b4:	f7fe f8c8 	bl	1548 <_lseek>
    33b8:	1c43      	adds	r3, r0, #1
    33ba:	d000      	beq.n	33be <_lseek_r+0x1a>
    33bc:	bd70      	pop	{r4, r5, r6, pc}
    33be:	6823      	ldr	r3, [r4, #0]
    33c0:	2b00      	cmp	r3, #0
    33c2:	d0fb      	beq.n	33bc <_lseek_r+0x18>
    33c4:	602b      	str	r3, [r5, #0]
    33c6:	e7f9      	b.n	33bc <_lseek_r+0x18>
    33c8:	20000d68 	.word	0x20000d68

000033cc <_read_r>:
    33cc:	b570      	push	{r4, r5, r6, lr}
    33ce:	0005      	movs	r5, r0
    33d0:	0008      	movs	r0, r1
    33d2:	0011      	movs	r1, r2
    33d4:	2200      	movs	r2, #0
    33d6:	4c06      	ldr	r4, [pc, #24]	; (33f0 <_read_r+0x24>)
    33d8:	6022      	str	r2, [r4, #0]
    33da:	001a      	movs	r2, r3
    33dc:	f7fe fe58 	bl	2090 <_read>
    33e0:	1c43      	adds	r3, r0, #1
    33e2:	d000      	beq.n	33e6 <_read_r+0x1a>
    33e4:	bd70      	pop	{r4, r5, r6, pc}
    33e6:	6823      	ldr	r3, [r4, #0]
    33e8:	2b00      	cmp	r3, #0
    33ea:	d0fb      	beq.n	33e4 <_read_r+0x18>
    33ec:	602b      	str	r3, [r5, #0]
    33ee:	e7f9      	b.n	33e4 <_read_r+0x18>
    33f0:	20000d68 	.word	0x20000d68

000033f4 <Font12_Table>:
	...
    3400:	10101000 00001010 00000010 48486c00     .............lHH
	...
    3418:	28141400 287c287c 00005050 40381000     ...(|(|(PP....8@
    3428:	70483840 00001010 20502000 1408700c     @8Hp..... P .p..
    3438:	00000008 18000000 48542020 00000034     ........  TH4...
    3448:	10101000 00000010 00000000 10080800     ................
    3458:	10101010 00080810 10202000 10101010     .........  .....
    3468:	00202010 107c1000 00002828 00000000     .  ...|.((......
    3478:	10100000 1010fe10 00000010 00000000     ................
    3488:	18000000 00203010 00000000 00007c00     .....0 ......|..
	...
    34a0:	30000000 00000030 08040400 20101008     ...00.......... 
    34b0:	00004020 44443800 44444444 00000038      @...8DDDDDD8...
    34c0:	10103000 10101010 0000007c 04443800     .0......|....8D.
    34d0:	44201008 0000007c 04443800 44040418     .. D|....8D....D
    34e0:	00000038 14140c00 047e4424 0000000e     8.......$D~.....
    34f0:	20203c00 44040438 00000038 40201c00     .<  8..D8..... @
    3500:	44444478 00000038 04447c00 10080808     xDDD8....|D.....
    3510:	00000010 44443800 44444438 00000038     .....8DD8DDD8...
    3520:	44443800 08043c44 00000070 30000000     .8DDD<..p......0
    3530:	30000030 00000030 18000000 18000018     0..00...........
    3540:	00002030 100c0000 10608060 0000000c     0 ......`.`.....
    3550:	00000000 007c007c 00000000 20c00000     ....|.|........ 
    3560:	20180418 000000c0 24180000 00100804     ... .......$....
    3570:	00000030 4c444438 404c5454 00003844     0...8DDLTTL@D8..
    3580:	28103000 447c2828 000000ee 4444f800     .0.(((|D......DD
    3590:	44444478 000000f8 40443c00 44404040     xDDD.....<D@@@@D
    35a0:	00000038 4448f000 48444444 000000f0     8.....HDDDDH....
    35b0:	5044fc00 44405070 000000fc 28227e00     ..DPpP@D.....~"(
    35c0:	20202838 00000070 40443c00 44444e40     8(  p....<D@@NDD
    35d0:	00000038 4444ee00 4444447c 000000ee     8.....DD|DDD....
    35e0:	10107c00 10101010 0000007c 08083c00     .|......|....<..
    35f0:	48484808 00000030 4844ee00 44487050     .HHH0.....DHPpHD
    3600:	000000e6 20207000 24242020 0000007c     .....p    $$|...
    3610:	6c6cee00 44445454 000000ee 6464ee00     ..llTTDD......dd
    3620:	4c545454 000000ec 44443800 44444444     TTTL.....8DDDDDD
    3630:	00000038 24247800 20203824 00000070     8....x$$$8  p...
    3640:	44443800 44444444 00001c38 4444f800     .8DDDDDD8.....DD
    3650:	44487844 000000e2 404c3400 64040438     DxHD.....4L@8..d
    3660:	00000058 1092fe00 10101010 00000038     X...........8...
    3670:	4444ee00 44444444 00000038 4444ee00     ..DDDDDD8.....DD
    3680:	10282828 00000010 4444ee00 54545454     (((.......DDTTTT
    3690:	00000028 2844c600 44281010 000000c6     (.....D(..(D....
    36a0:	2844ee00 10101028 00000038 08447c00     ..D((...8....|D.
    36b0:	44201010 0000007c 20203800 20202020     .. D|....8      
    36c0:	00382020 20204000 08101020 00000808       8..@   .......
    36d0:	08083800 08080808 00380808 28101000     .8........8....(
    36e0:	00000044 00000000 00000000 00000000     D...............
    36f0:	fe000000 00081000 00000000 00000000     ................
    3700:	38000000 44443c44 0000003e 5840c000     ...8D<DD>.....@X
    3710:	44444464 000000f8 3c000000 44404044     dDDD.......<D@@D
    3720:	00000038 34040c00 4444444c 0000003e     8......4LDDD>...
    3730:	38000000 40407c44 0000003c 7c201c00     ...8D|@@<..... |
    3740:	20202020 0000007c 36000000 4444444c         |......6LDDD
    3750:	0038043c 5840c000 44444464 000000ee     <.8...@XdDDD....
    3760:	70001000 10101010 0000007c 78001000     ...p....|......x
    3770:	08080808 00700808 5c40c000 48507048     ......p...@\HpPH
    3780:	000000dc 10103000 10101010 0000007c     .....0......|...
    3790:	e8000000 54545454 000000fe d8000000     ....TTTT........
    37a0:	44444464 000000ee 38000000 44444444     dDDD.......8DDDD
    37b0:	00000038 d8000000 44444464 00e04078     8.......dDDDx@..
    37c0:	36000000 4444444c 000e043c 6c000000     ...6LDDD<......l
    37d0:	20202030 0000007c 3c000000 44043844     0   |......<D8.D
    37e0:	00000078 7c200000 22202020 0000001c     x..... |   "....
    37f0:	cc000000 4c444444 00000036 ee000000     ....DDDL6.......
    3800:	28284444 00000010 ee000000 54545444     DD((........DTTT
    3810:	00000028 cc000000 48303048 000000cc     (.......H00H....
    3820:	ee000000 18282444 00781010 7c000000     ....D$(...x....|
    3830:	44201048 0000007c 10100800 10201010     H. D|......... .
    3840:	00081010 10101000 10101010 00001010     ................
    3850:	10102000 10081010 00201010 00000000     . ........ .....
    3860:	00582400 00000000                       .$X.....

00003868 <Font16_Table>:
	...
    3888:	000c0000 000c000c 000c000c 000c000c     ................
    3898:	0000000c 0000000c 00000000 00000000     ................
    38a8:	00000000 c01dc01d 80088008 00008008     ................
	...
    38c8:	800d0000 800d800d c03f800d c03f001b     ..........?...?.
    38d8:	001b001b 001b001b 00000000 00000000     ................
    38e8:	801f0004 80318031 001e0038 8003000f     ....1.1.8.......
    38f8:	80318031 0004003f 00000004 00000000     1.1.?...........
    3908:	00180000 00240024 8007c018 8031001e     ....$.$.......1.
    3918:	40024002 00008001 00000000 00000000     .@.@............
    3928:	00000000 0018000f 00180018 801d000c     ................
    3938:	00330037 0000801d 00000000 00000000     7.3.............
    3948:	00000000 00070007 00020002 00000002     ................
	...
    3968:	00030000 00060003 000c000e 000c000c     ................
    3978:	000e000c 00030006 00000003 00000000     ................
    3988:	00180000 000c0018 00060006 00060006     ................
    3998:	00060006 001c000c 00000018 00000000     ................
    39a8:	00060000 c03f0006 000fc03f 8019801f     ......?.?.......
	...
    39cc:	00040000 00040004 0004803f 00040004     ........?.......
	...
    39f8:	00060000 000c0004 00080008 00000000     ................
	...
    3a14:	0000803f 00000000 00000000 00000000     ?...............
	...
    3a38:	000c0000 0000000c 00000000 00000000     ................
    3a48:	c000c000 80018001 00030003 000c0006     ................
    3a58:	0018000c 00300018 00000030 00000000     ......0.0.......
    3a68:	000e0000 8031001b 80318031 80318031     ......1.1.1.1.1.
    3a78:	001b8031 0000000e 00000000 00000000     1...............
    3a88:	00060000 0006003e 00060006 00060006     ....>...........
    3a98:	00060006 0000c03f 00000000 00000000     ....?...........
    3aa8:	000f0000 80318019 00038031 000c0006     ......1.1.......
    3ab8:	00300018 0000803f 00000000 00000000     ..0.?...........
    3ac8:	003f0000 80018061 001f0003 80018003     ..?.a...........
    3ad8:	80618001 0000003f 00000000 00000000     ..a.?...........
    3ae8:	00070000 000f0007 001b000b 00330013     ..............3.
    3af8:	0003803f 0000800f 00000000 00000000     ?...............
    3b08:	801f0000 00180018 001f0018 80018011     ................
    3b18:	80218001 0000001f 00000000 00000000     ..!.............
    3b28:	80070000 0018001c 00370030 80318039     ........0.7.9.1.
    3b38:	80198031 0000000f 00000000 00000000     1...............
    3b48:	007f0000 00030043 00060006 00060006     ....C...........
    3b58:	000c000c 0000000c 00000000 00000000     ................
    3b68:	001f0000 80318031 001f8031 80318031     ....1.1.1...1.1.
    3b78:	80318031 0000001f 00000000 00000000     1.1.............
    3b88:	001e0000 80310033 80338031 8001801d     ....3.1.1.3.....
    3b98:	00070003 0000003c 00000000 00000000     ....<...........
	...
    3bb0:	000c000c 00000000 000c0000 0000000c     ................
	...
    3bd0:	00030003 00000000 00060000 00080004     ................
    3be0:	00000008 00000000 00000000 0003c000     ................
    3bf0:	00180004 00180060 00030004 0000c000     ....`...........
	...
    3c10:	c07f0000 c07f0000 00000000 00000000     ................
	...
    3c2c:	00180060 00030004 0003c000 00180004     `...............
    3c3c:	00000060 00000000 00000000 00000000     `...............
    3c4c:	8031001f 80018031 000c0007 0000000c     ..1.1...........
    3c5c:	0000000c 00000000 00000000 000e0000     ................
    3c6c:	00210011 00270021 00290029 00200027     ..!.!.'.).).'. .
    3c7c:	000e0011 00000000 00000000 00000000     ................
    3c8c:	000f003f 80190009 801f8019 c030c030     ?...........0.0.
    3c9c:	0000e079 00000000 00000000 00000000     y...............
    3cac:	8031007f 80318031 8031003f 80318031     ..1.1.1.?.1.1.1.
    3cbc:	0000007f 00000000 00000000 00000000     ................
    3ccc:	c030401f 00604060 00600060 80304060     .@0.`@`.`.`.`@0.
    3cdc:	0000001f 00000000 00000000 00000000     ................
    3cec:	8031007f c030c030 c030c030 8031c030     ..1.0.0.0.0.0.1.
    3cfc:	0000007f 00000000 00000000 00000000     ................
    3d0c:	8030807f 00328030 0032003e 80308030     ..0.0.2.>.2.0.0.
    3d1c:	0000807f 00000000 00000000 00000000     ................
    3d2c:	4030c07f 00324030 0032003e 00300030     ..0@0@2.>.2.0.0.
    3d3c:	0000007c 00000000 00000000 00000000     |...............
    3d4c:	8031801e 00608060 c0670060 80318061     ..1.`.`.`.g.a.1.
    3d5c:	0000001f 00000000 00000000 00000000     ................
    3d6c:	8031c07b 80318031 8031803f 80318031     {.1.1.1.?.1.1.1.
    3d7c:	0000c07b 00000000 00000000 00000000     {...............
    3d8c:	0006c03f 00060006 00060006 00060006     ?...............
    3d9c:	0000c03f 00000000 00000000 00000000     ?...............
    3dac:	0003c01f 00030003 00630003 00630063     ..........c.c.c.
    3dbc:	0000003e 00000000 00000000 00000000     >...............
    3dcc:	8031c07b 00360033 003e003c 80310033     {.1.3.6.<.>.3.1.
    3ddc:	0000c079 00000000 00000000 00000000     y...............
    3dec:	0018007e 00180018 40180018 40184018     ~..........@.@.@
    3dfc:	0000c07f 00000000 00000000 00000000     ................
    3e0c:	c060e0e0 c07bc071 c06ec06a c060c064     ..`.q.{.j.n.d.`.
    3e1c:	0000e0fb 00000000 00000000 00000000     ................
    3e2c:	8031c073 803d8039 80378035 80318033     s.1.9.=.5.7.3.1.
    3e3c:	00008079 00000000 00000000 00000000     y...............
    3e4c:	8031001f c060c060 c060c060 8031c060     ..1.`.`.`.`.`.1.
    3e5c:	0000001f 00000000 00000000 00000000     ................
    3e6c:	8031007f 80318031 003f8031 00300030     ..1.1.1.1.?.0.0.
    3e7c:	0000007e 00000000 00000000 00000000     ~...............
    3e8c:	8031001f c060c060 c060c060 8031c060     ..1.`.`.`.`.`.1.
    3e9c:	c00c001f 0000801f 00000000 00000000     ................
    3eac:	8031007f 80318031 0033003e 80318031     ..1.1.1.>.3.1.1.
    3ebc:	0000e07c 00000000 00000000 00000000     |...............
    3ecc:	8031801f 00388031 8003001f 80318031     ..1.1.8.....1.1.
    3edc:	0000003f 00000000 00000000 00000000     ?...............
    3eec:	804c807f 804c804c 000c000c 000c000c     ..L.L.L.........
    3efc:	0000003f 00000000 00000000 00000000     ?...............
    3f0c:	8031c07b 80318031 80318031 80318031     {.1.1.1.1.1.1.1.
    3f1c:	0000001f 00000000 00000000 00000000     ................
    3f2c:	8031c07b 001b8031 001b001b 000e000a     {.1.1...........
    3f3c:	0000000e 00000000 00000000 00000000     ................
    3f4c:	c060e0fb c06ec064 802ac06e 803b803b     ..`.d.n.n.*.;.;.
    3f5c:	00008031 00000000 00000000 00000000     1...............
    3f6c:	8031c07b 000e001b 000e000e 8031001b     {.1...........1.
    3f7c:	0000c07b 00000000 00000000 00000000     {...............
    3f8c:	c030e079 000f8019 00060006 00060006     y.0.............
    3f9c:	0000801f 00000000 00000000 00000000     ................
    3fac:	8021803f 00060023 000c0004 80308018     ?.!.#.........0.
    3fbc:	0000803f 00000000 00000000 80070000     ?...............
    3fcc:	00060006 00060006 00060006 00060006     ................
    3fdc:	00060006 00008007 00000000 00300030     ............0.0.
    3fec:	00180018 000c000c 00030006 80010003     ................
    3ffc:	c0008001 0000c000 00000000 001e0000     ................
    400c:	00060006 00060006 00060006 00060006     ................
    401c:	00060006 0000001e 00000000 000a0004     ................
    402c:	0011000a 80208020 00000000 00000000     .... . .........
	...
    4064:	e0ff0000 00040008 00000002 00000000     ................
	...
    4090:	8001001f 801f8001 80338031 0000c01d     ........1.3.....
	...
    40a8:	00700000 00300030 80390037 c030c030     ..p.0.0.7.9.0.0.
    40b8:	8039c030 00000077 00000000 00000000     0.9.w...........
	...
    40d0:	8031801e 00608060 80318060 0000001f     ..1.`.`.`.1.....
	...
    40e8:	80030000 80018001 8033801d 80618061     ..........3.a.a.
    40f8:	80338061 0000c01d 00000000 00000000     a.3.............
	...
    4110:	8031001f c07fc060 c0300060 0000801f     ..1.`...`.0.....
	...
    4128:	e0070000 000c000c 000c803f 000c000c     ........?.......
    4138:	000c000c 0000803f 00000000 00000000     ....?...........
	...
    4150:	8033c01d 80618061 80338061 8001801d     ..3.a.a.a.3.....
    4160:	001f8001 00000000 00700000 00300030     ..........p.0.0.
    4170:	80390037 80318031 80318031 0000c07b     7.9.1.1.1.1.{...
	...
    4188:	00060000 00000006 0006001e 00060006     ................
    4198:	00060006 0000c03f 00000000 00000000     ....?...........
    41a8:	00060000 00000006 0003003f 00030003     ........?.......
    41b8:	00030003 00030003 003e0003 00000000     ..........>.....
    41c8:	00700000 00300030 00368037 003c003c     ..p.0.0.7.6.<.<.
    41d8:	00330036 0000c077 00000000 00000000     6.3.w...........
    41e8:	001e0000 00060006 00060006 00060006     ................
    41f8:	00060006 0000c03f 00000000 00000000     ....?...........
	...
    4210:	c036807f c036c036 c036c036 0000e076     ..6.6.6.6.6.v...
	...
    4230:	80390077 80318031 80318031 0000c07b     w.9.1.1.1.1.{...
	...
    4250:	8031001f c060c060 8031c060 0000001f     ..1.`.`.`.1.....
	...
    4270:	80390077 c030c030 8039c030 00300037     w.9.0.0.0.9.7.0.
    4280:	007c0030 00000000 00000000 00000000     0.|.............
    4290:	8033c01d 80618061 80338061 8001801d     ..3.a.a.a.3.....
    42a0:	c0078001 00000000 00000000 00000000     ................
    42b0:	c01c807b 00180018 00180018 0000007f     {...............
	...
    42d0:	8031801f 001f003c 80318003 0000003f     ..1.<.....1.?...
	...
    42e8:	00180000 00180018 0018007f 00180018     ................
    42f8:	80180018 0000000f 00000000 00000000     ................
	...
    4310:	80318073 80318031 80338031 0000c01d     s.1.1.1.1.3.....
	...
    4330:	8031c07b 001b8031 000e001b 0000000e     {.1.1...........
	...
    4350:	c060e0f1 c06ec064 803b803b 00008031     ..`.d.n.;.;.1...
	...
    4370:	001bc07b 000e000e 001b000e 0000c07b     {...........{...
	...
    4390:	c030e079 80198019 000f000b 00060006     y.0.............
    43a0:	003e000c 00000000 00000000 00000000     ..>.............
    43b0:	8021803f 000e0003 80300018 0000803f     ?.!.......0.?...
	...
    43c8:	00060000 000c000c 000c000c 0018000c     ................
    43d8:	000c000c 000c000c 00000006 00000000     ................
    43e8:	00060000 00060006 00060006 00060006     ................
    43f8:	00060006 00060006 00000006 00000000     ................
    4408:	000c0000 00060006 00060006 00030006     ................
    4418:	00060006 00060006 0000000c 00000000     ................
	...
    4430:	00180000 00038024 00000000 00000000     ....$...........
	...

00004448 <Font20_Table>:
	...
    4470:	00070000 00070007 00070007 00070007     ................
    4480:	00020002 00000000 00070007 00000000     ................
	...
    449c:	e01ce01c 4008e01c 40084008 00000000     .......@.@.@....
	...
    44c0:	c00cc00c c00cc00c f03fc00c c00cf03f     ..........?.?...
    44d0:	f03fc00c c00cf03f c00cc00c c00cc00c     ..?.?...........
	...
    44e8:	00030003 e00fe007 00186018 c00f001f     .........`......
    44f8:	6018e000 c01f6018 0003801f 00030003     ...`.`..........
	...
    4510:	001c0000 00220022 601c0022 800fe001     ...."."."..`....
    4520:	c031003c 20022002 c0012002 00000000     <.1.. . . ......
	...
    453c:	e0030000 000ce00f 0006000c f01f300f     .............0..
    454c:	c018e019 b007f01f 00000000 00000000     ................
	...
    4564:	80038003 00018003 00010001 00000000     ................
	...
    4588:	c0000000 8001c000 80018001 00030003     ................
    4598:	00030003 00030003 80018001 c0008001     ................
    45a8:	0000c000 00000000 000c0000 0006000c     ................
    45b8:	00060006 00030003 00030003 00030003     ................
    45c8:	00060006 000c0006 0000000c 00000000     ................
    45d8:	00030000 00030003 e01f601b 80078007     .........`......
    45e8:	c00cc00f 00000000 00000000 00000000     ................
	...
    4604:	00030000 00030003 f03f0003 0003f03f     ..........?.?...
    4614:	00030003 00000003 00000000 00000000     ................
	...
    463c:	80030000 00030003 00060006 00000004     ................
	...
    465c:	e03f0000 0000e03f 00000000 00000000     ..?.?...........
	...
    468c:	80030000 80038003 00000000 00000000     ................
    469c:	00000000 60006000 c000c000 8001c000     .....`.`........
    46ac:	00038001 00060003 000c0006 000c000c     ................
    46bc:	00180018 00000000 00000000 800f0000     ................
    46cc:	c018c01f 60306030 60306030 60306030     ....0`0`0`0`0`0`
    46dc:	c0186030 800fc01f 00000000 00000000     0`..............
    46ec:	00000000 00030000 001f001f 00030003     ................
    46fc:	00030003 00030003 00030003 e01fe01f     ................
	...
    4718:	800f0000 e038c01f 60006030 8001c000     ......8.0`.`....
    4728:	00060003 0018000c e03fe03f 00000000     ........?.?.....
	...
    4740:	800f0000 e030c03f e0006000 c007c007     ....?.0..`......
    4750:	6000e000 e0606000 803fc07f 00000000     ...`.``...?.....
	...
    4768:	c0010000 c003c003 c00cc006 c018c00c     ................
    4778:	e03fc030 c000e03f e003e003 00000000     0.?.?...........
	...
    4790:	c01f0000 0018c01f 801f0018 e018c01f     ................
    47a0:	60006000 e0306000 801fc03f 00000000     .`.`.`0.?.......
	...
    47b8:	e0030000 001ee00f 00380018 c03f8037     ..........8.7.?.
    47c8:	6030e038 e0186030 8007c01f 00000000     8.0`0`..........
	...
    47e0:	e03f0000 6030e03f c0006000 c000c000     ..?.?.0`.`......
    47f0:	80018001 00038001 00030003 00000000     ................
	...
    4808:	800f0000 e038c01f e0386030 c01fc01f     ......8.0`8.....
    4818:	6030e038 e0386030 800fc01f 00000000     8.0`0`8.........
	...
    4830:	000f0000 c038c01f 60306030 e01fe038     ......8.0`0`8...
    4840:	e000600f c003c000 003e803f 00000000     .`......?.>.....
	...
    4860:	80030000 80038003 00000000 80030000     ................
    4870:	80038003 00000000 00000000 00000000     ................
	...
    4888:	c0010000 c001c001 00000000 80030000     ................
    4898:	00060003 00040006 00000000 00000000     ................
    48a8:	00000000 30000000 c003f000 001c0007     .......0........
    48b8:	001c0078 c0030007 3000f000 00000000     x..........0....
	...
    48d8:	f07f0000 0000f07f f07f0000 0000f07f     ................
	...
    48fc:	00300000 000f003c e0008003 e0007800     ..0.<........x..
    490c:	000f8003 0030003c 00000000 00000000     ....<.0.........
	...
    4924:	c01f800f 60186018 c0016000 00038003     .....`.`.`......
    4934:	00000000 00070007 00000000 00000000     ................
    4944:	00000000 80030000 4008800c 40104010     ...........@.@.@
    4954:	4012c011 40124012 0010c011 40080008     ...@.@.@.......@
    4964:	00008007 00000000 00000000 00000000     ................
    4974:	801f801f c0068003 c00cc006 e01f600c     .............`..
    4984:	3030e01f 78787878 00000000 00000000     ..00xxxx........
	...
    499c:	c03f803f 60186018 c01fe018 7018e01f     ?.?..`.`.......p
    49ac:	30183018 e03ff03f 00000000 00000000     .0.0?.?.........
	...
    49c4:	f00fb007 3038701c 00300030 00300030     .....p800.0.0.0.
    49d4:	701c3038 c007e00f 00000000 00000000     80.p............
	...
    49ec:	c07f807f 7030e030 30303030 30303030     ....0.0p00000000
    49fc:	e0307030 807fc07f 00000000 00000000     0p0.............
	...
    4a14:	f03ff03f 30183018 801f8019 8019801f     ?.?..0.0........
    4a24:	30183018 f03ff03f 00000000 00000000     .0.0?.?.........
	...
    4a3c:	f03ff03f 30183018 801f8019 8019801f     ?.?..0.0........
    4a4c:	00180018 003f003f 00000000 00000000     ....?.?.........
	...
    4a64:	f01fb007 30307018 00300030 f831f831     .....p000.0.1.1.
    4a74:	30183030 c007f01f 00000000 00000000     00.0............
	...
    4a8c:	f03cf03c 60186018 e01f6018 6018e01f     <.<..`.`.`.....`
    4a9c:	60186018 f03cf03c 00000000 00000000     .`.`<.<.........
	...
    4ab4:	e01fe01f 00030003 00030003 00030003     ................
    4ac4:	00030003 e01fe01f 00000000 00000000     ................
	...
    4adc:	f803f803 60006000 60006000 60306030     .....`.`.`.`0`0`
    4aec:	e0306030 800fc03f 00000000 00000000     0`0.?...........
	...
    4b04:	f83ef83e 8019e018 001f001b c018801d     >.>.............
    4b14:	6018c018 383e783e 00000000 00000000     ...`>x>8........
	...
    4b2c:	003f003f 000c000c 000c000c 300c000c     ?.?............0
    4b3c:	300c300c f03ff03f 00000000 00000000     .0.0?.?.........
	...
    4b54:	78787878 f03c7038 b037b034 3033b037     xxxx8p<.4.7.7.30
    4b64:	30303033 f87cf87c 00000000 00000000     3000|.|.........
	...
    4b7c:	f03df039 601e601c 601b601e e019601b     9.=..`.`.`.`.`..
    4b8c:	e018e019 603ee03e 00000000 00000000     ....>.>`........
	...
    4ba4:	c00f8007 7038e01c 30303030 30303030     ......8p00000000
    4bb4:	e01c7038 8007c00f 00000000 00000000     8p..............
	...
    4bcc:	e03fc03f 30187018 70183018 c01fe01f     ?.?..p.0.0.p....
    4bdc:	00180018 003f003f 00000000 00000000     ....?.?.........
	...
    4bf4:	c00f8007 7038e01c 30303030 30303030     ......8p00000000
    4c04:	e01c7038 8007c00f f00fb007 0000e00c     8p..............
	...
    4c1c:	e03fc03f 30187018 e01f7018 e018c01f     ?.?..p.0.p......
    4c2c:	70186018 183e383e 00000000 00000000     .`.p>8>.........
	...
    4c44:	f01fb00f 30307038 801f0038 7000e007     ....8p008......p
    4c54:	70383030 c037e03f 00000000 00000000     008p?.7.........
	...
    4c6c:	f03ff03f 30333033 00033033 00030003     ?.?.303030......
    4c7c:	00030003 c00fc00f 00000000 00000000     ................
	...
    4c94:	f03cf03c 60186018 60186018 60186018     <.<..`.`.`.`.`.`
    4ca4:	e01c6018 8007c00f 00000000 00000000     .`..............
	...
    4cbc:	f078f078 60306030 c018c018 800d800d     x.x.0`0`........
    4ccc:	0007800d 00070007 00000000 00000000     ................
	...
    4ce4:	7c7c7c7c 98331830 98339833 d016d836     ||||0.3.3.3.6...
    4cf4:	701c701c 3018701c 00000000 00000000     .p.p.p.0........
	...
    4d0c:	f078f078 c0186030 0007800d 800d0007     x.x.0`..........
    4d1c:	6030c018 f078f078 00000000 00000000     ..0`x.x.........
	...
    4d34:	f03cf03c c00c6018 80078007 00030003     <.<..`..........
    4d44:	00030003 c00fc00f 00000000 00000000     ................
	...
    4d5c:	e01fe01f c0186018 00038001 00060003     .....`..........
    4d6c:	6018600c e01fe01f 00000000 00000000     .`.`............
    4d7c:	00000000 c0030000 0003c003 00030003     ................
    4d8c:	00030003 00030003 00030003 00030003     ................
    4d9c:	c0030003 0000c003 00000000 00180018     ................
    4dac:	000c000c 0006000c 00030006 80010003     ................
    4dbc:	c0008001 c000c000 60006000 00000000     .........`.`....
    4dcc:	00000000 000f0000 0003000f 00030003     ................
    4ddc:	00030003 00030003 00030003 00030003     ................
    4dec:	000f0003 0000000f 00000000 00020000     ................
    4dfc:	800d0007 6030c018 00002020 00000000     ......0`  ......
	...
    4e44:	fcfffcff 00040000 80000003 00000000     ................
	...
    4e78:	c00f0000 6000e01f e01fe00f e0306038     .......`....8`0.
    4e88:	701ff03f 00000000 00000000 00000000     ?..p............
    4e98:	00700000 00300070 80370030 6038e03f     ..p.p.0.0.7.?.8`
    4ea8:	30303030 60383030 8077e07f 00000000     0000008`..w.....
	...
    4ec8:	b0070000 3018f01f 00303030 30380030     .......0000.0.80
    4ed8:	c00ff01f 00000000 00000000 00000000     ................
    4ee8:	70000000 30007000 b0073000 7018f01f     ...p.p.0.0.....p
    4ef8:	30303030 70383030 b807f81f 00000000     0000008p........
	...
    4f18:	80070000 6018e01f f03ff03f 30180030     .......`?.?.0..0
    4f28:	c007f01f 00000000 00000000 00000000     ................
    4f38:	f0030000 0006f007 e01f0006 0006e01f     ................
    4f48:	00060006 00060006 e01fe01f 00000000     ................
	...
    4f68:	b8070000 7018f81f 30303030 70183030     .......p000000.p
    4f78:	b007f01f 70003000 c00fe00f 00000000     .....0.p........
    4f88:	00380000 00180038 c01b0018 601ce01f     ..8.8..........`
    4f98:	60186018 60186018 f03cf03c 00000000     .`.`.`.`<.<.....
	...
    4fb0:	00030000 00000003 001f0000 0003001f     ................
    4fc0:	00030003 00030003 e01fe01f 00000000     ................
	...
    4fd8:	00030000 00000003 c01f0000 c000c01f     ................
    4fe8:	c000c000 c000c000 c000c000 c001c000     ................
    4ff8:	003f803f 00000000 00380000 00180038     ?.?.......8.8...
    5008:	e01b0018 001be01b 001e001e 8019001b     ................
    5018:	f039f039 00000000 00000000 00000000     9.9.............
    5028:	001f0000 0003001f 00030003 00030003     ................
    5038:	00030003 00030003 e01fe01f 00000000     ................
	...
    5058:	e07e0000 3033f07f 30333033 30333033     ..~...3030303030
    5068:	b87bb87b 00000000 00000000 00000000     {.{.............
	...
    5080:	c03b0000 601ce03f 60186018 60186018     ..;.?..`.`.`.`.`
    5090:	f03cf03c 00000000 00000000 00000000     <.<.............
	...
    50a8:	80070000 6018e01f 30303030 60183030     .......`000000.`
    50b8:	8007e01f 00000000 00000000 00000000     ................
	...
    50d0:	80770000 6038e07f 30303030 60383030     ..w...8`0000008`
    50e0:	8037e03f 00300030 007c007c 00000000     ?.7.0.0.|.|.....
	...
    50f8:	b8070000 7018f81f 30303030 70183030     .......p000000.p
    5108:	b007f01f 30003000 f800f800 00000000     .....0.0........
	...
    5120:	e03c0000 300ff03d 000c000e 000c000c     ..<.=..0........
    5130:	c03fc03f 00000000 00000000 00000000     ?.?.............
	...
    5148:	e0070000 6018e01f c00f001e 6018e001     .......`.......`
    5158:	801fe01f 00000000 00000000 00000000     ................
    5168:	00000000 000c000c e03f000c 000ce03f     ..........?.?...
    5178:	000c000c 300c000c c007f00f 00000000     .......0........
	...
    5198:	e0380000 6018e038 60186018 e0186018     ..8.8..`.`.`.`..
    51a8:	700ff01f 00000000 00000000 00000000     ...p............
	...
    51c0:	f0780000 6030f078 c018c018 800d800d     ..x.x.0`........
    51d0:	00070007 00000000 00000000 00000000     ................
	...
    51e8:	f0780000 6032f078 e0376032 c01dc01d     ..x.x.2`2`7.....
    51f8:	c018c018 00000000 00000000 00000000     ................
	...
    5210:	f03c0000 c00cf03c 00038007 c00c8007     ..<.<...........
    5220:	f03cf03c 00000000 00000000 00000000     <.<.............
	...
    5238:	f0780000 6030f078 c018c018 800f800d     ..x.x.0`........
    5248:	00060007 000c0006 007f007f 00000000     ................
	...
    5260:	e01f0000 c018e01f 00038001 600c0006     ...............`
    5270:	e01fe01f 00000000 00000000 00000000     ................
    5280:	c0010000 0003c003 00030003 00030003     ................
    5290:	000e0007 00030007 00030003 c0030003     ................
    52a0:	0000c001 00000000 00030000 00030003     ................
    52b0:	00030003 00030003 00030003 00030003     ................
    52c0:	00030003 00030003 00000003 00000000     ................
    52d0:	001c0000 0006001e 00060006 00060006     ................
    52e0:	80030007 00060007 00060006 001e0006     ................
    52f0:	0000001c 00000000 00000000 00000000     ................
    5300:	00000000 303f000e e001f033 00000000     ......?03.......
	...

00005320 <Font24_Table>:
	...
    536c:	80030000 00800300 03008003 80030080     ................
    537c:	00800300 03008003 80030080 00000100     ................
    538c:	00000001 00000000 00800300 00008003     ................
	...
    53b8:	00700e00 0e00700e 20040070 00200400     ..p..p..p.. .. .
    53c8:	04002004 00000020 00000000 00000000     . .. ...........
	...
    53fc:	60060000 00600600 06006006 60060060     ...`..`..`..`..`
    540c:	00f83f00 0600f83f c00c0060 00f83f00     .?..?...`....?..
    541c:	0c00f83f c00c00c0 00c00c00 0c00c00c     ?...............
    542c:	000000c0 00000000 00000000 00000000     ................
    543c:	00000000 01000000 80010080 00b00700     ................
    544c:	1800f00f 70180070 00001c00 0700800f     ....p..p........
    545c:	f00000e0 00301800 1c00301c e01f0070     ......0..0..p...
    546c:	00c01b00 01008001 80010080 00800100     ................
	...
    548c:	80070000 00c00f00 1800e01c 60180060     ............`..`
    549c:	00e01c00 0700f80f f01f00e0 00380700     ..............8.
    54ac:	06001806 38070018 00f00300 0000e001     .......8........
	...
    54dc:	0700f003 600c00f0 00000c00 0600000c     .......`........
    54ec:	00070000 009c0f00 1800fc1d 701800f0     ...............p
    54fc:	00fc0f00 0000dc07 00000000 00000000     ................
	...
    5520:	00800300 03008003 00010080 00000100     ................
    5530:	01000001 00000000 00000000 00000000     ................
	...
    5564:	18000000 00380000 00007000 e00000f0     ......8..p......
    5574:	00e00000 0100c001 c00100c0 00c00100     ................
    5584:	0100c001 e00000c0 00e00000 00007000     .............p..
    5594:	38000070 00180000 00000000 00000000     p..8............
	...
    55ac:	00180000 00001c00 0e00000e 00070000     ................
    55bc:	00000700 03008003 80030080 00800300     ................
    55cc:	03008003 00070080 00000700 0e00000f     ................
    55dc:	001c0000 00001800 00000000 00000000     ................
	...
    55f4:	80010000 00800100 1d008001 f81f00b8     ................
    5604:	00e00700 0300c003 600600c0 00600600     ...........`..`.
	...
    5644:	01008001 80010080 00800100 3f008001     ...............?
    5654:	fc3f00fc 00800100 01008001 80010080     ..?.............
    5664:	00800100 00000000 00000000 00000000     ................
	...
    56a8:	e0000000 00c00000 0100c001 80010080     ................
    56b8:	00000300 00000003 00000000 00000000     ................
	...
    56e0:	1f000000 f81f00f8 00000000 00000000     ................
	...
    5738:	c0030000 00c00300 0000c003 00000000     ................
	...
    5758:	00001800 38000018 00300000 00007000     .......8..0..p..
    5768:	60000060 00c00000 0100c000 80010080     `..`............
    5778:	00000300 06000003 00060000 00000e00     ................
    5788:	1c00000c 00180000 00001800 00000000     ................
	...
    57a4:	c0030000 00e00700 0c00300c 18180030     .........0..0...
    57b4:	00181800 18001818 18180018 00181800     ................
    57c4:	0c001818 300c0030 00e00700 0000c003     ....0..0........
	...
    57ec:	80000000 00800700 1d00801f 80010080     ................
    57fc:	00800100 01008001 80010080 00800100     ................
    580c:	01008001 80010080 00f81f00 0000f81f     ................
	...
    5834:	c0070000 00f01f00 30003038 18300018     ........80.0..0.
    5844:	00180000 00003000 c0010060 00800300     .....0..`.......
    5854:	0c000006 00180000 00f83f00 0000f83f     .........?..?...
	...
    587c:	c0030000 00e00f00 0000700c 30000030     .........p..0..0
    588c:	00600000 0300c003 700000e0 00180000     ..`........p....
    589c:	00001800 38180018 00f01f00 0000c00f     .......8........
	...
    58c4:	e0000000 00e00100 0300e001 60060060     ............`..`
    58d4:	00600600 0c00600c 60180060 00603000     ..`..`..`..`.0`.
    58e4:	3f00f83f 600000f8 00f80300 0000f803     ?..?...`........
	...
    590c:	f01f0000 00f01f00 18000018 00180000     ................
    591c:	00c01b00 1c00f01f 18000030 00180000     ........0.......
    592c:	00001800 30300018 00f03f00 0000c00f     ......00.?......
	...
    5954:	f8000000 00f80300 0e000007 000c0000     ................
    5964:	00001800 1f00c01b 301c00f0 00181800     ...........0....
    5974:	18001818 380c0018 00f00f00 0000e003     .......8........
	...
    599c:	f81f0000 00f81f00 18001818 30000038     ............8..0
    59ac:	00300000 00007000 60000060 00e00000     ..0..p..`..`....
    59bc:	0000c000 c00100c0 00800100 00008001     ................
	...
    59e4:	e0070000 00f00f00 1800381c 18180018     .........8......
    59f4:	00300c00 0700e007 300c00e0 00181800     ..0........0....
    5a04:	18001818 381c0018 00f00f00 0000e007     .......8........
	...
    5a2c:	c0070000 00f00f00 1800301c 18180018     .........0......
    5a3c:	00181800 0f00380c d80300f8 00180000     .....8..........
    5a4c:	00003000 e0000070 00c01f00 0000001f     .0..p...........
	...
    5a80:	c0030000 00c00300 0000c003 00000000     ................
	...
    5a98:	c0030000 00c00300 0000c003 00000000     ................
	...
    5ac8:	f0000000 00f00000 0000f000 00000000     ................
	...
    5ae0:	c00100e0 00800100 03008001 00020000     ................
	...
    5b0c:	00001c00 f000003c 00c00300 3c00000f     ....<..........<
    5b1c:	00f00000 00003c00 0300000f f00000c0     .....<..........
    5b2c:	003c0000 00001c00 00000000 00000000     ..<.............
	...
    5b5c:	00fc7f00 0000fc7f 00000000 00fc7f00     ................
    5b6c:	0000fc7f 00000000 00000000 00000000     ................
	...
    5b9c:	78000070 001e0000 00800700 0000e001     p..x............
    5bac:	1e000078 00780000 0700e001 001e0080     x.....x.........
    5bbc:	00007800 00000070 00000000 00000000     .x..p...........
	...
    5be0:	00c00700 1800e00f 30180070 00301800     ........p..0..0.
    5bf0:	00007000 c00300e0 00800300 00000003     .p..............
    5c00:	00000000 00000700 00000007 00000000     ................
	...
    5c24:	e0030000 00f00700 0c00380e 78180018     .........8.....x
    5c34:	00f81800 1900d819 98190098 00981900     ................
    5c44:	1800f818 00180078 00000c00 0700180e     ....x...........
    5c54:	e00300f8 00000000 00000000 00000000     ................
	...
    5c70:	00801f00 0100c01f 600300c0 00600300     ...........`..`.
    5c80:	06003006 300c0030 00f80f00 1800f81f     .0..0..0........
    5c90:	0c30000c 007ffc00 00007ffc 00000000     ..0.............
	...
    5cb8:	00e07f00 1800f07f 18180038 00181800     ........8.......
    5cc8:	1f003818 f81f00f0 001c1800 18000c18     .8..............
    5cd8:	0c18000c 00f87f00 0000f07f 00000000     ................
	...
    5d00:	00ec0300 1c00fc0f 0c18001c 000c3000     .............0..
    5d10:	30000030 00300000 00003000 18000030     0..0..0..0..0...
    5d20:	1c1c000c 00f80f00 0000f003 00000000     ................
	...
    5d48:	00c07f00 1800f07f 18180038 000c1800     ........8.......
    5d58:	18000c18 0c18000c 000c1800 18000c18     ................
    5d68:	38180018 00f07f00 0000e07f 00000000     ...8............
	...
    5d90:	00f87f00 1800f87f 18180018 00981900     ................
    5da0:	1f008019 801f0080 00801900 18009819     ................
    5db0:	18180018 00f87f00 0000f87f 00000000     ................
	...
    5dd8:	00fc3f00 0c00fc3f 0c0c000c 00cc0c00     .?..?...........
    5de8:	0f00c00c c00f00c0 00c00c00 0c00c00c     ................
    5df8:	000c0000 00c03f00 0000c03f 00000000     .....?..?.......
	...
    5e20:	00ec0300 1c00fc0f 0c18001c 000c3000     .............0..
    5e30:	30000030 fe300000 00fe3000 38000c30     0..0..0..0..0..8
    5e40:	1c1c000c 00fc0f00 0000f003 00000000     ................
	...
    5e68:	007e7e00 18007e7e 18180018 00181800     .~~.~~..........
    5e78:	1f001818 f81f00f8 00181800 18001818     ................
    5e88:	18180018 007e7e00 00007e7e 00000000     .....~~.~~......
	...
    5eb0:	00f81f00 0100f81f 80010080 00800100     ................
    5ec0:	01008001 80010080 00800100 01008001     ................
    5ed0:	80010080 00f81f00 0000f81f 00000000     ................
	...
    5ef8:	00fe0700 0000fe07 30000030 00300000     ........0..0..0.
    5f08:	00003000 30300030 00303000 30003030     .0..0.00.00.00.0
    5f18:	60300030 00e03f00 0000800f 00000000     0.0`.?..........
	...
    5f40:	003e7f00 18003e7f 60180030 00c01800     ..>..>..0..`....
    5f50:	1b008019 c01f0080 00e01c00 18007018     .............p..
    5f60:	38180030 001f7f00 00001f7f 00000000     0..8............
	...
    5f88:	00807f00 0c00807f 000c0000 00000c00     ................
    5f98:	0c00000c 000c0000 000c0c00 0c000c0c     ................
    5fa8:	0c0c000c 00fc7f00 0000fc7f 00000000     ................
	...
    5fd0:	000ff000 38001ff8 3c3c001c 003c3c00     .......8..<<.<<.
    5fe0:	36006c36 cc33006c 00cc3300 30008c31     6l.6l.3..3..1..0
    5ff0:	0c30000c 007ffe00 00007ffe 00000000     ..0.............
	...
    6018:	00fe7800 1c00fe78 181e0018 00181f00     .x..x...........
    6028:	1b00181b d8190098 00d81800 1800f818     ................
    6038:	38180078 00187f00 0000187f 00000000     x..8............
	...
    6060:	00c00300 1c00f00f 18180038 001c3800     ........8....8..
    6070:	30000c30 0c30000c 000c3000 18001c38     0..0..0..0..8...
    6080:	381c0018 00f00f00 0000c003 00000000     ...8............
	...
    60a8:	00f03f00 0c00f83f 0c0c001c 000c0c00     .?..?...........
    60b8:	0c000c0c f80f0018 00e00f00 0c00000c     ................
    60c8:	000c0000 00c03f00 0000c03f 00000000     .....?..?.......
	...
    60f0:	00c00300 1c00f00f 18180038 001c3800     ........8....8..
    6100:	30000c30 0c30000c 000c3000 18001c38     0..0..0..0..8...
    6110:	381c0018 00f00f00 0700c007 fc0f00cc     ...8............
    6120:	00380c00 00000000 00000000 00000000     ..8.............
	...
    6138:	00e07f00 1800f07f 18180038 00181800     ........8.......
    6148:	1f003818 c01f00f0 00e01800 18007018     .8...........p..
    6158:	38180030 001e7f00 00000e7f 00000000     0..8............
	...
    6180:	00d80700 1c00f80f 18180038 00181800     ........8.......
    6190:	0f00001e f00300c0 00780000 18001818     ..........x.....
    61a0:	381c0018 00f01f00 0000e01b 00000000     ...8............
	...
    61c8:	00fc3f00 3100fc3f 8c31008c 008c3100     .?..?..1..1..1..
    61d8:	01008c31 80010080 00800100 01008001     1...............
    61e8:	80010080 00f00f00 0000f00f 00000000     ................
	...
    6210:	007e7e00 18007e7e 18180018 00181800     .~~.~~..........
    6220:	18001818 18180018 00181800 18001818     ................
    6230:	300c0018 00f00f00 0000c003 00000000     ...0............
	...
    6258:	007f7f00 18007f7f 180c000c 00180c00     ................
    6268:	0600180c 30060030 00600300 03006003     ....0..0..`..`..
    6278:	c0010060 00c00100 00008000 00000000     `...............
	...
    62a0:	803ffe00 30803ffe 06300006 00863000     ..?..?.0..0..0..
    62b0:	1900cc19 6c1b00cc 006c1b00 0e007c1e     .......l..l..|..
    62c0:	380e0038 00180c00 0000180c 00000000     8..8............
	...
    62e8:	007e7e00 18007e7e 300c0018 00600600     .~~.~~.....0..`.
    62f8:	0100c003 80010080 00c00300 0c006006     .............`..
    6308:	18180030 007e7e00 00007e7e 00000000     0....~~.~~......
	...
    6330:	007e7c00 18007e7c 300c0018 00600600     .|~.|~.....0..`.
    6340:	03006006 800100c0 00800100 01008001     .`..............
    6350:	80010080 00f00f00 0000f00f 00000000     ................
	...
    6378:	00f81f00 1800f81f 30180018 00601800     ...........0..`.
    6388:	0100c018 00030080 00180600 1800180c     ................
    6398:	18300018 00f83f00 0000f83f 00000000     ..0..?..?.......
	...
    63bc:	f0010000 00f00100 01008001 80010080     ................
    63cc:	00800100 01008001 80010080 00800100     ................
    63dc:	01008001 80010080 00800100 01008001     ................
    63ec:	f0010080 00f00100 00000000 00000000     ................
    63fc:	00000000 18000018 001c0000 00000c00     ................
    640c:	0600000e 00060000 00000300 01000003     ................
    641c:	80010080 00c00000 0000c000 60000060     ............`..`
    642c:	00700000 00003000 18000038 00180000     ..p..0..8.......
	...
    644c:	800f0000 00800f00 01008001 80010080     ................
    645c:	00800100 01008001 80010080 00800100     ................
    646c:	01008001 80010080 00800100 01008001     ................
    647c:	800f0080 00800f00 00000000 00000000     ................
	...
    6494:	c0010080 00e00300 06007007 180c0030     .........p..0...
    64a4:	000c1800 00000410 00000000 00000000     ................
	...
    6518:	ffff0000 00ffff00 03000000 80030000     ................
    6528:	00e00000 00006000 00000000 00000000     .....`..........
	...
    6578:	c00f0000 00e01f00 00003000 f0070030     .........0..0...
    6588:	00f01f00 30003038 70300030 00fc1f00     ....80.00.0p....
    6598:	0000bc0f 00000000 00000000 00000000     ................
	...
    65b4:	00780000 00007800 18000018 e01b0000     ..x..x..........
    65c4:	00f81f00 1800181c 0c18000c 000c1800     ................
    65d4:	18000c18 181c000c 00f87f00 0000e07b     ............{...
	...
    6608:	ec030000 00fc0f00 38001c1c 0c30000c     ...........8..0.
    6618:	00003000 38000030 1c1c000c 00f80f00     .0..0..8........
    6628:	0000f003 00000000 00000000 00000000     ................
	...
    6644:	78000000 00780000 00001800 d8070018     ...x..x.........
    6654:	00f81f00 30003818 18300018 00183000     .....8.0..0..0..
    6664:	30001830 38180018 00fe1f00 0000de07     0..0...8........
	...
    6698:	e0070000 00f81f00 30001818 fc3f000c     ...........0..?.
    66a8:	00fc3f00 30000030 0c180000 00fc1f00     .?..0..0........
    66b8:	0000f007 00000000 00000000 00000000     ................
	...
    66d4:	fc010000 00fc0300 06000006 f83f0000     ..............?.
    66e4:	00f83f00 06000006 00060000 00000600     .?..............
    66f4:	06000006 00060000 00f03f00 0000f03f     .........?..?...
	...
    6728:	de070000 00fe1f00 30003818 18300018     .........8.0..0.
    6738:	00183000 30001830 38180018 00f81f00     .0..0..0...8....
    6748:	0000d807 18000018 00380000 0f00f00f     ..........8.....
    6758:	000000c0 00000000 00000000 00780000     ..............x.
    6768:	00007800 18000018 e01b0000 00f01f00     .x..............
    6778:	1800381c 18180018 00181800 18001818     .8..............
    6788:	18180018 007e7e00 00007e7e 00000000     .....~~.~~......
	...
    67ac:	80010000 00800100 00000000 801f0000     ................
    67bc:	00801f00 01008001 80010080 00800100     ................
    67cc:	01008001 80010080 00fc3f00 0000fc3f     .........?..?...
	...
    67f4:	c0000000 00c00000 00000000 f01f0000     ................
    6804:	00f01f00 00003000 30000030 00300000     .....0..0..0..0.
    6814:	00003000 30000030 00300000 00003000     .0..0..0..0..0..
    6824:	30000030 00700000 1f00e01f 00000080     0..0..p.........
	...
    683c:	003c0000 00003c00 0c00000c f80c0000     ..<..<..........
    684c:	00f80c00 0d00c00c 800f0080 00000f00     ................
    685c:	0d00800f e00c00c0 007c3c00 00007c3c     .........<|.<|..
	...
    6884:	801f0000 00801f00 01008001 80010080     ................
    6894:	00800100 01008001 80010080 00800100     ................
    68a4:	01008001 80010080 00fc3f00 0000fc3f     .........?..?...
	...
    68d8:	78f70000 00fcff00 3100cc39 8c31008c     ...x....9..1..1.
    68e8:	008c3100 31008c31 8c31008c 00effd00     .1..1..1..1.....
    68f8:	0000effd 00000000 00000000 00000000     ................
	...
    6920:	e07b0000 00f07f00 1800381c 18180018     ..{......8......
    6930:	00181800 18001818 18180018 007e7e00     .............~~.
    6940:	00007e7e 00000000 00000000 00000000     ~~..............
	...
    6968:	c0030000 00f00f00 3800381c 0c30001c     .........8.8..0.
    6978:	000c3000 38000c30 381c001c 00f00f00     .0..0..8...8....
    6988:	0000c003 00000000 00000000 00000000     ................
	...
    69b0:	e07b0000 00f87f00 1800181c 0c18000c     ..{.............
    69c0:	000c1800 18000c18 181c000c 00f81f00     ................
    69d0:	1800e01b 00180000 00001800 7f00007f     ................
	...
    69f8:	de070000 00fe1f00 30003818 18300018     .........8.0..0.
    6a08:	00183000 30001830 38180018 00f81f00     .0..0..0...8....
    6a18:	0000d807 18000018 00180000 0000fe00     ................
    6a28:	000000fe 00000000 00000000 00000000     ................
	...
    6a40:	783e0000 00fc3e00 0700cc07 00060000     ..>x.>..........
    6a50:	00000600 06000006 00060000 00f03f00     .............?..
    6a60:	0000f03f 00000000 00000000 00000000     ?...............
	...
    6a88:	f8070000 00f80f00 18001818 801f0018     ................
    6a98:	00f00f00 1800f800 38180018 00f01f00     ...........8....
    6aa8:	0000e01f 00000000 00000000 00000000     ................
	...
    6ac4:	000c0000 00000c00 0c00000c f03f0000     ..............?.
    6ad4:	00f03f00 0c00000c 000c0000 00000c00     .?..............
    6ae4:	0c00000c 1c0c0000 00fc0700 0000f003     ................
	...
    6b18:	78780000 00787800 18001818 18180018     ..xx.xx.........
    6b28:	00181800 18001818 38180018 00fe0f00     ...........8....
    6b38:	0000de07 00000000 00000000 00000000     ................
	...
    6b60:	3e7c0000 003e7c00 18001818 300c0018     ..|>.|>........0
    6b70:	00300c00 06006006 e0070060 00c00300     ..0..`..`.......
    6b80:	0000c003 00000000 00000000 00000000     ................
	...
    6ba8:	3c780000 003c7800 33001831 98330098     ..x<.x<.1..3..3.
    6bb8:	00b01a00 1e00f01e 601c00f0 00600c00     ...........`..`.
    6bc8:	0000600c 00000000 00000000 00000000     .`..............
	...
    6bf0:	7c3e0000 007c3e00 0600300c c0030060     ..>|.>|..0..`...
    6c00:	00800100 0600c003 300c0060 007c3e00     ........`..0.>|.
    6c10:	00007c3e 00000000 00000000 00000000     >|..............
	...
    6c38:	1f7e0000 001f7e00 0c000c18 180c0018     ..~..~..........
    6c48:	00300600 03003006 e0030060 00c00100     ..0..0..`.......
    6c58:	0100c000 80010080 00000300 3f00c03f     ............?..?
    6c68:	000000c0 00000000 00000000 00000000     ................
	...
    6c80:	f81f0000 00f81f00 18003018 c0000060     .........0..`...
    6c90:	00800100 06000003 180c0018 00f81f00     ................
    6ca0:	0000f81f 00000000 00000000 00000000     ................
	...
    6cbc:	e0000000 00e00100 01008001 80010080     ................
    6ccc:	00800100 01008001 80030080 00000700     ................
    6cdc:	01008003 80010080 00800100 01008001     ................
    6cec:	e0010080 00e00000 00000000 00000000     ................
	...
    6d04:	80010000 00800100 01008001 80010080     ................
    6d14:	00800100 01008001 80010080 00800100     ................
    6d24:	01008001 80010080 00800100 01008001     ................
    6d34:	80010080 00800100 00000000 00000000     ................
	...
    6d4c:	00070000 00800700 01008001 80010080     ................
    6d5c:	00800100 01008001 c0010080 00e00000     ................
    6d6c:	0100c001 80010080 00800100 01008001     ................
    6d7c:	80070080 00000700 00000000 00000000     ................
	...
    6da8:	1f00000e b83b0018 00f03100 0000e000     ......;..1......
	...

00006dd8 <Font8_Table>:
	...
    6de0:	20202020 00002000 00005050 00000000         . ..PP......
    6df0:	50f85028 00a050f8 30603020 00206010     (P.P.P.. 0`0.` .
    6e00:	60182020 00001010 60203800 00007850       .`.....8 `Px..
    6e10:	00202020 00000000 20202010 00102020        ......     ..
    6e20:	20202040 00402020 50207020 00000000     @     @. p P....
    6e30:	f8202000 00002020 00000000 00202010     .  .  .......  .
    6e40:	70000000 00000000 00000000 00002000     ...p......... ..
    6e50:	20202010 00804040 50505020 00002050     .   @@.. PPPP ..
    6e60:	20202060 0000f820 20205020 00007040     `    ... P  @p..
    6e70:	20105020 00006010 78503010 00003810      P. .`...0Px.8..
    6e80:	10604070 00002050 50604030 00006050     p@`.P ..0@`PP`..
    6e90:	20105070 00002020 50205020 00002050     pP.   .. P PP ..
    6ea0:	30505030 00006010 00200000 00002000     0PP0.`.... .. ..
    6eb0:	00100000 00002010 c0201000 00001020     ..... .... . ...
    6ec0:	70007000 00000000 18204000 00004020     .p.p.....@ . @..
    6ed0:	20105020 00002000 58484830 00384048      P. . ..0HHXH@8.
    6ee0:	70502060 0000d888 487048f0 0000f048     ` Pp.....HpHH...
    6ef0:	40405070 00003040 484848f0 0000f048     pP@@@0...HHHH...
    6f00:	406048f8 0000f848 406048f8 0000e040     .H`@H....H`@@...
    6f10:	58404070 00003050 487848e8 0000e848     p@@XP0...HxHH...
    6f20:	20202070 00007020 50101038 00002050     p    p..8..PP ..
    6f30:	706050d8 0000d850 404040e0 0000f848     .P`pP....@@@H...
    6f40:	a8d8d8d8 0000d888 586868d8 0000e858     .........hhXX...
    6f50:	48484830 00003048 704848f0 0000e040     0HHHH0...HHp@...
    6f60:	48484830 00183048 704848f0 0000e848     0HHHH0...HHpH...
    6f70:	10205070 00007050 2020a8f8 00007020     pP .Pp....   p..
    6f80:	484848d8 00003048 504888d8 00003050     .HHHH0....HPP0..
    6f90:	a8a888d8 000050a8 202050d8 0000d850     .....P...P  P...
    6fa0:	205088d8 00007020 20104878 00007848     ..P  p..xH. Hx..
    6fb0:	20202030 00302020 20404080 00102020     0     0..@@   ..
    6fc0:	20202060 00602020 00502020 00000000     `     `.  P.....
    6fd0:	00000000 f8000000 00001020 00000000     ........ .......
    6fe0:	10300000 00007870 487040c0 0000f048     ..0.px...@pHH...
    6ff0:	40700000 00007040 48380818 00003848     ..p@@p....8HH8..
    7000:	70700000 00003040 20702010 00007020     ..pp@0... p  p..
    7010:	48380000 30083848 487040c0 0000e848     ..8HH8.0.@pHH...
    7020:	20600020 00007020 10700020 70101010      .`  p.. .p....p
    7030:	705840c0 0000d850 20202060 00007020     .@XpP...`    p..
    7040:	a8d00000 0000a8a8 48f00000 0000c848     ...........HH...
    7050:	48300000 00003048 48f00000 e0407048     ..0HH0.....HHp@.
    7060:	48380000 18083848 20780000 00007020     ..8HH8....x  p..
    7070:	20300000 00006010 40f04000 00003048     ..0 .`...@.@H0..
    7080:	48d80000 00003848 48c80000 00003030     ...HH8.....H00..
    7090:	a8d80000 000050a8 30480000 00004830     .....P....H00H..
    70a0:	50d80000 60202050 50780000 00007828     ...PP  `..xP(x..
    70b0:	60202010 00102020 20202020 00202020     .  `  ..       .
    70c0:	30202040 00402020 28000000 00000050     @  0  @....(P...
    70d0:	682f2e2e 732f6c61 682f6372 665f6c61     ../hal/src/hal_f
    70e0:	6873616c 0000632e 682f2e2e 732f6c61     lash.c..../hal/s
    70f0:	682f6372 695f6c61 00632e6f 682f2e2e     rc/hal_io.c.../h
    7100:	732f6c61 682f6372 735f6c61 6d5f6970     al/src/hal_spi_m
    7110:	6e79735f 00632e63 682f2e2e 732f6c61     _sync.c.../hal/s
    7120:	682f6372 755f6c61 74726173 6e79735f     rc/hal_usart_syn
    7130:	00632e63 682f2e2e 6e2f6c70 74636d76     c.c.../hpl/nvmct
    7140:	682f6c72 6e5f6c70 74636d76 632e6c72     rl/hpl_nvmctrl.c
    7150:	00000000 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    7160:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

00007170 <USB_ICON>:
	...
    7198:	3c000000 00000000 00000000 00000000     ...<............
	...
    71b8:	00003f00 00000000 00000000 00000000     .?..............
	...
    71d4:	3f000000 000000e0 00000000 00000000     ...?............
	...
    71f4:	00fc3f00 00000000 00000000 00000000     .?..............
	...
    7210:	3f000000 000080ff 00000000 00000000     ...?............
	...
    7230:	e0ff3f00 00000000 00000000 00000000     .?..............
	...
    724c:	3f000000 0000feff 00000000 00000000     ...?............
	...
    726c:	ffff3f00 00000080 00000000 00000000     .?..............
	...
    7288:	3f000000 00f0ffff 00000000 00000000     ...?............
	...
    72a8:	ffff3f00 000000fe 00000000 00000000     .?..............
	...
    72c4:	3f000000 00feffff 00000000 00000000     ...?............
	...
    72e4:	ffff3f00 000000fe 00000000 00000000     .?..............
	...
    7300:	3f000000 00feffff 00000000 00000000     ...?............
	...
    7320:	ffff3f00 000000fe 00000000 00000000     .?..............
	...
    733c:	3f000000 00feffff 00000000 00000000     ...?............
	...
    735c:	ffff3f00 000000fe 00000000 00000000     .?..............
	...
    7378:	3f000000 00feffff 00000000 00000000     ...?............
	...
    7398:	ffff3f00 000000fe 00000000 00000000     .?..............
	...
    73b4:	3f000000 00feffff 00000000 00000000     ...?............
	...
    73d4:	ffffff03 000000fe 00000000 00000000     ................
	...
    73f0:	ffff0f00 e0ffffff 00000000 00000000     ................
	...
    740c:	7f000000 ffffffff 0000f8ff 00000000     ................
	...
    742c:	ffffff03 ffffffff 00000000 00000000     ................
	...
    7448:	ff3f0000 ffffffff 00c0ffff 00000000     ..?.............
	...
    7468:	ffffffff ffffffff 000000f0 00000000     ................
	...
    7484:	ffff0100 ffffffff 00fcffff 00000000     ................
	...
    74a0:	07000000 ffffffff ffffffff 000000ff     ................
	...
    74c0:	ffff1f00 ffffffff 80ffffff 00000000     ................
	...
    74dc:	7f000000 ffffffff ffffffff 0000e0ff     ................
	...
    74fc:	ffffff00 ffffffff f0ffffff 00000000     ................
	...
    7518:	ff010000 ffffffff ffffffff 0000fcff     ................
	...
    7538:	ffffff07 ffffffff feffffff 00000000     ................
	...
    7554:	ff0f0000 ffffffff ffffffff 0000ffff     ................
	...
    7574:	ffffff0f ffffffff ffffffff 00000080     ................
	...
    7590:	ff3f0000 ffffffff ffffffff 00e0ffff     ..?.............
	...
    75b0:	ffffff3f ffffffff ffffffff 000000f0     ?...............
	...
    75cc:	ff7f0000 ffffffff ffffffff 00f8ffff     ................
	...
    75ec:	ffffffff ffffffff ffffffff 000000fc     ................
	...
    7608:	ffff0100 00fcffff ffffff7f 00feffff     ................
	...
    7624:	01000000 ffffffff ff0700e0 ffffffff     ................
    7634:	000000ff 00000000 00000000 00000000     ................
    7644:	ffff0300 0080ffff ffff3f00 80ffffff     .........?......
	...
    7660:	03000000 ffffffff 01000000 ffffffff     ................
    7670:	0000c0ff 00000000 00000000 00000000     ................
    7680:	ffff0700 0000feff ff1f0000 c0ffffff     ................
	...
    769c:	0f000000 fcffffff 00000000 ffffff00     ................
    76ac:	0000e0ff 00000000 00000000 00000000     ................
    76bc:	ffff0f00 0000f8ff 0f000000 f0ffffff     ................
	...
    76d8:	0f000000 f0ffffff 00000000 ffff0000     ................
    76e8:	0000f8ff 00000000 00000000 00000000     ................
    76f8:	ffff1f00 0000e0ff 00000000 f8ffff03     ................
	...
    7714:	1f000000 e0ffffff 00000000 ff000000     ................
    7724:	0000fcff 00000000 00000000 00000000     ................
    7734:	ffff3f00 0000c0ff 00000000 feffff00     .?..............
	...
    7750:	3f000000 c0ffffff 00000000 ff000000     ...?............
    7760:	0000feff 00000000 00000000 00000000     ................
    7770:	ffff3f00 000080ff 00000000 feffff00     .?..............
	...
    778c:	7f000000 80ffffff 00000000 ff000000     ................
    779c:	0000ffff 00000000 00000000 00000000     ................
    77ac:	ffff7f00 000080ff 00000000 ffffff00     ................
    77bc:	00000080 00000000 00000000 7f000000     ................
    77cc:	00ffffff 00000000 ff000000 0080ffff     ................
	...
    77e8:	ffff7f00 000000ff 00000000 ffffff00     ................
    77f8:	000000c0 00000000 00000000 ff000000     ................
    7808:	00ffffff 00000000 ff000000 00c0ffff     ................
	...
    7824:	ffffff00 000000ff 00000000 ffffff00     ................
    7834:	000000e0 00000000 00000000 ff000000     ................
    7844:	00feffff 00000000 ff000000 00e0ffff     ................
	...
    7860:	ffffff00 0f0000fe 00000080 ffffff00     ................
    7870:	000000f0 00000000 00000000 ff000000     ................
    7880:	00feffff 00fe7f00 ff000000 00f0ffff     ................
	...
    789c:	ffffff00 ff0000fe 0000e0ff ffffff00     ................
    78ac:	000000f0 00000000 00000000 ff010000     ................
    78bc:	00feffff ffffff01 ff000000 00f8ffff     ................
	...
    78d8:	ffffff01 ff0100fe 00fcffff ffffff00     ................
    78e8:	000000f8 00000000 00000000 ff010000     ................
    78f8:	00feffff ffffff03 ff00c0ff 00f8ffff     ................
	...
    7914:	ffffff01 ff0300fe fcffffff ffffff00     ................
    7924:	000000fc 00000000 00000000 ff010000     ................
    7934:	00feffff ffffff03 fff0ffff 00fcffff     ................
	...
    7950:	ffffff01 ff0300fe ffffffff ffffffff     ................
    7960:	000000fc 00000000 00000000 ff010000     ................
    7970:	00feffff ffffff03 ffffffff 00feffff     ................
	...
    798c:	ffffff01 ff0300fe ffffffff ffffffff     ................
    799c:	000000fe 00000000 00000000 ff010000     ................
    79ac:	00feffff ffffff03 ffffffff 00feffff     ................
	...
    79c8:	ffffff01 ff0100fe ffffffff ffffffff     ................
    79d8:	000000fe 00000000 00000000 ff010000     ................
    79e8:	00feffff ffffff01 ffffffff 00ffffff     ................
	...
    7a04:	ffffff01 ff0000fe ffffffff ffffffff     ................
    7a14:	000000ff 00000000 00000000 ff010000     ................
    7a24:	00ffffff ffff7f00 ffffffff 00ffffff     ................
	...
    7a40:	ffffff01 3f0000ff ffffffff ffffffff     .......?........
    7a50:	000000ff 00000000 00000000 ff010000     ................
    7a60:	00ffffff ffff1f00 ffffffff 00ffffff     ................
	...
    7a7c:	ffffff01 0f0000ff ffffffff ffffffff     ................
    7a8c:	000000ff 00000000 00000000 ff010000     ................
    7a9c:	80ffffff ffff0300 ffffffff 00ffffff     ................
	...
    7ab8:	ffffff01 000080ff ffffff7f ffffffff     ................
    7ac8:	000000ff 00000000 00000000 ff010000     ................
    7ad8:	80ffffff ff030000 ffffffff 80ffffff     ................
	...
    7af4:	ffffff01 0000c0ff ffff1f00 ffffffff     ................
    7b04:	000080ff 00000000 00000000 ff010000     ................
    7b14:	c0ffffff 01000000 ffffffff 80ffffff     ................
	...
    7b30:	ffffff01 0000e0ff ff070000 ffffffff     ................
    7b40:	000080ff 00000000 00000000 ff010000     ................
    7b50:	e0ffffff 00000000 ffff7f00 80ffffff     ................
	...
    7b6c:	ffffff01 0000f0ff 07000000 ffffffff     ................
    7b7c:	000080ff 00000000 00000000 ff010000     ................
    7b8c:	f0ffffff 00000000 ff1f0000 80ffffff     ................
	...
    7ba8:	ffffff01 0000f8ff 00000000 ffffff01     ................
    7bb8:	000080ff 00000000 00000000 ff010000     ................
    7bc8:	fcffffff 00000000 ff000000 80ffffff     ................
	...
    7be4:	ffffff01 0000fcff 00000000 ffffff00     ................
    7bf4:	000080ff 00000000 00000000 ff010000     ................
    7c04:	feffffff 00000000 ff000000 80ffffff     ................
	...
    7c20:	ffffff01 0080ffff 00000000 ffffff00     ................
    7c30:	000080ff 00000000 00000000 ff010000     ................
    7c40:	ffffffff 000000c0 ff000000 80ffffff     ................
	...
    7c5c:	ffffff01 00e0ffff 00000000 ffffff00     ................
    7c6c:	000080ff 00000000 00000000 ff010000     ................
    7c7c:	ffffffff 000000f0 ff000000 80ffffff     ................
	...
    7c98:	ffffff01 00fcffff 00000000 ffffff00     ................
    7ca8:	000080ff 00000000 00000000 ff010000     ................
    7cb8:	ffffffff 000080ff ff000000 80ffffff     ................
	...
    7cd4:	ffffff01 e0ffffff 00000000 ffffff00     ................
    7ce4:	000080ff 00000000 00000000 ff010000     ................
    7cf4:	ffffffff 0000fcff ff000000 80ffffff     ................
	...
    7d10:	ffffff01 ffffffff 000000f8 ffffff00     ................
    7d20:	000080ff 00000000 00000000 ff010000     ................
    7d30:	ffffffff c0ffffff ff000000 80ffffff     ................
	...
    7d4c:	ffffff01 ffffffff 0000f8ff ffffff00     ................
    7d5c:	000080ff 00000000 00000000 ff010000     ................
    7d6c:	ffffffff ffff87ff ff0000e0 80ffffff     ................
	...
    7d88:	ffffff01 07f0ffff 00feffff ffffff00     ................
    7d98:	000080ff 00000000 00000000 ff010000     ................
    7da8:	ffffffff ffff07e0 ff00e0ff 80ffffff     ................
	...
    7dc4:	ffffff01 0780ffff ffffffff ffffff80     ................
    7dd4:	000080ff 00000000 00000000 ff010000     ................
    7de4:	feffffff ffff0700 fff8ffff 80ffffff     ................
	...
    7e00:	ffffff01 0700fcff ffffffff ffffffff     ................
    7e10:	000080ff 00000000 00000000 ff010000     ................
    7e20:	f8ffffff ffff0700 ffffffff 80ffffff     ................
	...
    7e3c:	ffffff01 0700f0ff 7f00feff ffffffff     ................
    7e4c:	000080ff 00000000 00000000 ff010000     ................
    7e5c:	f0ffffff f8ff0700 ffff0f00 80ffffff     ................
	...
    7e78:	ffffff01 0700e0ff 0300e0ff ffffffff     ................
    7e88:	000080ff 00000000 00000000 ff010000     ................
    7e98:	e0ffffff c0ff0700 ffff0100 80ffffff     ................
	...
    7eb4:	ffffff01 0700c0ff 000080ff ffffffff     ................
    7ec4:	000080ff 00000000 00000000 ff010000     ................
    7ed4:	80ffffff 00ff0700 ff7f0000 80ffffff     ................
	...
    7ef0:	ffffff01 070080ff 000000ff ffffff3f     ............?...
    7f00:	000080ff 00000000 00000000 ff010000     ................
    7f10:	80ffffff 00fe0700 ff1f0000 80ffffff     ................
	...
    7f2c:	ffffff01 070080ff 000000fc ffffff0f     ................
    7f3c:	000080ff 00000000 00000000 ff010000     ................
    7f4c:	00ffffff 00fc0700 ff0f0000 80ffffff     ................
	...
    7f68:	ffffff01 070000ff 000000f8 ffffff07     ................
    7f78:	000080ff 00000000 00000000 ff010000     ................
    7f88:	00ffffff 00f80700 ff070000 80ffffff     ................
	...
    7fa4:	ffffff01 7f0000fe 000000f8 ffffff03     ................
    7fb4:	000080ff 00000000 00000000 ff010000     ................
    7fc4:	00feffff 00f0ff01 ff030000 80ffffff     ................
	...
    7fe0:	ffffff01 ff0300fe 000000f0 ffffff01     ................
    7ff0:	000080ff 00000000 00000000 ff010000     ................
    8000:	00feffff 00e0ff07 ff010000 80ffffff     ................
	...
    801c:	ffffff01 ff0700fe 000000e0 ffffff00     ................
    802c:	000080ff 00000000 00000000 ff010000     ................
    803c:	00feffff 00e0ff0f ff000000 80ffffff     ................
	...
    8058:	ffffff01 ff0f00fe 000700c0 ffffff00     ................
    8068:	000080ff 00000000 00000000 ff010000     ................
    8078:	00feffff 00c0ff0f ff00801f 80ffffff     ................
	...
    8094:	ffffff01 ff0f00fe c01f00c0 ffffff00     ................
    80a4:	000080ff 00000000 00000000 ff010000     ................
    80b4:	00feffff 00c0ff0f 7f00e03f 80ffffff     ........?.......
	...
    80d0:	ffffff01 ff0f00fe e03f0080 ffff7f00     ..........?.....
    80e0:	000080ff 00000000 00000000 ff010000     ................
    80f0:	00feffff 0080ff0f 7f00e07f 80ffffff     ................
	...
    810c:	ffffff01 ff0f00fe e07f0080 ffff7f00     ................
    811c:	000080ff 00000000 00000000 ff010000     ................
    812c:	00feffff 0000ff0f 7f00e07f 80ffffff     ................
	...
    8148:	ffffff01 ff0700fe e0ff0000 ffff7f00     ................
    8158:	000080ff 00000000 00000000 ff010000     ................
    8168:	00feffff 0000fe07 7f00e0ff 80ffffff     ................
	...
    8184:	ffffff01 fe0300fe e0ff0000 ffff7f00     ................
    8194:	000080ff 00000000 00000000 ff010000     ................
    81a4:	00ffffff 0000fe03 7f00e0ff 80ffffff     ................
	...
    81c0:	ffffff01 f80000ff e0ff0100 ffff7f00     ................
    81d0:	000080ff 00000000 00000000 ff010000     ................
    81e0:	00ffffff 01000000 7f00e0ff 80ffffff     ................
	...
    81fc:	ffffff01 000000ff e0ff0100 ffff7f00     ................
    820c:	000080ff 00000000 00000000 ff010000     ................
    821c:	80ffffff 01000000 7f00c0ff 80ffffff     ................
	...
    8238:	ffffff01 000080ff 00ff0300 ffff7f00     ................
    8248:	000080ff 00000000 00000000 ff010000     ................
    8258:	80ffffff 03000000 ff0000f8 80ffffff     ................
	...
    8274:	ffffff01 0000c0ff 00f80300 ffffff00     ................
    8284:	000080ff 00000000 00000000 ff010000     ................
    8294:	c0ffffff 07000000 ff0000f8 80ffffff     ................
	...
    82b0:	ffffff01 0000e0ff 00f80700 ffffff00     ................
    82c0:	000080ff 00000000 00000000 ff010000     ................
    82d0:	e0ffffff 0f000000 ff0000f8 80ffffff     ................
	...
    82ec:	ffffff01 0000f0ff 00f80f00 ffffff01     ................
    82fc:	000080ff 00000000 00000000 ff010000     ................
    830c:	f0ffffff 1f000000 ff0100f8 80ffffff     ................
	...
    8328:	ffffff01 0000f8ff 00f81f00 ffffff03     ................
    8338:	000080ff 00000000 00000000 ff010000     ................
    8348:	fcffffff 3f000000 ff0300f8 80ffffff     .......?........
	...
    8364:	ffffff01 0000feff 00f87f00 ffffff07     ................
    8374:	000080ff 00000000 00000000 ff010000     ................
    8384:	ffffffff 7f000000 ff0700f8 80ffffff     ................
	...
    83a0:	ffffff01 0080ffff 00f8ff01 ffffff0f     ................
    83b0:	000080ff 00000000 00000000 ff010000     ................
    83c0:	ffffffff ff0300e0 ff1f00f8 80ffffff     ................
	...
    83dc:	ffffff01 00f8ffff 00f8ff0f ffffff3f     ............?...
    83ec:	000080ff 00000000 00000000 ff010000     ................
    83fc:	ffffffff ff7f00ff ff7f00f8 80ffffff     ................
	...
    8418:	ffffff01 ffffffff 00f8ffff ffffffff     ................
    8428:	000080ff 00000000 00000000 ff010000     ................
    8438:	8fffffff ffffffff ffff07f8 80ffffff     ................
	...
    8454:	ffffff01 ff7f80ff 1ff8ffff ffffffff     ................
    8464:	000080ff 00000000 00000000 ff010000     ................
    8474:	80ffffff ffffff03 fffffff9 80ffffff     ................
	...
    8490:	ffffff01 3f0080ff ffffffff ffffffff     .......?........
    84a0:	000080ff 00000000 00000000 ff010000     ................
    84b0:	80ffffff ffff0100 ffffffff 80ffffff     ................
	...
    84cc:	ffffff01 000080ff ffffff1f ffffffff     ................
    84dc:	000080ff 00000000 00000000 ff010000     ................
    84ec:	80ffffff ff010000 ffffffff 80ffffff     ................
	...
    8508:	ffffff01 000080ff ffff0700 ffffffff     ................
    8518:	000080ff 00000000 00000000 ff010000     ................
    8528:	80ffffff 00000000 ffffff7f 80ffffff     ................
	...
    8544:	ffffff01 000080ff ff070000 ffffffff     ................
    8554:	000080ff 00000000 00000000 ff010000     ................
    8564:	80ffffff 00000000 ffff3f00 80ffffff     .........?......
	...
    8580:	ffffff01 000080ff 03000000 ffffffff     ................
    8590:	000080ff 00000000 00000000 ff010000     ................
    85a0:	80ffffff 00000000 ff1f0000 80ffffff     ................
	...
    85bc:	ffffff01 000080ff 00000000 ffffff00     ................
    85cc:	000080ff 00000000 00000000 ff010000     ................
    85dc:	80ffffff 00000000 ff000000 80ffffff     ................
	...
    85f8:	ffffff01 000080ff 00000000 ffffff00     ................
    8608:	000080ff 00000000 00000000 ff010000     ................
    8618:	80ffffff 00000000 ff000000 80ffffff     ................
	...
    8634:	ffffff01 000080ff 00000000 ffffff00     ................
    8644:	000080ff 00000000 00000000 ff010000     ................
    8654:	80ffffff 00000000 ff000000 80ffffff     ................
	...
    8670:	ffffff01 000080ff 00000000 ffffff00     ................
    8680:	000080ff 00000000 00000000 ff010000     ................
    8690:	80ffffff 00007800 ff000000 80ffffff     .....x..........
	...
    86ac:	ffff0100 7f0080ff 00000080 ffffff00     ................
    86bc:	000080ff 00000000 00000000 00000000     ................
    86cc:	80ffff07 00e07f00 ff000000 80ffffff     ................
	...
    86e8:	1f000000 7f0080ff 000000e0 ffffff00     ................
    86f8:	000080ff 00000000 00000000 00000000     ................
    8708:	80ff1f00 07e07f00 ff000000 80ffffff     ................
	...
    8724:	1f000000 7f0080ff 00f007e0 ffffff00     ................
    8734:	000080ff 00000000 00000000 00000000     ................
    8744:	80ff1f00 07e07f00 ff0000fe 80ffffff     ................
	...
    8760:	1f000000 7f0080ff 00fe07e0 ffffff00     ................
    8770:	000080ff 00000000 00000000 00000000     ................
    8780:	80ff1f00 07e07f00 ff0000fe 80ffffff     ................
	...
    879c:	1f000000 7f0080ff 00fe07e0 ffffff00     ................
    87ac:	000080ff 00000000 00000000 00000000     ................
    87bc:	80ff1f00 07e07f00 ff0000fe 80ffffff     ................
	...
    87d8:	1f000000 7f0080ff 00fe07e0 ffffff00     ................
    87e8:	000080ff 00000000 00000000 00000000     ................
    87f8:	80ff1f00 07e07f00 ff0000fe 80ffffff     ................
	...
    8814:	1f000000 7f0080ff 00fe07e0 ffffff00     ................
    8824:	000080ff 00000000 00000000 00000000     ................
    8834:	80ff1f00 07e07f00 ff0000fe 80ffffff     ................
	...
    8850:	1f000000 7f0080ff 00fe07e0 ffffff00     ................
    8860:	000080ff 00000000 00000000 00000000     ................
    8870:	80ff1f00 07e07f00 ff0000fe 80ffffff     ................
	...
    888c:	1f000000 7f0080ff 00fe07e0 ffffff00     ................
    889c:	000080ff 00000000 00000000 00000000     ................
    88ac:	80ff1f00 07e03f00 ff0000fe 80ffffff     .....?..........
	...
    88c8:	1f000000 3f0080ff 00fe07e0 ffffff00     .......?........
    88d8:	000080ff 00000000 00000000 00000000     ................
    88e8:	80ff1f00 03c01f00 ff0000fe 80ffffff     ................
	...
    8904:	1f000000 0f0080ff 00fe0180 7ff8ff00     ................
    8914:	000080ff 00000000 00000000 00000000     ................
    8924:	80ff1f00 01000000 ff0000fc 80ff03f8     ................
	...
    8940:	1f000000 000080ff 00000000 00f8ff00     ................
    8950:	0000800f 00000000 00000000 00000000     ................
    8960:	80ff1f00 00000000 ff000000 000000f8     ................
	...
    897c:	1f000000 000080ff 00000000 00f8ff00     ................
	...
    899c:	80ff1f00 00000000 ff000000 000000f8     ................
	...
    89b8:	1f000000 000080ff 00000000 00f8ff00     ................
	...
    89d8:	c0ff1f00 00000000 ff000000 000000f8     ................
	...
    89f4:	1f000000 0000c0ff 00000000 00f8ff00     ................
	...
    8a14:	c0ff1f00 00000000 ff000000 000000f8     ................
	...
    8a30:	1f000000 0000e0ff 00000000 00f8ff01     ................
	...
    8a50:	e0ff0f00 00000000 ff010000 000000f8     ................
	...
    8a6c:	0f000000 0000f0ff 00000000 00f8ff01     ................
	...
    8a8c:	f0ff0f00 00000000 ff010000 000000f8     ................
	...
    8aa8:	0f000000 0000f8ff 00002000 00f8ff01     ......... ......
	...
    8ac8:	fcff0700 60000000 ff010000 000000f8     .......`........
	...
    8ae4:	07000000 0000fcff 00007000 00f8ff03     .........p......
	...
    8b04:	feff0700 f0000000 ff030000 000000f8     ................
	...
    8b20:	07000000 0000ffff 0000f801 00f8ff07     ................
	...
    8b40:	ffff0300 f8010080 ff070000 000000f8     ................
	...
    8b5c:	03000000 00e0ffff 0000fc03 00f8ff0f     ................
	...
    8b7c:	ffff0100 fe0f00f8 ff1f0000 000000f8     ................
	...
    8b9c:	00ffffff 0000ff7f 00f0ff1f 00000000     ................
	...
    8bb8:	ffff0000 ffffffff ff3f00c0 000000f0     ..........?.....
	...
    8bd8:	ffffff7f 00f0ffff 00f0ffff 00000000     ................
	...
    8bf4:	ff3f0000 ffffffff ffff07ff 000000f0     ..?.............
	...
    8c14:	ffffff1f ffffffff 00e0ffff 00000000     ................
	...
    8c30:	ff0f0000 ffffffff ffffffff 000000e0     ................
	...
    8c50:	ffffff07 ffffffff 00c0ffff 00000000     ................
	...
    8c6c:	ff030000 ffffffff ffffffff 00000080     ................
	...
    8c8c:	ffffff00 ffffffff 0080ffff 00000000     ................
	...
    8ca8:	7f000000 ffffffff ffffffff 00000000     ................
	...
    8cc8:	ffff1f00 ffffdfff 0000feff 00000000     ................
	...
    8ce4:	07000000 07ffffff fcffffff 00000000     ................
	...
    8d04:	ffff0000 ffff03fc 0000f0ff 00000000     ................
	...
    8d24:	00f0ff1f e0ffffff 00000000 00000000     ................
	...
    8d40:	18000000 ff1f0000 000000ff 00000000     ................
	...
    8d64:	00f8ff03 00000000 00000000 00000000     ................
	...

00008d90 <MR_Logo_240x135>:
	...
    8e6c:	ff010000 ffffffff 0000ffff 00000000     ................
	...
    8e8c:	ffffff01 ffffffff 000000f0 00000000     ................
	...
    8ea8:	ff030000 ffffffff 00fcffff 00000000     ................
	...
    8ec8:	ffffff03 ffffffff 000000ff 00000000     ................
	...
    8ee4:	ff070000 ffffffff c0ffffff 00000000     ................
	...
    8f04:	ffffff0f ffffffff 0000e0ff 00000000     ................
	...
    8f20:	ff0f0000 ffffffff f8ffffff 00000000     ................
	...
    8f40:	ffffff1f ffffffff 0000fcff 00000000     ................
	...
    8f5c:	ff1f0000 ffffffff feffffff 00000000     ................
	...
    8f7c:	ffffff3f ffffffff 0000ffff 00000000     ?...............
	...
    8f98:	ff7f0000 ffffffff ffffffff 00000080     ................
	...
    8fb8:	ffffff7f ffffffff 00c0ffff 00000000     ................
	...
    8fd4:	ffff0000 ffffffff ffffffff 000000e0     ................
	...
    8ff4:	ffffffff ffffffff 00f0ffff 00000000     ................
	...
    9010:	ffff0100 ffffffff ffffffff 000000f0     ................
	...
    902c:	01000000 ffffffff ffffffff 00f8ffff     ................
	...
    904c:	ffff0300 ffffffff ffffffff 000000fc     ................
	...
    9068:	07000000 ffffffff ffffffff 00fcffff     ................
	...
    9088:	ffff0700 ffffffff ffffffff 000000fe     ................
	...
    90a4:	0f000000 ffffffff ffffffff 00feffff     ................
	...
    90c4:	ffff0f00 ffffffff ffffffff 000000fe     ................
	...
    90e0:	1f000000 ffffffff ffffffff 00ffffff     ................
	...
    9100:	ffff1f00 ffffffff ffffffff 000000ff     ................
	...
    911c:	3f000000 00fcffff 0f000000 00ffffff     ...?............
	...
    913c:	ffff7f00 000000f8 ffff0100 000080ff     ................
	...
    9158:	7f000000 00f8ffff 00000000 80ffff7f     ................
	...
    9178:	ffffff00 000000f0 ff3f0000 000080ff     ..........?.....
	...
    9194:	ff000000 00e0ffff 00000000 80ffff1f     ................
	...
    91b4:	ffffff01 000000e0 ff0f0000 000080ff     ................
	...
    91d0:	ff030000 00c0ffff 00000000 c0ffff0f     ................
	...
    91f0:	ffffff03 000000c0 ff070000 0000c0ff     ................
	...
    920c:	ff070000 0080ffff 00000000 c0ffff07     ................
	...
    922c:	ffffff07 00000000 ff070000 0000c0ff     ................
	...
    9248:	ff0f0000 0000ffff 00000000 c0ffff03     ................
	...
    9268:	feffff0f 00000000 ff030000 0000c0ff     ................
	...
    9284:	ff1f0000 0000feff 00000000 c0ffff03     ................
	...
    92a4:	fcffff3f 00000000 ff070000 0000c0ff     ?...............
	...
    92c0:	ff3f0000 0000fcff 00000000 80ffff07     ..?.............
	...
    92e0:	f8ffff7f 00000000 ff070000 000080ff     ................
	...
    92fc:	ff7f0000 0000f0ff 00000000 80ffff0f     ................
	...
    931c:	f0ffffff 00000000 ff0f0000 000080ff     ................
	...
    9338:	ffff0100 0000e0ff 00000000 80ffff1f     ................
	...
    9354:	01000000 e0ffffff 00000000 ff3f0000     ..............?.
    9364:	000080ff 00000000 00000000 00000000     ................
    9374:	ffff0300 0000c0ff 00000000 00ffff7f     ................
	...
    9390:	03000000 80ffffff 00000000 ffff0100     ................
    93a0:	000000ff 00000000 00000000 00000000     ................
    93b0:	ffff0700 000080ff 07000000 00feffff     ................
	...
    93cc:	0f000000 00ffffff ffffff00 ffffffff     ................
    93dc:	000000fe 00000000 00000000 00000000     ................
    93ec:	ffff0f00 ff0000ff ffffffff 00feffff     ................
	...
    9408:	1f000000 00feffff ffff7f00 ffffffff     ................
    9418:	000000fc 00000000 00000000 00000000     ................
    9428:	ffff1f00 7f0000ff ffffffff 00fcffff     ................
	...
    9444:	3f000000 00ffffff ffff3f00 ffffffff     ...?.....?......
    9454:	000000f8 00000000 00000000 00000000     ................
    9464:	ffff3f00 3f0080ff ffffffff 00f0ffff     .?.....?........
	...
    9480:	7f000000 80ffffff ffff1f00 ffffffff     ................
    9490:	000000f0 00000000 00000000 00000000     ................
    94a0:	ffffff00 1f00c0ff ffffffff 00e0ffff     ................
	...
    94bc:	ff000000 c0ffffff ffff0f00 ffffffff     ................
    94cc:	000000c0 00000000 00000000 00000000     ................
    94dc:	ffffff01 0f00e0ff ffffffff 0080ffff     ................
	...
    94f8:	ff010000 e0ffffff ffff0700 ffffffff     ................
	...
    9518:	ffffff03 0700f0ff ffffffff 0000feff     ................
	...
    9534:	ff030000 f0ffffff ffff0300 fcffffff     ................
	...
    9554:	ffffff07 0300f8ff ffffffff 0000f8ff     ................
	...
    9570:	ff0f0000 f8ffffff ffff0100 f0ffffff     ................
	...
    9590:	ffffff0f 0100fcff ffffffff 0000c0ff     ................
	...
    95ac:	ff1f0000 fcffffff ffff0000 00ffffff     ................
	...
    95cc:	ffffff1f 0000feff ffffffff 000000fc     ................
	...
    95e8:	ff3f0000 feffffff ff7f0000 00f0ffff     ..?.............
	...
    9608:	ffffff7f 0000ffff ffffff7f 00000080     ................
	...
    9624:	ff7f0000 ffffffff ff3f0000 0000feff     ..........?.....
	...
    9644:	ffffffff 0080ffff ffffff3f 00000000     ........?.......
	...
    9660:	ffff0000 ffffffff ff1f0080 0000ffff     ................
	...
    967c:	01000000 ffffffff 00c0ffff ffffff1f     ................
    968c:	00000080 00000000 00000000 00000000     ................
    969c:	ffff0100 ffffffff ff0f00c0 0080ffff     ................
	...
    96b8:	03000000 ffffffff 00e0ffff ffffff0f     ................
    96c8:	000000c0 00000000 00000000 00000000     ................
    96d8:	ffff0700 ffffffff ff0700e0 00c0ffff     ................
	...
    96f4:	07000000 ffffffff 00f0ffff ffffff07     ................
    9704:	000000e0 00000000 00000000 00000000     ................
    9714:	ffff0f00 ffff3fff ff0300f0 00e0ffff     .....?..........
	...
    9730:	0f000000 3ffeffff 00f8ffff ffffff03     .......?........
    9740:	000000f0 00000000 00000000 00000000     ................
    9750:	ffff1f00 ffff1ffe ff0100f8 00f0ffff     ................
	...
    976c:	3f000000 1ffcffff 00fcffff ffffff01     ...?............
    977c:	000000f8 00000000 00000000 00000000     ................
    978c:	ffff3f00 ffff0ffc ff0000fc 00f8ffff     .?..............
	...
    97a8:	7f000000 0ff8ffff 00feffff ffffff00     ................
    97b8:	000000fc 00000000 00000000 00000000     ................
    97c8:	ffff7f00 ffff07f8 7f0000fe 00fcffff     ................
	...
    97e4:	ff000000 07f0ffff 00ffffff ffff7f00     ................
    97f4:	000000fe 00000000 00000000 00000000     ................
    9804:	ffffff01 ffff03e0 3f0000ff 00feffff     ...........?....
	...
    9820:	ff010000 03e0ffff 80ffffff ffff3f00     .............?..
    9830:	000000ff 00000000 00000000 00000000     ................
    9840:	ffffff01 ffff01c0 1f0080ff 00ffffff     ................
	...
    985c:	ff000000 01c0ffff c0ffffff ffff1f00     ................
    986c:	000080ff 00000000 00000000 00000000     ................
    987c:	ffffff00 ffff0080 0f00c0ff 80ffffff     ................
	...
    9898:	7f000000 0080ffff e0ffffff ffff0f00     ................
    98a8:	0000c0ff 00000000 00000000 00000000     ................
    98b8:	ffff7f00 ff7f00c0 0700e0ff c0ffffff     ................
	...
    98d4:	3f000000 00c0ffff f0ffff7f ffff0700     ...?............
    98e4:	0000e0ff 00000000 00000000 00000000     ................
    98f4:	ffff3f00 ff3f00e0 0300f0ff e0ffffff     .?....?.........
	...
    9910:	1f000000 00e0ffff f8ffff3f ffff0300     ........?.......
    9920:	0000f0ff 00000000 00000000 00000000     ................
    9930:	ffff1f00 ff1f00f0 0100f8ff f0ffffff     ................
	...
    994c:	0f000000 00f0ffff fcffff1f ffff0100     ................
    995c:	0000f8ff 00000000 00000000 00000000     ................
    996c:	ffff0f00 ff0f00f8 0000fcff f8ffffff     ................
	...
    9988:	07000000 00f8ffff feffff0f ffff0000     ................
    9998:	0000fcff 00000000 00000000 00000000     ................
    99a8:	ffff0700 ff0700fc 0000feff fcffff7f     ................
	...
    99c4:	03000000 00fcffff ffffff07 ff7f0000     ................
    99d4:	0000feff 00000000 00000000 00000000     ................
    99e4:	ffff0300 ff0300fe 0000ffff feffff3f     ............?...
	...
    9a00:	01000000 00feffff ffffff03 ff3f0080     ..............?.
    9a10:	0000ffff 00000000 00000000 00000000     ................
    9a20:	ffff0100 ff0100ff 0080ffff ffffff1f     ................
	...
    9a40:	00ffffff ffffff01 ff1f00c0 0080ffff     ................
	...
    9a5c:	ffff0000 ff0080ff 00c0ffff ffffff0f     ................
    9a6c:	00000080 00000000 00000000 00000000     ................
    9a7c:	80ffff7f ffffff00 ff0f00e0 00c0ffff     ................
	...
    9a98:	ff7f0000 7f00c0ff 00e0ffff ffffff07     ................
    9aa8:	000000c0 00000000 00000000 00000000     ................
    9ab8:	c0ffff3f ffff7f00 ff0700f0 00e0ffff     ?...............
	...
    9ad4:	ff3f0000 3f00e0ff 00f0ffff ffffff03     ..?....?........
    9ae4:	000000e0 00000000 00000000 00000000     ................
    9af4:	e0ffff1f ffff3f00 ff0300f8 00f0ffff     .....?..........
	...
    9b10:	ff1f0000 1f00f0ff 00f8ffff ffffff01     ................
    9b20:	000000f0 00000000 00000000 00000000     ................
    9b30:	f0ffff0f ffff1f00 ff0100fc 00f8ffff     ................
	...
    9b4c:	ff0f0000 0f00f8ff 00fcffff ffffff00     ................
    9b5c:	000000f8 00000000 00000000 00000000     ................
    9b6c:	f8ffff07 ffff0f00 ff0000fe 00fcffff     ................
	...
    9b88:	ff070000 0700fcff 00feffff ffff7f00     ................
    9b98:	000000fc 00000000 00000000 00000000     ................
    9ba8:	fcffff03 ffff0700 7f0000ff 00feffff     ................
	...
    9bc4:	ff030000 0300feff 00ffffff ffff3f00     .............?..
    9bd4:	000000fe 00000000 00000000 00000000     ................
    9be4:	feffff01 ffff0300 3f0080ff 00ffffff     ...........?....
	...
    9c00:	ff010000 0100ffff 80ffffff ffff1f00     ................
    9c10:	000000ff 00000000 00000000 00000000     ................
    9c20:	ffffff00 ffff0100 1f00c0ff 80ffffff     ................
	...
    9c3c:	ff000000 0080ffff c0ffffff ffff0f00     ................
    9c4c:	000080ff 00000000 00000000 00000000     ................
    9c5c:	ffff7f00 ffff0080 0f00e0ff c0ffffff     ................
	...
    9c78:	7f000000 00c0ffff e0ffff7f ffff0700     ................
    9c88:	0000c0ff 00000000 00000000 00000000     ................
    9c98:	ffff3f00 ff7f00c0 0700f0ff c0ffffff     .?..............
	...
    9d64:	6c6c6548 6f57206f 00646c72 37375453     Hello World.ST77
    9d74:	44203938 6c707369 00007961 68746957     89 Display..With
    9d84:	4d415320 4a313244 00003831 41532026      SAMD21J18..& SA
    9d94:	32324c4d 0038314a 68746957 49505320     ML22J18.With SPI
    9da4:	73754220 00000000 676f7250 6d6d6172      Bus....Programm
    9db4:	62206465 00000079 61522e4d 68736177     ed by...M.Rawash
    9dc4:	00686564 6372614d 30322068 00003032     deh.March 2020..

00009dd4 <_global_impure_ptr>:
    9dd4:	20000030                                0.. 

00009dd8 <_init>:
    9dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9dda:	46c0      	nop			; (mov r8, r8)
    9ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9dde:	bc08      	pop	{r3}
    9de0:	469e      	mov	lr, r3
    9de2:	4770      	bx	lr

00009de4 <__init_array_start>:
    9de4:	0000251d 	.word	0x0000251d

00009de8 <__frame_dummy_init_array_entry>:
    9de8:	000000dd                                ....

00009dec <_fini>:
    9dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9dee:	46c0      	nop			; (mov r8, r8)
    9df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9df2:	bc08      	pop	{r3}
    9df4:	469e      	mov	lr, r3
    9df6:	4770      	bx	lr

00009df8 <__fini_array_start>:
    9df8:	000000b5 	.word	0x000000b5
