
ST7789_Display_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009bcc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000086c  20000000  00009bcc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004e0  2000086c  0000a438  0002086c  2**2
                  ALLOC
  3 .stack        00002004  20000d4c  0000a918  0002086c  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  0002086c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020896  2**0
                  CONTENTS, READONLY
  6 .debug_info   00028de1  00000000  00000000  000208ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000392c  00000000  00000000  000496d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000d2c1  00000000  00000000  0004cffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b80  00000000  00000000  0005a2bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ef8  00000000  00000000  0005ae3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001c590  00000000  00000000  0005bd35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012adb  00000000  00000000  000782c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089c98  00000000  00000000  0008ada0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002458  00000000  00000000  00114a38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	50 2d 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     P-. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000086c 	.word	0x2000086c
      d4:	00000000 	.word	0x00000000
      d8:	00009bcc 	.word	0x00009bcc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000870 	.word	0x20000870
     108:	00009bcc 	.word	0x00009bcc
     10c:	00009bcc 	.word	0x00009bcc
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	stdio_redirect_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	000003a9 	.word	0x000003a9
     124:	00001f5d 	.word	0x00001f5d

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     12e:	4a2a      	ldr	r2, [pc, #168]	; (1d8 <Reset_Handler+0xac>)
     130:	4b2a      	ldr	r3, [pc, #168]	; (1dc <Reset_Handler+0xb0>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b29      	ldr	r3, [pc, #164]	; (1e0 <Reset_Handler+0xb4>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a29      	ldr	r2, [pc, #164]	; (1e4 <Reset_Handler+0xb8>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4823      	ldr	r0, [pc, #140]	; (1dc <Reset_Handler+0xb0>)
     14e:	4922      	ldr	r1, [pc, #136]	; (1d8 <Reset_Handler+0xac>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a23      	ldr	r2, [pc, #140]	; (1e8 <Reset_Handler+0xbc>)
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <Reset_Handler+0xc0>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	4921      	ldr	r1, [pc, #132]	; (1ec <Reset_Handler+0xc0>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a1d      	ldr	r2, [pc, #116]	; (1f0 <Reset_Handler+0xc4>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b1d      	ldr	r3, [pc, #116]	; (1f4 <Reset_Handler+0xc8>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     182:	39fd      	subs	r1, #253	; 0xfd
     184:	2390      	movs	r3, #144	; 0x90
     186:	005b      	lsls	r3, r3, #1
     188:	4a1b      	ldr	r2, [pc, #108]	; (1f8 <Reset_Handler+0xcc>)
     18a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     18c:	4a1b      	ldr	r2, [pc, #108]	; (1fc <Reset_Handler+0xd0>)
     18e:	78d3      	ldrb	r3, [r2, #3]
     190:	2503      	movs	r5, #3
     192:	43ab      	bics	r3, r5
     194:	2402      	movs	r4, #2
     196:	4323      	orrs	r3, r4
     198:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     19a:	78d3      	ldrb	r3, [r2, #3]
     19c:	270c      	movs	r7, #12
     19e:	43bb      	bics	r3, r7
     1a0:	2608      	movs	r6, #8
     1a2:	4333      	orrs	r3, r6
     1a4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a6:	4b16      	ldr	r3, [pc, #88]	; (200 <Reset_Handler+0xd4>)
     1a8:	7b98      	ldrb	r0, [r3, #14]
     1aa:	2230      	movs	r2, #48	; 0x30
     1ac:	4390      	bics	r0, r2
     1ae:	2220      	movs	r2, #32
     1b0:	4310      	orrs	r0, r2
     1b2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b4:	7b99      	ldrb	r1, [r3, #14]
     1b6:	43b9      	bics	r1, r7
     1b8:	4331      	orrs	r1, r6
     1ba:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1bc:	7b9a      	ldrb	r2, [r3, #14]
     1be:	43aa      	bics	r2, r5
     1c0:	4322      	orrs	r2, r4
     1c2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c4:	4a0f      	ldr	r2, [pc, #60]	; (204 <Reset_Handler+0xd8>)
     1c6:	6853      	ldr	r3, [r2, #4]
     1c8:	2180      	movs	r1, #128	; 0x80
     1ca:	430b      	orrs	r3, r1
     1cc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ce:	4b0e      	ldr	r3, [pc, #56]	; (208 <Reset_Handler+0xdc>)
     1d0:	4798      	blx	r3
        main();
     1d2:	4b0e      	ldr	r3, [pc, #56]	; (20c <Reset_Handler+0xe0>)
     1d4:	4798      	blx	r3
     1d6:	e7fe      	b.n	1d6 <Reset_Handler+0xaa>
     1d8:	00009bcc 	.word	0x00009bcc
     1dc:	20000000 	.word	0x20000000
     1e0:	2000086c 	.word	0x2000086c
     1e4:	20000004 	.word	0x20000004
     1e8:	2000086c 	.word	0x2000086c
     1ec:	20000d4c 	.word	0x20000d4c
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	00002095 	.word	0x00002095
     20c:	00001dd9 	.word	0x00001dd9

00000210 <SPI_Display_PORT_init>:
struct spi_m_sync_descriptor SPI_Display;

struct usart_sync_descriptor TARGET_IO;

void SPI_Display_PORT_init(void)
{
     210:	b5f0      	push	{r4, r5, r6, r7, lr}
     212:	46c6      	mov	lr, r8
     214:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     216:	24c0      	movs	r4, #192	; 0xc0
     218:	05e4      	lsls	r4, r4, #23
     21a:	2310      	movs	r3, #16
     21c:	6063      	str	r3, [r4, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     21e:	4b23      	ldr	r3, [pc, #140]	; (2ac <SPI_Display_PORT_init+0x9c>)
     220:	4a23      	ldr	r2, [pc, #140]	; (2b0 <SPI_Display_PORT_init+0xa0>)
     222:	629a      	str	r2, [r3, #40]	; 0x28
     224:	4a23      	ldr	r2, [pc, #140]	; (2b4 <SPI_Display_PORT_init+0xa4>)
     226:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     228:	2144      	movs	r1, #68	; 0x44
     22a:	5c5a      	ldrb	r2, [r3, r1]
     22c:	2004      	movs	r0, #4
     22e:	4382      	bics	r2, r0
     230:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     232:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     234:	2601      	movs	r6, #1
     236:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     238:	2501      	movs	r5, #1
     23a:	432a      	orrs	r2, r5
     23c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     23e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     240:	3912      	subs	r1, #18
     242:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     244:	300b      	adds	r0, #11
     246:	4684      	mov	ip, r0
     248:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     24a:	2703      	movs	r7, #3
     24c:	433a      	orrs	r2, r7
     24e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     250:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     252:	2240      	movs	r2, #64	; 0x40
     254:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     256:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     258:	4a17      	ldr	r2, [pc, #92]	; (2b8 <SPI_Display_PORT_init+0xa8>)
     25a:	629a      	str	r2, [r3, #40]	; 0x28
     25c:	22c0      	movs	r2, #192	; 0xc0
     25e:	0612      	lsls	r2, r2, #24
     260:	4690      	mov	r8, r2
     262:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     264:	3114      	adds	r1, #20
     266:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     268:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     26a:	4328      	orrs	r0, r5
     26c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     26e:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     270:	2033      	movs	r0, #51	; 0x33
     272:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     274:	4662      	mov	r2, ip
     276:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     278:	4339      	orrs	r1, r7
     27a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     27c:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     27e:	2180      	movs	r1, #128	; 0x80
     280:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     282:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     284:	490d      	ldr	r1, [pc, #52]	; (2bc <SPI_Display_PORT_init+0xac>)
     286:	6299      	str	r1, [r3, #40]	; 0x28
     288:	4642      	mov	r2, r8
     28a:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     28c:	2147      	movs	r1, #71	; 0x47
     28e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     290:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     292:	432a      	orrs	r2, r5
     294:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     296:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     298:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     29a:	3938      	subs	r1, #56	; 0x38
     29c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     29e:	3121      	adds	r1, #33	; 0x21
     2a0:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2a2:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA07, PINMUX_PA07D_SERCOM0_PAD3);
}
     2a4:	bc04      	pop	{r2}
     2a6:	4690      	mov	r8, r2
     2a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2aa:	46c0      	nop			; (mov r8, r8)
     2ac:	41004400 	.word	0x41004400
     2b0:	40020010 	.word	0x40020010
     2b4:	c0020000 	.word	0xc0020000
     2b8:	40000040 	.word	0x40000040
     2bc:	40000080 	.word	0x40000080

000002c0 <SPI_Display_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     2c0:	4a04      	ldr	r2, [pc, #16]	; (2d4 <SPI_Display_CLOCK_init+0x14>)
     2c2:	6a13      	ldr	r3, [r2, #32]
     2c4:	2104      	movs	r1, #4
     2c6:	430b      	orrs	r3, r1
     2c8:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     2ca:	4a03      	ldr	r2, [pc, #12]	; (2d8 <SPI_Display_CLOCK_init+0x18>)
     2cc:	4b03      	ldr	r3, [pc, #12]	; (2dc <SPI_Display_CLOCK_init+0x1c>)
     2ce:	805a      	strh	r2, [r3, #2]

void SPI_Display_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     2d0:	4770      	bx	lr
     2d2:	46c0      	nop			; (mov r8, r8)
     2d4:	40000400 	.word	0x40000400
     2d8:	00004014 	.word	0x00004014
     2dc:	40000c00 	.word	0x40000c00

000002e0 <SPI_Display_init>:

void SPI_Display_init(void)
{
     2e0:	b510      	push	{r4, lr}
	SPI_Display_CLOCK_init();
     2e2:	4b04      	ldr	r3, [pc, #16]	; (2f4 <SPI_Display_init+0x14>)
     2e4:	4798      	blx	r3
	spi_m_sync_init(&SPI_Display, SERCOM0);
     2e6:	4904      	ldr	r1, [pc, #16]	; (2f8 <SPI_Display_init+0x18>)
     2e8:	4804      	ldr	r0, [pc, #16]	; (2fc <SPI_Display_init+0x1c>)
     2ea:	4b05      	ldr	r3, [pc, #20]	; (300 <SPI_Display_init+0x20>)
     2ec:	4798      	blx	r3
	SPI_Display_PORT_init();
     2ee:	4b05      	ldr	r3, [pc, #20]	; (304 <SPI_Display_init+0x24>)
     2f0:	4798      	blx	r3
}
     2f2:	bd10      	pop	{r4, pc}
     2f4:	000002c1 	.word	0x000002c1
     2f8:	42000800 	.word	0x42000800
     2fc:	200008d4 	.word	0x200008d4
     300:	000011ad 	.word	0x000011ad
     304:	00000211 	.word	0x00000211

00000308 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     308:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     30a:	4b0e      	ldr	r3, [pc, #56]	; (344 <TARGET_IO_PORT_init+0x3c>)
     30c:	2256      	movs	r2, #86	; 0x56
     30e:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     310:	2501      	movs	r5, #1
     312:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     314:	2401      	movs	r4, #1
     316:	4321      	orrs	r1, r4
     318:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     31a:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     31c:	203b      	movs	r0, #59	; 0x3b
     31e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     320:	3a47      	subs	r2, #71	; 0x47
     322:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     324:	3a0d      	subs	r2, #13
     326:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     328:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     32a:	2157      	movs	r1, #87	; 0x57
     32c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     32e:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     330:	4322      	orrs	r2, r4
     332:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     334:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     336:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     338:	3948      	subs	r1, #72	; 0x48
     33a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     33c:	3111      	adds	r1, #17
     33e:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     340:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     342:	bd30      	pop	{r4, r5, pc}
     344:	41004400 	.word	0x41004400

00000348 <TARGET_IO_CLOCK_init>:
     348:	4a04      	ldr	r2, [pc, #16]	; (35c <TARGET_IO_CLOCK_init+0x14>)
     34a:	6a13      	ldr	r3, [r2, #32]
     34c:	2120      	movs	r1, #32
     34e:	430b      	orrs	r3, r1
     350:	6213      	str	r3, [r2, #32]
     352:	4a03      	ldr	r2, [pc, #12]	; (360 <TARGET_IO_CLOCK_init+0x18>)
     354:	4b03      	ldr	r3, [pc, #12]	; (364 <TARGET_IO_CLOCK_init+0x1c>)
     356:	805a      	strh	r2, [r3, #2]

void TARGET_IO_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     358:	4770      	bx	lr
     35a:	46c0      	nop			; (mov r8, r8)
     35c:	40000400 	.word	0x40000400
     360:	00004017 	.word	0x00004017
     364:	40000c00 	.word	0x40000c00

00000368 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     368:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     36a:	4b05      	ldr	r3, [pc, #20]	; (380 <TARGET_IO_init+0x18>)
     36c:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM3, (void *)NULL);
     36e:	2200      	movs	r2, #0
     370:	4904      	ldr	r1, [pc, #16]	; (384 <TARGET_IO_init+0x1c>)
     372:	4805      	ldr	r0, [pc, #20]	; (388 <TARGET_IO_init+0x20>)
     374:	4b05      	ldr	r3, [pc, #20]	; (38c <TARGET_IO_init+0x24>)
     376:	4798      	blx	r3
	TARGET_IO_PORT_init();
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <TARGET_IO_init+0x28>)
     37a:	4798      	blx	r3
}
     37c:	bd10      	pop	{r4, pc}
     37e:	46c0      	nop			; (mov r8, r8)
     380:	00000349 	.word	0x00000349
     384:	42001400 	.word	0x42001400
     388:	200008c8 	.word	0x200008c8
     38c:	000013fd 	.word	0x000013fd
     390:	00000309 	.word	0x00000309

00000394 <delay_driver_init>:

void delay_driver_init(void)
{
     394:	b510      	push	{r4, lr}
	delay_init(SysTick);
     396:	4802      	ldr	r0, [pc, #8]	; (3a0 <delay_driver_init+0xc>)
     398:	4b02      	ldr	r3, [pc, #8]	; (3a4 <delay_driver_init+0x10>)
     39a:	4798      	blx	r3
}
     39c:	bd10      	pop	{r4, pc}
     39e:	46c0      	nop			; (mov r8, r8)
     3a0:	e000e010 	.word	0xe000e010
     3a4:	00001111 	.word	0x00001111

000003a8 <system_init>:

void system_init(void)
{
     3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3aa:	46c6      	mov	lr, r8
     3ac:	b500      	push	{lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     3ae:	4b2d      	ldr	r3, [pc, #180]	; (464 <system_init+0xbc>)
     3b0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3b2:	22c0      	movs	r2, #192	; 0xc0
     3b4:	05d2      	lsls	r2, r2, #23
     3b6:	2320      	movs	r3, #32
     3b8:	6193      	str	r3, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3ba:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3bc:	4b2a      	ldr	r3, [pc, #168]	; (468 <system_init+0xc0>)
     3be:	492b      	ldr	r1, [pc, #172]	; (46c <system_init+0xc4>)
     3c0:	6299      	str	r1, [r3, #40]	; 0x28
     3c2:	25c0      	movs	r5, #192	; 0xc0
     3c4:	062d      	lsls	r5, r5, #24
     3c6:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c8:	2445      	movs	r4, #69	; 0x45
     3ca:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3cc:	2001      	movs	r0, #1
     3ce:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d0:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3d2:	2108      	movs	r1, #8
     3d4:	3453      	adds	r4, #83	; 0x53
     3d6:	5111      	str	r1, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3d8:	3c10      	subs	r4, #16
     3da:	46a0      	mov	r8, r4
     3dc:	5111      	str	r1, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3de:	31a0      	adds	r1, #160	; 0xa0
     3e0:	4e23      	ldr	r6, [pc, #140]	; (470 <system_init+0xc8>)
     3e2:	505e      	str	r6, [r3, r1]
     3e4:	505d      	str	r5, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3e6:	27c3      	movs	r7, #195	; 0xc3
     3e8:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ea:	4386      	bics	r6, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ec:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3ee:	3fb3      	subs	r7, #179	; 0xb3
     3f0:	2684      	movs	r6, #132	; 0x84
     3f2:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3f4:	4e1f      	ldr	r6, [pc, #124]	; (474 <system_init+0xcc>)
     3f6:	505e      	str	r6, [r3, r1]
     3f8:	4e1f      	ldr	r6, [pc, #124]	; (478 <system_init+0xd0>)
     3fa:	505e      	str	r6, [r3, r1]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3fc:	26c4      	movs	r6, #196	; 0xc4
     3fe:	5d9f      	ldrb	r7, [r3, r6]
     400:	3c84      	subs	r4, #132	; 0x84
     402:	43a7      	bics	r7, r4
     404:	559f      	strb	r7, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     406:	5d9f      	ldrb	r7, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     408:	4387      	bics	r7, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     40a:	559f      	strb	r7, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     40c:	3e30      	subs	r6, #48	; 0x30
     40e:	2740      	movs	r7, #64	; 0x40
     410:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     412:	4644      	mov	r4, r8
     414:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     416:	4f19      	ldr	r7, [pc, #100]	; (47c <system_init+0xd4>)
     418:	505f      	str	r7, [r3, r1]
     41a:	505d      	str	r5, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     41c:	343e      	adds	r4, #62	; 0x3e
     41e:	5d1f      	ldrb	r7, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     420:	4387      	bics	r7, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     422:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     424:	2780      	movs	r7, #128	; 0x80
     426:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     428:	4644      	mov	r4, r8
     42a:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     42c:	4f14      	ldr	r7, [pc, #80]	; (480 <system_init+0xd8>)
     42e:	505f      	str	r7, [r3, r1]
     430:	505d      	str	r5, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     432:	27c7      	movs	r7, #199	; 0xc7
     434:	5ddd      	ldrb	r5, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     436:	4385      	bics	r5, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     438:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     43a:	2580      	movs	r5, #128	; 0x80
     43c:	05ed      	lsls	r5, r5, #23
     43e:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     440:	5115      	str	r5, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     442:	505d      	str	r5, [r3, r1]
     444:	4a0f      	ldr	r2, [pc, #60]	; (484 <system_init+0xdc>)
     446:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     448:	3136      	adds	r1, #54	; 0x36
     44a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     44c:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     44e:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	SPI_Display_init();
     450:	4b0d      	ldr	r3, [pc, #52]	; (488 <system_init+0xe0>)
     452:	4798      	blx	r3

	TARGET_IO_init();
     454:	4b0d      	ldr	r3, [pc, #52]	; (48c <system_init+0xe4>)
     456:	4798      	blx	r3

	delay_driver_init();
     458:	4b0d      	ldr	r3, [pc, #52]	; (490 <system_init+0xe8>)
     45a:	4798      	blx	r3
}
     45c:	bc04      	pop	{r2}
     45e:	4690      	mov	r8, r2
     460:	bdf0      	pop	{r4, r5, r6, r7, pc}
     462:	46c0      	nop			; (mov r8, r8)
     464:	000014bd 	.word	0x000014bd
     468:	41004400 	.word	0x41004400
     46c:	40000020 	.word	0x40000020
     470:	40000008 	.word	0x40000008
     474:	40020010 	.word	0x40020010
     478:	c0020000 	.word	0xc0020000
     47c:	40000040 	.word	0x40000040
     480:	40000080 	.word	0x40000080
     484:	c0004000 	.word	0xc0004000
     488:	000002e1 	.word	0x000002e1
     48c:	00000369 	.word	0x00000369
     490:	00000395 	.word	0x00000395

00000494 <ST7789_SendCommand>:
		 ST7789_dtime_delay_ms(120);
		 ST7789_SendCommand(st7789,0x29);    //Display on
	return 0;
}
void ST7789_SendCommand(struct ST7789_param *st7789,uint8_t command)
{
     494:	b510      	push	{r4, lr}
     496:	0004      	movs	r4, r0
	/*set DC pin to low  */
	st7789->data[0]=command;
     498:	7281      	strb	r1, [r0, #10]
	set_ST7789_SPI_driver_pin(st7789->dc_pin,false);
     49a:	7880      	ldrb	r0, [r0, #2]
     49c:	2100      	movs	r1, #0
     49e:	4b03      	ldr	r3, [pc, #12]	; (4ac <ST7789_SendCommand+0x18>)
     4a0:	4798      	blx	r3
	spi_send_cmd_ST7789(st7789);
     4a2:	0020      	movs	r0, r4
     4a4:	4b02      	ldr	r3, [pc, #8]	; (4b0 <ST7789_SendCommand+0x1c>)
     4a6:	4798      	blx	r3
}
     4a8:	bd10      	pop	{r4, pc}
     4aa:	46c0      	nop			; (mov r8, r8)
     4ac:	000007f1 	.word	0x000007f1
     4b0:	0000081d 	.word	0x0000081d

000004b4 <ST7789_SendData>:
void ST7789_SendData(struct ST7789_param *st7789,uint8_t data)
{
     4b4:	b510      	push	{r4, lr}
     4b6:	0004      	movs	r4, r0
	/*set DC pin to high  */
	st7789->data[0]=data;
     4b8:	7281      	strb	r1, [r0, #10]
	set_ST7789_SPI_driver_pin(st7789->dc_pin,true);
     4ba:	7880      	ldrb	r0, [r0, #2]
     4bc:	2101      	movs	r1, #1
     4be:	4b03      	ldr	r3, [pc, #12]	; (4cc <ST7789_SendData+0x18>)
     4c0:	4798      	blx	r3
	spi_send_cmd_ST7789(st7789);
     4c2:	0020      	movs	r0, r4
     4c4:	4b02      	ldr	r3, [pc, #8]	; (4d0 <ST7789_SendData+0x1c>)
     4c6:	4798      	blx	r3
}
     4c8:	bd10      	pop	{r4, pc}
     4ca:	46c0      	nop			; (mov r8, r8)
     4cc:	000007f1 	.word	0x000007f1
     4d0:	0000081d 	.word	0x0000081d

000004d4 <ST7789_Sendspiburst>:
void ST7789_Sendspiburst(struct ST7789_param *st7789,uint8_t dc_status)
{
     4d4:	b510      	push	{r4, lr}
     4d6:	0004      	movs	r4, r0
	set_ST7789_SPI_driver_pin(st7789->dc_pin,dc_status);
     4d8:	7880      	ldrb	r0, [r0, #2]
     4da:	4b03      	ldr	r3, [pc, #12]	; (4e8 <ST7789_Sendspiburst+0x14>)
     4dc:	4798      	blx	r3
	spi_transfer_ST7789(st7789);
     4de:	0020      	movs	r0, r4
     4e0:	4b02      	ldr	r3, [pc, #8]	; (4ec <ST7789_Sendspiburst+0x18>)
     4e2:	4798      	blx	r3
}
     4e4:	bd10      	pop	{r4, pc}
     4e6:	46c0      	nop			; (mov r8, r8)
     4e8:	000007f1 	.word	0x000007f1
     4ec:	0000085d 	.word	0x0000085d

000004f0 <ST7789_Reset>:
void ST7789_Reset(struct ST7789_param *st7789)
{
     4f0:	b570      	push	{r4, r5, r6, lr}
     4f2:	0006      	movs	r6, r0
	set_ST7789_SPI_driver_pin(st7789->rst_pin,true);
     4f4:	78c0      	ldrb	r0, [r0, #3]
     4f6:	2101      	movs	r1, #1
     4f8:	4d07      	ldr	r5, [pc, #28]	; (518 <ST7789_Reset+0x28>)
     4fa:	47a8      	blx	r5
	ST7789_dtime_delay_ms(10);
     4fc:	200a      	movs	r0, #10
     4fe:	4c07      	ldr	r4, [pc, #28]	; (51c <ST7789_Reset+0x2c>)
     500:	47a0      	blx	r4
	set_ST7789_SPI_driver_pin(st7789->rst_pin,false);
     502:	78f0      	ldrb	r0, [r6, #3]
     504:	2100      	movs	r1, #0
     506:	47a8      	blx	r5
	ST7789_dtime_delay_ms(25);
     508:	2019      	movs	r0, #25
     50a:	47a0      	blx	r4
	set_ST7789_SPI_driver_pin(st7789->rst_pin,true);
     50c:	78f0      	ldrb	r0, [r6, #3]
     50e:	2101      	movs	r1, #1
     510:	47a8      	blx	r5
	ST7789_dtime_delay_ms(100);
     512:	2064      	movs	r0, #100	; 0x64
     514:	47a0      	blx	r4
}
     516:	bd70      	pop	{r4, r5, r6, pc}
     518:	000007f1 	.word	0x000007f1
     51c:	00000811 	.word	0x00000811

00000520 <ST7789_Init>:
{
     520:	b570      	push	{r4, r5, r6, lr}
     522:	0004      	movs	r4, r0
     524:	a804      	add	r0, sp, #16
     526:	7800      	ldrb	r0, [r0, #0]
     528:	ad05      	add	r5, sp, #20
     52a:	782d      	ldrb	r5, [r5, #0]
	st7789->cs_pin=CS_pin;
     52c:	7023      	strb	r3, [r4, #0]
	st7789->rst_pin=RST_pin;
     52e:	70e5      	strb	r5, [r4, #3]
	st7789->dc_pin=DC_pin;
     530:	70a0      	strb	r0, [r4, #2]
	st7789->busy_pin=0;/*no busy pin available here*/
     532:	2300      	movs	r3, #0
     534:	7063      	strb	r3, [r4, #1]
	st7789->height=Disp_Height;
     536:	8121      	strh	r1, [r4, #8]
	st7789->width =Disp_Width;
     538:	80e2      	strh	r2, [r4, #6]
	st7789->data_size=1;
     53a:	2201      	movs	r2, #1
     53c:	4b6f      	ldr	r3, [pc, #444]	; (6fc <ST7789_Init+0x1dc>)
     53e:	52e2      	strh	r2, [r4, r3]
	st7789->buf_size=2;
     540:	3201      	adds	r2, #1
     542:	3b02      	subs	r3, #2
     544:	52e2      	strh	r2, [r4, r3]
	Font8.Height=8;
     546:	4b6e      	ldr	r3, [pc, #440]	; (700 <ST7789_Init+0x1e0>)
     548:	3206      	adds	r2, #6
     54a:	80da      	strh	r2, [r3, #6]
	Font8.Width =5;
     54c:	2105      	movs	r1, #5
     54e:	8099      	strh	r1, [r3, #4]
	Font12.Height=12;
     550:	4b6c      	ldr	r3, [pc, #432]	; (704 <ST7789_Init+0x1e4>)
     552:	3107      	adds	r1, #7
     554:	80d9      	strh	r1, [r3, #6]
	Font12.Width=8;
     556:	809a      	strh	r2, [r3, #4]
	Font16.Height=16;
     558:	4b6b      	ldr	r3, [pc, #428]	; (708 <ST7789_Init+0x1e8>)
     55a:	3208      	adds	r2, #8
     55c:	80da      	strh	r2, [r3, #6]
	Font16.Width=11;
     55e:	3a05      	subs	r2, #5
     560:	809a      	strh	r2, [r3, #4]
	Font20.Height=20;
     562:	4b6a      	ldr	r3, [pc, #424]	; (70c <ST7789_Init+0x1ec>)
     564:	3209      	adds	r2, #9
     566:	80da      	strh	r2, [r3, #6]
	Font20.Width=14;
     568:	3a06      	subs	r2, #6
     56a:	809a      	strh	r2, [r3, #4]
	ST7789_SPI_driver_init(st7789);
     56c:	0020      	movs	r0, r4
     56e:	4b68      	ldr	r3, [pc, #416]	; (710 <ST7789_Init+0x1f0>)
     570:	4798      	blx	r3
	ST7789_Reset(st7789);
     572:	0020      	movs	r0, r4
     574:	4b67      	ldr	r3, [pc, #412]	; (714 <ST7789_Init+0x1f4>)
     576:	4798      	blx	r3
		 ST7789_SendCommand(st7789,0x36);
     578:	2136      	movs	r1, #54	; 0x36
     57a:	0020      	movs	r0, r4
     57c:	4e66      	ldr	r6, [pc, #408]	; (718 <ST7789_Init+0x1f8>)
     57e:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x00);
     580:	2100      	movs	r1, #0
     582:	0020      	movs	r0, r4
     584:	4d65      	ldr	r5, [pc, #404]	; (71c <ST7789_Init+0x1fc>)
     586:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0x3A);
     588:	213a      	movs	r1, #58	; 0x3a
     58a:	0020      	movs	r0, r4
     58c:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x05);
     58e:	2105      	movs	r1, #5
     590:	0020      	movs	r0, r4
     592:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xB2);
     594:	21b2      	movs	r1, #178	; 0xb2
     596:	0020      	movs	r0, r4
     598:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x0C);
     59a:	210c      	movs	r1, #12
     59c:	0020      	movs	r0, r4
     59e:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x0C);
     5a0:	210c      	movs	r1, #12
     5a2:	0020      	movs	r0, r4
     5a4:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x00);
     5a6:	2100      	movs	r1, #0
     5a8:	0020      	movs	r0, r4
     5aa:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x33);
     5ac:	2133      	movs	r1, #51	; 0x33
     5ae:	0020      	movs	r0, r4
     5b0:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x33);
     5b2:	2133      	movs	r1, #51	; 0x33
     5b4:	0020      	movs	r0, r4
     5b6:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xB7);
     5b8:	21b7      	movs	r1, #183	; 0xb7
     5ba:	0020      	movs	r0, r4
     5bc:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x35);
     5be:	2135      	movs	r1, #53	; 0x35
     5c0:	0020      	movs	r0, r4
     5c2:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xBB);
     5c4:	21bb      	movs	r1, #187	; 0xbb
     5c6:	0020      	movs	r0, r4
     5c8:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x19);
     5ca:	2119      	movs	r1, #25
     5cc:	0020      	movs	r0, r4
     5ce:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xC0);
     5d0:	21c0      	movs	r1, #192	; 0xc0
     5d2:	0020      	movs	r0, r4
     5d4:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x2C);
     5d6:	212c      	movs	r1, #44	; 0x2c
     5d8:	0020      	movs	r0, r4
     5da:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xC2);
     5dc:	21c2      	movs	r1, #194	; 0xc2
     5de:	0020      	movs	r0, r4
     5e0:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x01);
     5e2:	2101      	movs	r1, #1
     5e4:	0020      	movs	r0, r4
     5e6:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xC3);
     5e8:	21c3      	movs	r1, #195	; 0xc3
     5ea:	0020      	movs	r0, r4
     5ec:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x12);
     5ee:	2112      	movs	r1, #18
     5f0:	0020      	movs	r0, r4
     5f2:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xC4);
     5f4:	21c4      	movs	r1, #196	; 0xc4
     5f6:	0020      	movs	r0, r4
     5f8:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x20);
     5fa:	2120      	movs	r1, #32
     5fc:	0020      	movs	r0, r4
     5fe:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xC6);
     600:	21c6      	movs	r1, #198	; 0xc6
     602:	0020      	movs	r0, r4
     604:	47b0      	blx	r6
		 ST7789_SendData(st7789,0x0F);
     606:	210f      	movs	r1, #15
     608:	0020      	movs	r0, r4
     60a:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xD0);
     60c:	21d0      	movs	r1, #208	; 0xd0
     60e:	0020      	movs	r0, r4
     610:	47b0      	blx	r6
		 ST7789_SendData(st7789,0xA4);
     612:	21a4      	movs	r1, #164	; 0xa4
     614:	0020      	movs	r0, r4
     616:	47a8      	blx	r5
		 ST7789_SendData(st7789,0xA1);
     618:	21a1      	movs	r1, #161	; 0xa1
     61a:	0020      	movs	r0, r4
     61c:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xE0);
     61e:	21e0      	movs	r1, #224	; 0xe0
     620:	0020      	movs	r0, r4
     622:	47b0      	blx	r6
		 ST7789_SendData(st7789,0xD0);
     624:	21d0      	movs	r1, #208	; 0xd0
     626:	0020      	movs	r0, r4
     628:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x04);
     62a:	2104      	movs	r1, #4
     62c:	0020      	movs	r0, r4
     62e:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x0D);
     630:	210d      	movs	r1, #13
     632:	0020      	movs	r0, r4
     634:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x11);
     636:	2111      	movs	r1, #17
     638:	0020      	movs	r0, r4
     63a:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x13);
     63c:	2113      	movs	r1, #19
     63e:	0020      	movs	r0, r4
     640:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x2B);
     642:	212b      	movs	r1, #43	; 0x2b
     644:	0020      	movs	r0, r4
     646:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x3F);
     648:	213f      	movs	r1, #63	; 0x3f
     64a:	0020      	movs	r0, r4
     64c:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x54);
     64e:	2154      	movs	r1, #84	; 0x54
     650:	0020      	movs	r0, r4
     652:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x4C);
     654:	214c      	movs	r1, #76	; 0x4c
     656:	0020      	movs	r0, r4
     658:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x18);
     65a:	2118      	movs	r1, #24
     65c:	0020      	movs	r0, r4
     65e:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x0D);
     660:	210d      	movs	r1, #13
     662:	0020      	movs	r0, r4
     664:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x0B);
     666:	210b      	movs	r1, #11
     668:	0020      	movs	r0, r4
     66a:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x1F);
     66c:	211f      	movs	r1, #31
     66e:	0020      	movs	r0, r4
     670:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x23);
     672:	2123      	movs	r1, #35	; 0x23
     674:	0020      	movs	r0, r4
     676:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0xE1);
     678:	21e1      	movs	r1, #225	; 0xe1
     67a:	0020      	movs	r0, r4
     67c:	47b0      	blx	r6
		 ST7789_SendData(st7789,0xD0);
     67e:	21d0      	movs	r1, #208	; 0xd0
     680:	0020      	movs	r0, r4
     682:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x04);
     684:	2104      	movs	r1, #4
     686:	0020      	movs	r0, r4
     688:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x0C);
     68a:	210c      	movs	r1, #12
     68c:	0020      	movs	r0, r4
     68e:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x11);
     690:	2111      	movs	r1, #17
     692:	0020      	movs	r0, r4
     694:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x13);
     696:	2113      	movs	r1, #19
     698:	0020      	movs	r0, r4
     69a:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x2C);
     69c:	212c      	movs	r1, #44	; 0x2c
     69e:	0020      	movs	r0, r4
     6a0:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x3F);
     6a2:	213f      	movs	r1, #63	; 0x3f
     6a4:	0020      	movs	r0, r4
     6a6:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x44);
     6a8:	2144      	movs	r1, #68	; 0x44
     6aa:	0020      	movs	r0, r4
     6ac:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x51);
     6ae:	2151      	movs	r1, #81	; 0x51
     6b0:	0020      	movs	r0, r4
     6b2:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x2F);
     6b4:	212f      	movs	r1, #47	; 0x2f
     6b6:	0020      	movs	r0, r4
     6b8:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x1F);
     6ba:	211f      	movs	r1, #31
     6bc:	0020      	movs	r0, r4
     6be:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x1F);
     6c0:	211f      	movs	r1, #31
     6c2:	0020      	movs	r0, r4
     6c4:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x20);
     6c6:	2120      	movs	r1, #32
     6c8:	0020      	movs	r0, r4
     6ca:	47a8      	blx	r5
		 ST7789_SendData(st7789,0x23);
     6cc:	2123      	movs	r1, #35	; 0x23
     6ce:	0020      	movs	r0, r4
     6d0:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0x21);
     6d2:	2121      	movs	r1, #33	; 0x21
     6d4:	0020      	movs	r0, r4
     6d6:	47b0      	blx	r6
		 set_ST7789_SPI_driver_pin(st7789->cs_pin,true);
     6d8:	7820      	ldrb	r0, [r4, #0]
     6da:	2101      	movs	r1, #1
     6dc:	4d10      	ldr	r5, [pc, #64]	; (720 <ST7789_Init+0x200>)
     6de:	47a8      	blx	r5
		 set_ST7789_SPI_driver_pin(st7789->cs_pin,false);
     6e0:	7820      	ldrb	r0, [r4, #0]
     6e2:	2100      	movs	r1, #0
     6e4:	47a8      	blx	r5
		 ST7789_SendCommand(st7789,0x11);    //Exit Sleep
     6e6:	2111      	movs	r1, #17
     6e8:	0020      	movs	r0, r4
     6ea:	47b0      	blx	r6
		 ST7789_dtime_delay_ms(120);
     6ec:	2078      	movs	r0, #120	; 0x78
     6ee:	4b0d      	ldr	r3, [pc, #52]	; (724 <ST7789_Init+0x204>)
     6f0:	4798      	blx	r3
		 ST7789_SendCommand(st7789,0x29);    //Display on
     6f2:	2129      	movs	r1, #41	; 0x29
     6f4:	0020      	movs	r0, r4
     6f6:	47b0      	blx	r6
}
     6f8:	2000      	movs	r0, #0
     6fa:	bd70      	pop	{r4, r5, r6, pc}
     6fc:	0000020e 	.word	0x0000020e
     700:	20000020 	.word	0x20000020
     704:	20000000 	.word	0x20000000
     708:	20000008 	.word	0x20000008
     70c:	20000010 	.word	0x20000010
     710:	000007a9 	.word	0x000007a9
     714:	000004f1 	.word	0x000004f1
     718:	00000495 	.word	0x00000495
     71c:	000004b5 	.word	0x000004b5
     720:	000007f1 	.word	0x000007f1
     724:	00000811 	.word	0x00000811

00000728 <ST7789_setAddrWindow>:
void ST7789_setAddrWindow(struct ST7789_param *st7789,uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
     728:	b5f0      	push	{r4, r5, r6, r7, lr}
     72a:	b085      	sub	sp, #20
     72c:	0004      	movs	r4, r0
     72e:	000e      	movs	r6, r1
     730:	9201      	str	r2, [sp, #4]
     732:	9302      	str	r3, [sp, #8]
     734:	ab0a      	add	r3, sp, #40	; 0x28
     736:	881f      	ldrh	r7, [r3, #0]
	ST7789_SendCommand(st7789,ST7789_CASET); // Column addr set
     738:	212a      	movs	r1, #42	; 0x2a
     73a:	4d14      	ldr	r5, [pc, #80]	; (78c <ST7789_setAddrWindow+0x64>)
     73c:	47a8      	blx	r5
	ST7789_SendData(st7789,x0 >> 8);
     73e:	9603      	str	r6, [sp, #12]
     740:	0a31      	lsrs	r1, r6, #8
     742:	0020      	movs	r0, r4
     744:	4e12      	ldr	r6, [pc, #72]	; (790 <ST7789_setAddrWindow+0x68>)
     746:	47b0      	blx	r6
	ST7789_SendData(st7789,x0 & 0xFF);     // XSTART
     748:	466b      	mov	r3, sp
     74a:	7b19      	ldrb	r1, [r3, #12]
     74c:	0020      	movs	r0, r4
     74e:	47b0      	blx	r6
	ST7789_SendData(st7789,x1 >> 8);
     750:	9b02      	ldr	r3, [sp, #8]
     752:	0a19      	lsrs	r1, r3, #8
     754:	0020      	movs	r0, r4
     756:	47b0      	blx	r6
	ST7789_SendData(st7789,x1 & 0xFF);     // XEND
     758:	466b      	mov	r3, sp
     75a:	7a19      	ldrb	r1, [r3, #8]
     75c:	0020      	movs	r0, r4
     75e:	47b0      	blx	r6

	ST7789_SendCommand(st7789,ST7789_PASET); // Row addr set
     760:	212b      	movs	r1, #43	; 0x2b
     762:	0020      	movs	r0, r4
     764:	47a8      	blx	r5
	ST7789_SendData(st7789,y0>>8);
     766:	9b01      	ldr	r3, [sp, #4]
     768:	0a19      	lsrs	r1, r3, #8
     76a:	0020      	movs	r0, r4
     76c:	47b0      	blx	r6
	ST7789_SendData(st7789,y0);     // YSTART
     76e:	466b      	mov	r3, sp
     770:	7919      	ldrb	r1, [r3, #4]
     772:	0020      	movs	r0, r4
     774:	47b0      	blx	r6
	ST7789_SendData(st7789,y1>>8);
     776:	0a39      	lsrs	r1, r7, #8
     778:	0020      	movs	r0, r4
     77a:	47b0      	blx	r6
	ST7789_SendData(st7789,y1);     // YEND
     77c:	b2f9      	uxtb	r1, r7
     77e:	0020      	movs	r0, r4
     780:	47b0      	blx	r6

	ST7789_SendCommand(st7789,ST7789_RAMWR); // write to RAM
     782:	212c      	movs	r1, #44	; 0x2c
     784:	0020      	movs	r0, r4
     786:	47a8      	blx	r5
}
     788:	b005      	add	sp, #20
     78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     78c:	00000495 	.word	0x00000495
     790:	000004b5 	.word	0x000004b5

00000794 <ST7789_color565>:

uint16_t ST7789_color565(struct ST7789_param *st7789,uint8_t r, uint8_t g, uint8_t b)
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
     794:	00d2      	lsls	r2, r2, #3
     796:	20fc      	movs	r0, #252	; 0xfc
     798:	00c0      	lsls	r0, r0, #3
     79a:	4002      	ands	r2, r0
     79c:	08d8      	lsrs	r0, r3, #3
     79e:	4310      	orrs	r0, r2
     7a0:	08c9      	lsrs	r1, r1, #3
     7a2:	02c9      	lsls	r1, r1, #11
     7a4:	4308      	orrs	r0, r1
}
     7a6:	4770      	bx	lr

000007a8 <ST7789_SPI_driver_init>:
//const uint32_t UC8151_spi_baudrate  = 1000000;
#define ASF4_spi_driver  driver_spi_m_sync_ST7789
struct io_descriptor *io_ST7789_spi;
 struct spi_xfer xfer;
void    ST7789_SPI_driver_init(struct ST7789_param *driver)
{
     7a8:	b510      	push	{r4, lr}
	st7789_spi.busy_pin=driver->busy_pin;
     7aa:	7842      	ldrb	r2, [r0, #1]
     7ac:	4b0b      	ldr	r3, [pc, #44]	; (7dc <ST7789_SPI_driver_init+0x34>)
     7ae:	705a      	strb	r2, [r3, #1]
	st7789_spi.cs_pin  =driver->cs_pin;
     7b0:	7802      	ldrb	r2, [r0, #0]
     7b2:	701a      	strb	r2, [r3, #0]
	st7789_spi.dc_pin  =driver->dc_pin;
     7b4:	7882      	ldrb	r2, [r0, #2]
     7b6:	709a      	strb	r2, [r3, #2]
	st7789_spi.rst_pin =driver->rst_pin;
     7b8:	78c2      	ldrb	r2, [r0, #3]
     7ba:	70da      	strb	r2, [r3, #3]
	st7789_spi.height  =driver->height;
     7bc:	8902      	ldrh	r2, [r0, #8]
     7be:	811a      	strh	r2, [r3, #8]
	st7789_spi.width   =driver->width;
     7c0:	88c2      	ldrh	r2, [r0, #6]
     7c2:	80da      	strh	r2, [r3, #6]
	st7789_spi.spi_driver_type=ASF4_spi_driver;
     7c4:	2201      	movs	r2, #1
     7c6:	711a      	strb	r2, [r3, #4]
	//spi_m_sync_set_baudrate(&SPI_Display,UC8151_spi_baudrate);
	/*in default the driver is sync spi*/
	/*don't forget to set the height and width of the display*/
	//driver->spi_driver_type = driver_spi_m_sync_ST7789;
	spi_m_sync_get_io_descriptor(&SPI_Display, &io_ST7789_spi);
     7c8:	4c05      	ldr	r4, [pc, #20]	; (7e0 <ST7789_SPI_driver_init+0x38>)
     7ca:	4906      	ldr	r1, [pc, #24]	; (7e4 <ST7789_SPI_driver_init+0x3c>)
     7cc:	0020      	movs	r0, r4
     7ce:	4b06      	ldr	r3, [pc, #24]	; (7e8 <ST7789_SPI_driver_init+0x40>)
     7d0:	4798      	blx	r3
	spi_m_sync_enable(&SPI_Display);	
     7d2:	0020      	movs	r0, r4
     7d4:	4b05      	ldr	r3, [pc, #20]	; (7ec <ST7789_SPI_driver_init+0x44>)
     7d6:	4798      	blx	r3
}
     7d8:	bd10      	pop	{r4, pc}
     7da:	46c0      	nop			; (mov r8, r8)
     7dc:	200008f4 	.word	0x200008f4
     7e0:	200008d4 	.word	0x200008d4
     7e4:	20000b10 	.word	0x20000b10
     7e8:	000012e9 	.word	0x000012e9
     7ec:	00001201 	.word	0x00001201

000007f0 <set_ST7789_SPI_driver_pin>:
void    set_ST7789_SPI_driver_pin(uint8_t pin,uint8_t status)
{
	//gpio_set_pin_level(pin,status);
	gpio_set_port_level(GPIO_PORTB,1U << GPIO_PIN(pin),status);
     7f0:	231f      	movs	r3, #31
     7f2:	4018      	ands	r0, r3
     7f4:	3b1e      	subs	r3, #30
     7f6:	4083      	lsls	r3, r0
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
     7f8:	2900      	cmp	r1, #0
     7fa:	d104      	bne.n	806 <set_ST7789_SPI_driver_pin+0x16>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7fc:	2294      	movs	r2, #148	; 0x94
     7fe:	21c0      	movs	r1, #192	; 0xc0
     800:	05c9      	lsls	r1, r1, #23
     802:	508b      	str	r3, [r1, r2]
}
     804:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     806:	2298      	movs	r2, #152	; 0x98
     808:	21c0      	movs	r1, #192	; 0xc0
     80a:	05c9      	lsls	r1, r1, #23
     80c:	508b      	str	r3, [r1, r2]
     80e:	e7f9      	b.n	804 <set_ST7789_SPI_driver_pin+0x14>

00000810 <ST7789_dtime_delay_ms>:
uint8_t get_ST7789_SPI_driver_pin(uint8_t pin)
{
	return gpio_get_pin_level(pin);
}
void    ST7789_dtime_delay_ms(uint16_t dtime)
{
     810:	b510      	push	{r4, lr}
	delay_ms(dtime);
     812:	4b01      	ldr	r3, [pc, #4]	; (818 <ST7789_dtime_delay_ms+0x8>)
     814:	4798      	blx	r3
}
     816:	bd10      	pop	{r4, pc}
     818:	00001125 	.word	0x00001125

0000081c <spi_send_cmd_ST7789>:
void    spi_send_cmd_ST7789(struct ST7789_param *driver)
{
     81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     81e:	0006      	movs	r6, r0
	gpio_set_port_level(GPIO_PORTB,1U << GPIO_PIN(pin),status);
     820:	7803      	ldrb	r3, [r0, #0]
     822:	251f      	movs	r5, #31
     824:	402b      	ands	r3, r5
     826:	2401      	movs	r4, #1
     828:	0022      	movs	r2, r4
     82a:	409a      	lsls	r2, r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     82c:	27c0      	movs	r7, #192	; 0xc0
     82e:	05ff      	lsls	r7, r7, #23
     830:	2394      	movs	r3, #148	; 0x94
     832:	50fa      	str	r2, [r7, r3]
			//xfer.txbuf=driver->data;
			//xfer.size =driver->data_size;			
			//spi_m_sync_transfer(&SPI_Display,&xfer);
			*/
			set_ST7789_SPI_driver_pin(driver->cs_pin, false);
			io_write(io_ST7789_spi,driver->data, driver->data_size);
     834:	4b06      	ldr	r3, [pc, #24]	; (850 <spi_send_cmd_ST7789+0x34>)
     836:	5ac2      	ldrh	r2, [r0, r3]
     838:	0001      	movs	r1, r0
     83a:	310a      	adds	r1, #10
     83c:	4b05      	ldr	r3, [pc, #20]	; (854 <spi_send_cmd_ST7789+0x38>)
     83e:	6818      	ldr	r0, [r3, #0]
     840:	4b05      	ldr	r3, [pc, #20]	; (858 <spi_send_cmd_ST7789+0x3c>)
     842:	4798      	blx	r3
	gpio_set_port_level(GPIO_PORTB,1U << GPIO_PIN(pin),status);
     844:	7833      	ldrb	r3, [r6, #0]
     846:	401d      	ands	r5, r3
     848:	40ac      	lsls	r4, r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     84a:	2398      	movs	r3, #152	; 0x98
     84c:	50fc      	str	r4, [r7, r3]
			set_ST7789_SPI_driver_pin(driver->cs_pin, true);
		#endif
}
     84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     850:	0000020e 	.word	0x0000020e
     854:	20000b10 	.word	0x20000b10
     858:	00001145 	.word	0x00001145

0000085c <spi_transfer_ST7789>:
void    spi_transfer_ST7789(struct ST7789_param *driver)
{
     85c:	b510      	push	{r4, lr}
	#if ASF4_spi_driver == driver_spi_m_sync_ST7789
		io_write(io_ST7789_spi,driver->buf_data, driver->buf_size);
     85e:	2383      	movs	r3, #131	; 0x83
     860:	009b      	lsls	r3, r3, #2
     862:	5ac2      	ldrh	r2, [r0, r3]
     864:	0001      	movs	r1, r0
     866:	310b      	adds	r1, #11
     868:	4b02      	ldr	r3, [pc, #8]	; (874 <spi_transfer_ST7789+0x18>)
     86a:	6818      	ldr	r0, [r3, #0]
     86c:	4b02      	ldr	r3, [pc, #8]	; (878 <spi_transfer_ST7789+0x1c>)
     86e:	4798      	blx	r3
	#endif
}
     870:	bd10      	pop	{r4, pc}
     872:	46c0      	nop			; (mov r8, r8)
     874:	20000b10 	.word	0x20000b10
     878:	00001145 	.word	0x00001145

0000087c <ST7789_drawAbsoultePixel>:
#include <math.h>
#include <fastmath.h>
#include "stdlib.h"
struct spi_xfer xf;
void ST7789_drawAbsoultePixel(struct ST7789_param *gfx,int16_t x, int16_t y, uint16_t color)
{
     87c:	b5f0      	push	{r4, r5, r6, r7, lr}
     87e:	46de      	mov	lr, fp
     880:	4657      	mov	r7, sl
     882:	464e      	mov	r6, r9
     884:	b5c0      	push	{r6, r7, lr}
     886:	b082      	sub	sp, #8
     888:	0004      	movs	r4, r0
     88a:	000d      	movs	r5, r1
     88c:	0016      	movs	r6, r2
     88e:	9301      	str	r3, [sp, #4]
	in this method , prepare the data you want to send on one array and send them at once together
	SPI @CPU 8MHz is so slow to send , this would slightly increase the speed of writing data 
	to display
	
	*/
		if((x < 0) ||(x >= gfx->width) || (y < 0) || (y >= gfx->height)) return;
     890:	2900      	cmp	r1, #0
     892:	db07      	blt.n	8a4 <ST7789_drawAbsoultePixel+0x28>
     894:	88c3      	ldrh	r3, [r0, #6]
     896:	4299      	cmp	r1, r3
     898:	da04      	bge.n	8a4 <ST7789_drawAbsoultePixel+0x28>
     89a:	2a00      	cmp	r2, #0
     89c:	db02      	blt.n	8a4 <ST7789_drawAbsoultePixel+0x28>
     89e:	8903      	ldrh	r3, [r0, #8]
     8a0:	429a      	cmp	r2, r3
     8a2:	db05      	blt.n	8b0 <ST7789_drawAbsoultePixel+0x34>
		gfx->buf_size=2;
		set_ST7789_SPI_driver_pin(gfx->dc_pin,true);
		spi_transfer_ST7789(gfx);
		/*finish the communication*/
		set_ST7789_SPI_driver_pin(gfx->cs_pin,true);
}
     8a4:	b002      	add	sp, #8
     8a6:	bc1c      	pop	{r2, r3, r4}
     8a8:	4691      	mov	r9, r2
     8aa:	469a      	mov	sl, r3
     8ac:	46a3      	mov	fp, r4
     8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gfx->buf_data[0]=ST7789_CASET;
     8b0:	232a      	movs	r3, #42	; 0x2a
     8b2:	72c3      	strb	r3, [r0, #11]
		gfx->buf_data[1]=x & 0xFF;
     8b4:	b2cb      	uxtb	r3, r1
     8b6:	7303      	strb	r3, [r0, #12]
		gfx->buf_data[2]=(x+1) >> 8;
     8b8:	1c4a      	adds	r2, r1, #1
     8ba:	1212      	asrs	r2, r2, #8
     8bc:	7342      	strb	r2, [r0, #13]
		gfx->buf_data[3]=(x+1) & 0xFF;
     8be:	3301      	adds	r3, #1
     8c0:	7383      	strb	r3, [r0, #14]
		gfx->buf_size=1;
     8c2:	2783      	movs	r7, #131	; 0x83
     8c4:	00bf      	lsls	r7, r7, #2
     8c6:	2301      	movs	r3, #1
     8c8:	469b      	mov	fp, r3
     8ca:	53c3      	strh	r3, [r0, r7]
		set_ST7789_SPI_driver_pin(gfx->cs_pin,false);
     8cc:	7800      	ldrb	r0, [r0, #0]
     8ce:	2100      	movs	r1, #0
     8d0:	4b1c      	ldr	r3, [pc, #112]	; (944 <ST7789_drawAbsoultePixel+0xc8>)
     8d2:	469a      	mov	sl, r3
     8d4:	4798      	blx	r3
		ST7789_Sendspiburst(gfx,false);
     8d6:	2100      	movs	r1, #0
     8d8:	0020      	movs	r0, r4
     8da:	4b1b      	ldr	r3, [pc, #108]	; (948 <ST7789_drawAbsoultePixel+0xcc>)
     8dc:	4699      	mov	r9, r3
     8de:	4798      	blx	r3
		gfx->buf_data[0]=x >> 8;
     8e0:	122d      	asrs	r5, r5, #8
     8e2:	72e5      	strb	r5, [r4, #11]
		gfx->buf_size=4;
     8e4:	2504      	movs	r5, #4
     8e6:	53e5      	strh	r5, [r4, r7]
		ST7789_Sendspiburst(gfx,true);
     8e8:	2101      	movs	r1, #1
     8ea:	0020      	movs	r0, r4
     8ec:	47c8      	blx	r9
		gfx->buf_data[1]=y ;
     8ee:	b2f3      	uxtb	r3, r6
     8f0:	7323      	strb	r3, [r4, #12]
		gfx->buf_data[2]=(y+1) >> 8;
     8f2:	1c72      	adds	r2, r6, #1
     8f4:	1212      	asrs	r2, r2, #8
     8f6:	7362      	strb	r2, [r4, #13]
		gfx->buf_data[3]=y+1 ;
     8f8:	3301      	adds	r3, #1
     8fa:	73a3      	strb	r3, [r4, #14]
		gfx->buf_data[0]=ST7789_PASET;
     8fc:	232b      	movs	r3, #43	; 0x2b
     8fe:	72e3      	strb	r3, [r4, #11]
		gfx->buf_size=1;
     900:	465b      	mov	r3, fp
     902:	53e3      	strh	r3, [r4, r7]
		ST7789_Sendspiburst(gfx,false); // Row addr set
     904:	2100      	movs	r1, #0
     906:	0020      	movs	r0, r4
     908:	47c8      	blx	r9
		gfx->buf_data[0]=y >> 8;
     90a:	1236      	asrs	r6, r6, #8
     90c:	72e6      	strb	r6, [r4, #11]
		gfx->buf_size=4;
     90e:	53e5      	strh	r5, [r4, r7]
		ST7789_Sendspiburst(gfx,true);
     910:	2101      	movs	r1, #1
     912:	0020      	movs	r0, r4
     914:	47c8      	blx	r9
		gfx->buf_data[0]=ST7789_RAMWR;
     916:	232c      	movs	r3, #44	; 0x2c
     918:	72e3      	strb	r3, [r4, #11]
		gfx->buf_size=1;
     91a:	465b      	mov	r3, fp
     91c:	53e3      	strh	r3, [r4, r7]
		ST7789_Sendspiburst(gfx,false);
     91e:	2100      	movs	r1, #0
     920:	0020      	movs	r0, r4
     922:	47c8      	blx	r9
		gfx->buf_data[0]=(color >> 8);
     924:	9a01      	ldr	r2, [sp, #4]
     926:	0a13      	lsrs	r3, r2, #8
     928:	72e3      	strb	r3, [r4, #11]
		gfx->buf_data[1]=color;
     92a:	7322      	strb	r2, [r4, #12]
		gfx->buf_size=2;
     92c:	2302      	movs	r3, #2
     92e:	53e3      	strh	r3, [r4, r7]
		set_ST7789_SPI_driver_pin(gfx->dc_pin,true);
     930:	78a0      	ldrb	r0, [r4, #2]
     932:	2101      	movs	r1, #1
     934:	47d0      	blx	sl
		spi_transfer_ST7789(gfx);
     936:	0020      	movs	r0, r4
     938:	4b04      	ldr	r3, [pc, #16]	; (94c <ST7789_drawAbsoultePixel+0xd0>)
     93a:	4798      	blx	r3
		set_ST7789_SPI_driver_pin(gfx->cs_pin,true);
     93c:	7820      	ldrb	r0, [r4, #0]
     93e:	2101      	movs	r1, #1
     940:	47d0      	blx	sl
     942:	e7af      	b.n	8a4 <ST7789_drawAbsoultePixel+0x28>
     944:	000007f1 	.word	0x000007f1
     948:	000004d5 	.word	0x000004d5
     94c:	0000085d 	.word	0x0000085d

00000950 <ST7789_drawFastVLine>:
		 }
	 }
set_ST7789_SPI_driver_pin(gfx->cs_pin,true);
}
void ST7789_drawFastVLine(struct ST7789_param *gfx,int16_t x, int16_t y, int16_t h, uint16_t color)
{
     950:	b5f0      	push	{r4, r5, r6, r7, lr}
     952:	b083      	sub	sp, #12
     954:	0004      	movs	r4, r0
     956:	001e      	movs	r6, r3
     958:	ab08      	add	r3, sp, #32
     95a:	881d      	ldrh	r5, [r3, #0]
	 if((x >= gfx->width) || (y >= gfx->height)) return;
     95c:	88c3      	ldrh	r3, [r0, #6]
     95e:	4299      	cmp	r1, r3
     960:	da34      	bge.n	9cc <ST7789_drawFastVLine+0x7c>
     962:	8903      	ldrh	r3, [r0, #8]
     964:	429a      	cmp	r2, r3
     966:	da31      	bge.n	9cc <ST7789_drawFastVLine+0x7c>
	 if((y+h-1) >= gfx->height)
     968:	18b0      	adds	r0, r6, r2
     96a:	3801      	subs	r0, #1
     96c:	4283      	cmp	r3, r0
     96e:	dc01      	bgt.n	974 <ST7789_drawFastVLine+0x24>
	 h = gfx->height-y;
     970:	1a9b      	subs	r3, r3, r2
     972:	b21e      	sxth	r6, r3
	 ST7789_setAddrWindow(gfx,x, y, x, y+h-1);
     974:	b289      	uxth	r1, r1
     976:	b292      	uxth	r2, r2
     978:	1e53      	subs	r3, r2, #1
     97a:	199b      	adds	r3, r3, r6
     97c:	b29b      	uxth	r3, r3
     97e:	9300      	str	r3, [sp, #0]
     980:	000b      	movs	r3, r1
     982:	0020      	movs	r0, r4
     984:	4f13      	ldr	r7, [pc, #76]	; (9d4 <ST7789_drawFastVLine+0x84>)
     986:	47b8      	blx	r7
	 uint16_t count=0;
	 while (count<h*2)
     988:	0073      	lsls	r3, r6, #1
     98a:	2b00      	cmp	r3, #0
     98c:	dd20      	ble.n	9d0 <ST7789_drawFastVLine+0x80>
	 {
		 gfx->buf_data[count++]= color >> 8;
     98e:	0a2e      	lsrs	r6, r5, #8
     990:	2000      	movs	r0, #0
     992:	2200      	movs	r2, #0
     994:	1c51      	adds	r1, r2, #1
     996:	b289      	uxth	r1, r1
     998:	1820      	adds	r0, r4, r0
     99a:	72c6      	strb	r6, [r0, #11]
		 gfx->buf_data[count++]= color;
     99c:	3202      	adds	r2, #2
     99e:	b292      	uxth	r2, r2
     9a0:	1861      	adds	r1, r4, r1
     9a2:	72cd      	strb	r5, [r1, #11]
	 while (count<h*2)
     9a4:	0010      	movs	r0, r2
     9a6:	429a      	cmp	r2, r3
     9a8:	dbf4      	blt.n	994 <ST7789_drawFastVLine+0x44>
	 }
	 gfx->buf_size=count-1;
     9aa:	3a01      	subs	r2, #1
     9ac:	2383      	movs	r3, #131	; 0x83
     9ae:	009b      	lsls	r3, r3, #2
     9b0:	52e2      	strh	r2, [r4, r3]
	set_ST7789_SPI_driver_pin(gfx->dc_pin,true);
     9b2:	78a0      	ldrb	r0, [r4, #2]
     9b4:	2101      	movs	r1, #1
     9b6:	4d08      	ldr	r5, [pc, #32]	; (9d8 <ST7789_drawFastVLine+0x88>)
     9b8:	47a8      	blx	r5
	set_ST7789_SPI_driver_pin(gfx->cs_pin,false);
     9ba:	7820      	ldrb	r0, [r4, #0]
     9bc:	2100      	movs	r1, #0
     9be:	47a8      	blx	r5
	spi_transfer_ST7789(gfx);
     9c0:	0020      	movs	r0, r4
     9c2:	4b06      	ldr	r3, [pc, #24]	; (9dc <ST7789_drawFastVLine+0x8c>)
     9c4:	4798      	blx	r3
	set_ST7789_SPI_driver_pin(gfx->cs_pin,true);
     9c6:	7820      	ldrb	r0, [r4, #0]
     9c8:	2101      	movs	r1, #1
     9ca:	47a8      	blx	r5
}
     9cc:	b003      	add	sp, #12
     9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	 uint16_t count=0;
     9d0:	2200      	movs	r2, #0
     9d2:	e7ea      	b.n	9aa <ST7789_drawFastVLine+0x5a>
     9d4:	00000729 	.word	0x00000729
     9d8:	000007f1 	.word	0x000007f1
     9dc:	0000085d 	.word	0x0000085d

000009e0 <ST7789_drawFastHLine>:
void ST7789_drawFastHLine(struct ST7789_param *gfx,int16_t x, int16_t y, int16_t w, uint16_t color)
{
     9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9e2:	b083      	sub	sp, #12
     9e4:	0004      	movs	r4, r0
     9e6:	001e      	movs	r6, r3
     9e8:	ab08      	add	r3, sp, #32
     9ea:	881d      	ldrh	r5, [r3, #0]
	 // Rudimentary clipping
	 if((x >= gfx->width) || (y >= gfx->height)) return;
     9ec:	88c3      	ldrh	r3, [r0, #6]
     9ee:	4299      	cmp	r1, r3
     9f0:	da33      	bge.n	a5a <ST7789_drawFastHLine+0x7a>
     9f2:	8900      	ldrh	r0, [r0, #8]
     9f4:	4282      	cmp	r2, r0
     9f6:	da30      	bge.n	a5a <ST7789_drawFastHLine+0x7a>
	 if((x+w-1) >= gfx->width)  w = gfx->width -x;
     9f8:	1870      	adds	r0, r6, r1
     9fa:	3801      	subs	r0, #1
     9fc:	4283      	cmp	r3, r0
     9fe:	dc01      	bgt.n	a04 <ST7789_drawFastHLine+0x24>
     a00:	1a5b      	subs	r3, r3, r1
     a02:	b21e      	sxth	r6, r3
	 ST7789_setAddrWindow(gfx,x, y, x+w-1, y);
     a04:	b289      	uxth	r1, r1
     a06:	b292      	uxth	r2, r2
     a08:	1e4b      	subs	r3, r1, #1
     a0a:	199b      	adds	r3, r3, r6
     a0c:	b29b      	uxth	r3, r3
     a0e:	9200      	str	r2, [sp, #0]
     a10:	0020      	movs	r0, r4
     a12:	4f14      	ldr	r7, [pc, #80]	; (a64 <ST7789_drawFastHLine+0x84>)
     a14:	47b8      	blx	r7
	 uint16_t count=0;
	 while (count<w*2)
     a16:	0073      	lsls	r3, r6, #1
     a18:	2b00      	cmp	r3, #0
     a1a:	dd20      	ble.n	a5e <ST7789_drawFastHLine+0x7e>
	 {
		 gfx->buf_data[count++]= color >> 8;
     a1c:	0a2e      	lsrs	r6, r5, #8
     a1e:	2000      	movs	r0, #0
     a20:	2200      	movs	r2, #0
     a22:	1c51      	adds	r1, r2, #1
     a24:	b289      	uxth	r1, r1
     a26:	1820      	adds	r0, r4, r0
     a28:	72c6      	strb	r6, [r0, #11]
		 gfx->buf_data[count++]= color;
     a2a:	3202      	adds	r2, #2
     a2c:	b292      	uxth	r2, r2
     a2e:	1861      	adds	r1, r4, r1
     a30:	72cd      	strb	r5, [r1, #11]
	 while (count<w*2)
     a32:	0010      	movs	r0, r2
     a34:	429a      	cmp	r2, r3
     a36:	dbf4      	blt.n	a22 <ST7789_drawFastHLine+0x42>
	 }
	 
	 gfx->buf_size=count-1;
     a38:	3a01      	subs	r2, #1
     a3a:	2383      	movs	r3, #131	; 0x83
     a3c:	009b      	lsls	r3, r3, #2
     a3e:	52e2      	strh	r2, [r4, r3]
	 set_ST7789_SPI_driver_pin(gfx->dc_pin,true);
     a40:	78a0      	ldrb	r0, [r4, #2]
     a42:	2101      	movs	r1, #1
     a44:	4d08      	ldr	r5, [pc, #32]	; (a68 <ST7789_drawFastHLine+0x88>)
     a46:	47a8      	blx	r5
	 set_ST7789_SPI_driver_pin(gfx->cs_pin,false);	 
     a48:	7820      	ldrb	r0, [r4, #0]
     a4a:	2100      	movs	r1, #0
     a4c:	47a8      	blx	r5
	 spi_transfer_ST7789(gfx);	  
     a4e:	0020      	movs	r0, r4
     a50:	4b06      	ldr	r3, [pc, #24]	; (a6c <ST7789_drawFastHLine+0x8c>)
     a52:	4798      	blx	r3
	 set_ST7789_SPI_driver_pin(gfx->cs_pin,true);
     a54:	7820      	ldrb	r0, [r4, #0]
     a56:	2101      	movs	r1, #1
     a58:	47a8      	blx	r5
}
     a5a:	b003      	add	sp, #12
     a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	 uint16_t count=0;
     a5e:	2200      	movs	r2, #0
     a60:	e7ea      	b.n	a38 <ST7789_drawFastHLine+0x58>
     a62:	46c0      	nop			; (mov r8, r8)
     a64:	00000729 	.word	0x00000729
     a68:	000007f1 	.word	0x000007f1
     a6c:	0000085d 	.word	0x0000085d

00000a70 <ST7789_drawRect>:
void ST7789_drawRect(struct ST7789_param *gfx,int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
     a70:	b5f0      	push	{r4, r5, r6, r7, lr}
     a72:	b087      	sub	sp, #28
     a74:	000f      	movs	r7, r1
     a76:	0019      	movs	r1, r3
     a78:	ab0c      	add	r3, sp, #48	; 0x30
     a7a:	2400      	movs	r4, #0
     a7c:	5f1c      	ldrsh	r4, [r3, r4]
     a7e:	ab0d      	add	r3, sp, #52	; 0x34
     a80:	881e      	ldrh	r6, [r3, #0]
	  ST7789_drawFastHLine(gfx,x, y, w, color);
     a82:	9600      	str	r6, [sp, #0]
     a84:	9105      	str	r1, [sp, #20]
     a86:	000b      	movs	r3, r1
     a88:	9204      	str	r2, [sp, #16]
     a8a:	0039      	movs	r1, r7
     a8c:	9003      	str	r0, [sp, #12]
     a8e:	4d0f      	ldr	r5, [pc, #60]	; (acc <ST7789_drawRect+0x5c>)
     a90:	47a8      	blx	r5
	  ST7789_drawFastHLine(gfx,x, y+h-1, w, color);
     a92:	1e62      	subs	r2, r4, #1
     a94:	9b04      	ldr	r3, [sp, #16]
     a96:	469c      	mov	ip, r3
     a98:	4462      	add	r2, ip
     a9a:	b212      	sxth	r2, r2
     a9c:	9600      	str	r6, [sp, #0]
     a9e:	9b05      	ldr	r3, [sp, #20]
     aa0:	0039      	movs	r1, r7
     aa2:	9803      	ldr	r0, [sp, #12]
     aa4:	47a8      	blx	r5
	  ST7789_drawFastVLine(gfx,x, y, h, color);
     aa6:	9600      	str	r6, [sp, #0]
     aa8:	0023      	movs	r3, r4
     aaa:	9a04      	ldr	r2, [sp, #16]
     aac:	0039      	movs	r1, r7
     aae:	9803      	ldr	r0, [sp, #12]
     ab0:	4d07      	ldr	r5, [pc, #28]	; (ad0 <ST7789_drawRect+0x60>)
     ab2:	47a8      	blx	r5
	  ST7789_drawFastVLine(gfx,x+w-1, y, h, color);
     ab4:	9905      	ldr	r1, [sp, #20]
     ab6:	3901      	subs	r1, #1
     ab8:	19c9      	adds	r1, r1, r7
     aba:	b209      	sxth	r1, r1
     abc:	9600      	str	r6, [sp, #0]
     abe:	0023      	movs	r3, r4
     ac0:	9a04      	ldr	r2, [sp, #16]
     ac2:	9803      	ldr	r0, [sp, #12]
     ac4:	47a8      	blx	r5
}
     ac6:	b007      	add	sp, #28
     ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     aca:	46c0      	nop			; (mov r8, r8)
     acc:	000009e1 	.word	0x000009e1
     ad0:	00000951 	.word	0x00000951

00000ad4 <ST7789_fillRect>:
void ST7789_fillRect(struct ST7789_param *gfx,const int16_t x,const int16_t y,const int16_t w,const int16_t h,const uint16_t color)
{
     ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ad6:	b085      	sub	sp, #20
     ad8:	0005      	movs	r5, r0
     ada:	000c      	movs	r4, r1
     adc:	9103      	str	r1, [sp, #12]
     ade:	a90a      	add	r1, sp, #40	; 0x28
     ae0:	2000      	movs	r0, #0
     ae2:	5e08      	ldrsh	r0, [r1, r0]
     ae4:	a90b      	add	r1, sp, #44	; 0x2c
     ae6:	880f      	ldrh	r7, [r1, #0]
	const uint16_t tot=x+w;
     ae8:	b2a1      	uxth	r1, r4
     aea:	18cb      	adds	r3, r1, r3
     aec:	b29c      	uxth	r4, r3
	ST7789_setAddrWindow(gfx,x, y, x+w-1, y+h-1);
     aee:	b292      	uxth	r2, r2
     af0:	1e63      	subs	r3, r4, #1
     af2:	b29b      	uxth	r3, r3
     af4:	3801      	subs	r0, #1
     af6:	1810      	adds	r0, r2, r0
     af8:	b280      	uxth	r0, r0
     afa:	9000      	str	r0, [sp, #0]
     afc:	0028      	movs	r0, r5
     afe:	4e16      	ldr	r6, [pc, #88]	; (b58 <ST7789_fillRect+0x84>)
     b00:	47b0      	blx	r6
	for (uint16_t i=0;i<tot*2;i+=2)
     b02:	0026      	movs	r6, r4
     b04:	0061      	lsls	r1, r4, #1
     b06:	2900      	cmp	r1, #0
     b08:	dd0a      	ble.n	b20 <ST7789_fillRect+0x4c>
	{
		gfx->buf_data[i]= color >> 8;
     b0a:	0a38      	lsrs	r0, r7, #8
     b0c:	2200      	movs	r2, #0
     b0e:	2300      	movs	r3, #0
     b10:	18aa      	adds	r2, r5, r2
     b12:	72d0      	strb	r0, [r2, #11]
		gfx->buf_data[i+1]= color;
     b14:	7317      	strb	r7, [r2, #12]
	for (uint16_t i=0;i<tot*2;i+=2)
     b16:	3302      	adds	r3, #2
     b18:	b29b      	uxth	r3, r3
     b1a:	001a      	movs	r2, r3
     b1c:	428b      	cmp	r3, r1
     b1e:	dbf7      	blt.n	b10 <ST7789_fillRect+0x3c>
	}
	gfx->buf_size=tot*2;
     b20:	0063      	lsls	r3, r4, #1
     b22:	2283      	movs	r2, #131	; 0x83
     b24:	0092      	lsls	r2, r2, #2
     b26:	52ab      	strh	r3, [r5, r2]
	set_ST7789_SPI_driver_pin(gfx->dc_pin,true);
     b28:	78a8      	ldrb	r0, [r5, #2]
     b2a:	2101      	movs	r1, #1
     b2c:	4f0b      	ldr	r7, [pc, #44]	; (b5c <ST7789_fillRect+0x88>)
     b2e:	47b8      	blx	r7
	set_ST7789_SPI_driver_pin(gfx->cs_pin,false);
     b30:	7828      	ldrb	r0, [r5, #0]
     b32:	2100      	movs	r1, #0
     b34:	47b8      	blx	r7
	  for (int16_t i=x; i<tot; i++) 
     b36:	9c03      	ldr	r4, [sp, #12]
     b38:	42b4      	cmp	r4, r6
     b3a:	da06      	bge.n	b4a <ST7789_fillRect+0x76>
	  {
		  spi_transfer_ST7789(gfx);
     b3c:	4f08      	ldr	r7, [pc, #32]	; (b60 <ST7789_fillRect+0x8c>)
     b3e:	0028      	movs	r0, r5
     b40:	47b8      	blx	r7
     b42:	3401      	adds	r4, #1
     b44:	b224      	sxth	r4, r4
	  for (int16_t i=x; i<tot; i++) 
     b46:	42b4      	cmp	r4, r6
     b48:	dbf9      	blt.n	b3e <ST7789_fillRect+0x6a>
	  }
	  set_ST7789_SPI_driver_pin(gfx->cs_pin,true);
     b4a:	7828      	ldrb	r0, [r5, #0]
     b4c:	2101      	movs	r1, #1
     b4e:	4b03      	ldr	r3, [pc, #12]	; (b5c <ST7789_fillRect+0x88>)
     b50:	4798      	blx	r3
}
     b52:	b005      	add	sp, #20
     b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b56:	46c0      	nop			; (mov r8, r8)
     b58:	00000729 	.word	0x00000729
     b5c:	000007f1 	.word	0x000007f1
     b60:	0000085d 	.word	0x0000085d

00000b64 <ST7789_fillScreen>:
void ST7789_fillScreen(struct ST7789_param *gfx,uint16_t color)
{
     b64:	b5f0      	push	{r4, r5, r6, r7, lr}
     b66:	b083      	sub	sp, #12
     b68:	0005      	movs	r5, r0
     b6a:	000c      	movs	r4, r1
	uint16_t x=0;
	uint16_t y=0;
	uint16_t w=gfx->width;
     b6c:	88c7      	ldrh	r7, [r0, #6]
	uint16_t h=gfx->height;
	const uint16_t tot=x+w;
	
	ST7789_setAddrWindow(gfx,x, y, x+w-1, y+h-1);
     b6e:	1e7b      	subs	r3, r7, #1
     b70:	b29b      	uxth	r3, r3
     b72:	8902      	ldrh	r2, [r0, #8]
     b74:	3a01      	subs	r2, #1
     b76:	b292      	uxth	r2, r2
     b78:	9200      	str	r2, [sp, #0]
     b7a:	2200      	movs	r2, #0
     b7c:	2100      	movs	r1, #0
     b7e:	4e16      	ldr	r6, [pc, #88]	; (bd8 <ST7789_fillScreen+0x74>)
     b80:	47b0      	blx	r6
	for (uint16_t i=0;i<tot*2;i+=2)
     b82:	003e      	movs	r6, r7
     b84:	0079      	lsls	r1, r7, #1
     b86:	2900      	cmp	r1, #0
     b88:	dd0a      	ble.n	ba0 <ST7789_fillScreen+0x3c>
	{
		gfx->buf_data[i]= color >> 8;
     b8a:	0a20      	lsrs	r0, r4, #8
     b8c:	2200      	movs	r2, #0
     b8e:	2300      	movs	r3, #0
     b90:	18aa      	adds	r2, r5, r2
     b92:	72d0      	strb	r0, [r2, #11]
		gfx->buf_data[i+1]= color;
     b94:	7314      	strb	r4, [r2, #12]
	for (uint16_t i=0;i<tot*2;i+=2)
     b96:	3302      	adds	r3, #2
     b98:	b29b      	uxth	r3, r3
     b9a:	001a      	movs	r2, r3
     b9c:	428b      	cmp	r3, r1
     b9e:	dbf7      	blt.n	b90 <ST7789_fillScreen+0x2c>
	}
	gfx->buf_size=tot*2;
     ba0:	007f      	lsls	r7, r7, #1
     ba2:	2383      	movs	r3, #131	; 0x83
     ba4:	009b      	lsls	r3, r3, #2
     ba6:	52ef      	strh	r7, [r5, r3]
	set_ST7789_SPI_driver_pin(gfx->dc_pin,true);
     ba8:	78a8      	ldrb	r0, [r5, #2]
     baa:	2101      	movs	r1, #1
     bac:	4c0b      	ldr	r4, [pc, #44]	; (bdc <ST7789_fillScreen+0x78>)
     bae:	47a0      	blx	r4
	set_ST7789_SPI_driver_pin(gfx->cs_pin,false);
     bb0:	7828      	ldrb	r0, [r5, #0]
     bb2:	2100      	movs	r1, #0
     bb4:	47a0      	blx	r4
	for (int16_t i=x; i<tot; i++) 
     bb6:	2e00      	cmp	r6, #0
     bb8:	dd07      	ble.n	bca <ST7789_fillScreen+0x66>
     bba:	2400      	movs	r4, #0
	{
		spi_transfer_ST7789(gfx);
     bbc:	4f08      	ldr	r7, [pc, #32]	; (be0 <ST7789_fillScreen+0x7c>)
     bbe:	0028      	movs	r0, r5
     bc0:	47b8      	blx	r7
     bc2:	3401      	adds	r4, #1
     bc4:	b224      	sxth	r4, r4
	for (int16_t i=x; i<tot; i++) 
     bc6:	42b4      	cmp	r4, r6
     bc8:	dbf9      	blt.n	bbe <ST7789_fillScreen+0x5a>
	}
	set_ST7789_SPI_driver_pin(gfx->cs_pin,true);
     bca:	7828      	ldrb	r0, [r5, #0]
     bcc:	2101      	movs	r1, #1
     bce:	4b03      	ldr	r3, [pc, #12]	; (bdc <ST7789_fillScreen+0x78>)
     bd0:	4798      	blx	r3
}
     bd2:	b003      	add	sp, #12
     bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	00000729 	.word	0x00000729
     bdc:	000007f1 	.word	0x000007f1
     be0:	0000085d 	.word	0x0000085d

00000be4 <ST7789_drawCircle>:
void ST7789_invertDisplay(struct ST7789_param *gfx,bool i)
{
	
}

void ST7789_drawCircle(struct ST7789_param *gfx,int16_t x0, int16_t y0, int16_t r,uint16_t color) {
     be4:	b5f0      	push	{r4, r5, r6, r7, lr}
     be6:	46de      	mov	lr, fp
     be8:	4657      	mov	r7, sl
     bea:	464e      	mov	r6, r9
     bec:	4645      	mov	r5, r8
     bee:	b5e0      	push	{r5, r6, r7, lr}
     bf0:	b089      	sub	sp, #36	; 0x24
     bf2:	000c      	movs	r4, r1
     bf4:	0017      	movs	r7, r2
     bf6:	4698      	mov	r8, r3
     bf8:	9303      	str	r3, [sp, #12]
     bfa:	ab12      	add	r3, sp, #72	; 0x48
     bfc:	881a      	ldrh	r2, [r3, #0]
     bfe:	0011      	movs	r1, r2
	int16_t f = 1 - r;
     c00:	4643      	mov	r3, r8
     c02:	466a      	mov	r2, sp
     c04:	8093      	strh	r3, [r2, #4]
     c06:	8895      	ldrh	r5, [r2, #4]
     c08:	2301      	movs	r3, #1
     c0a:	1b5b      	subs	r3, r3, r5
     c0c:	b21b      	sxth	r3, r3
     c0e:	469b      	mov	fp, r3
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
     c10:	03eb      	lsls	r3, r5, #15
     c12:	1b5b      	subs	r3, r3, r5
     c14:	005b      	lsls	r3, r3, #1
     c16:	b21b      	sxth	r3, r3
     c18:	9307      	str	r3, [sp, #28]
	int16_t x = 0;
	int16_t y = r;

	ST7789_drawAbsoultePixel(gfx,x0  , y0+r, color);
     c1a:	b2bb      	uxth	r3, r7
     c1c:	469a      	mov	sl, r3
     c1e:	18ea      	adds	r2, r5, r3
     c20:	b212      	sxth	r2, r2
     c22:	9101      	str	r1, [sp, #4]
     c24:	000b      	movs	r3, r1
     c26:	0021      	movs	r1, r4
     c28:	9002      	str	r0, [sp, #8]
     c2a:	4e48      	ldr	r6, [pc, #288]	; (d4c <ST7789_drawCircle+0x168>)
     c2c:	47b0      	blx	r6
	ST7789_drawAbsoultePixel(gfx,x0  , y0-r, color);
     c2e:	4653      	mov	r3, sl
     c30:	1b5a      	subs	r2, r3, r5
     c32:	b212      	sxth	r2, r2
     c34:	9b01      	ldr	r3, [sp, #4]
     c36:	0021      	movs	r1, r4
     c38:	9802      	ldr	r0, [sp, #8]
     c3a:	47b0      	blx	r6
	ST7789_drawAbsoultePixel(gfx,x0+r, y0  , color);
     c3c:	b2a3      	uxth	r3, r4
     c3e:	9304      	str	r3, [sp, #16]
     c40:	18e9      	adds	r1, r5, r3
     c42:	b209      	sxth	r1, r1
     c44:	9c01      	ldr	r4, [sp, #4]
     c46:	0023      	movs	r3, r4
     c48:	003a      	movs	r2, r7
     c4a:	9802      	ldr	r0, [sp, #8]
     c4c:	47b0      	blx	r6
	ST7789_drawAbsoultePixel(gfx,x0-r, y0  , color);
     c4e:	9b04      	ldr	r3, [sp, #16]
     c50:	1b59      	subs	r1, r3, r5
     c52:	b209      	sxth	r1, r1
     c54:	0023      	movs	r3, r4
     c56:	003a      	movs	r2, r7
     c58:	9802      	ldr	r0, [sp, #8]
     c5a:	47b0      	blx	r6

	while (x<y) {
     c5c:	4643      	mov	r3, r8
     c5e:	2b00      	cmp	r3, #0
     c60:	dd6d      	ble.n	d3e <ST7789_drawCircle+0x15a>
     c62:	2301      	movs	r3, #1
     c64:	4698      	mov	r8, r3
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		ST7789_drawAbsoultePixel(gfx,x0 + x, y0 + y, color);
     c66:	4d39      	ldr	r5, [pc, #228]	; (d4c <ST7789_drawCircle+0x168>)
     c68:	e059      	b.n	d1e <ST7789_drawCircle+0x13a>
		x++;
     c6a:	4643      	mov	r3, r8
     c6c:	b21b      	sxth	r3, r3
     c6e:	9305      	str	r3, [sp, #20]
     c70:	4642      	mov	r2, r8
     c72:	0056      	lsls	r6, r2, #1
     c74:	b2b2      	uxth	r2, r6
     c76:	4691      	mov	r9, r2
		f += ddF_x;
     c78:	1c53      	adds	r3, r2, #1
     c7a:	445b      	add	r3, fp
     c7c:	b21a      	sxth	r2, r3
     c7e:	4693      	mov	fp, r2
     c80:	9b04      	ldr	r3, [sp, #16]
     c82:	001e      	movs	r6, r3
     c84:	4446      	add	r6, r8
     c86:	b2b6      	uxth	r6, r6
     c88:	b232      	sxth	r2, r6
     c8a:	0011      	movs	r1, r2
		ST7789_drawAbsoultePixel(gfx,x0 + x, y0 + y, color);
     c8c:	466b      	mov	r3, sp
     c8e:	899c      	ldrh	r4, [r3, #12]
     c90:	4652      	mov	r2, sl
     c92:	1917      	adds	r7, r2, r4
     c94:	b23f      	sxth	r7, r7
     c96:	9b01      	ldr	r3, [sp, #4]
     c98:	003a      	movs	r2, r7
     c9a:	9106      	str	r1, [sp, #24]
     c9c:	9802      	ldr	r0, [sp, #8]
     c9e:	47a8      	blx	r5
     ca0:	4648      	mov	r0, r9
     ca2:	1a36      	subs	r6, r6, r0
     ca4:	b236      	sxth	r6, r6
		ST7789_drawAbsoultePixel(gfx,x0 - x, y0 + y, color);
     ca6:	9b01      	ldr	r3, [sp, #4]
     ca8:	003a      	movs	r2, r7
     caa:	0031      	movs	r1, r6
     cac:	9802      	ldr	r0, [sp, #8]
     cae:	47a8      	blx	r5
		ST7789_drawAbsoultePixel(gfx,x0 + x, y0 - y, color);
     cb0:	4650      	mov	r0, sl
     cb2:	1b07      	subs	r7, r0, r4
     cb4:	b23f      	sxth	r7, r7
     cb6:	9b01      	ldr	r3, [sp, #4]
     cb8:	003a      	movs	r2, r7
     cba:	9906      	ldr	r1, [sp, #24]
     cbc:	9802      	ldr	r0, [sp, #8]
     cbe:	47a8      	blx	r5
		ST7789_drawAbsoultePixel(gfx,x0 - x, y0 - y, color);
     cc0:	9b01      	ldr	r3, [sp, #4]
     cc2:	003a      	movs	r2, r7
     cc4:	0031      	movs	r1, r6
     cc6:	9802      	ldr	r0, [sp, #8]
     cc8:	47a8      	blx	r5
		ST7789_drawAbsoultePixel(gfx,x0 + y, y0 + x, color);
     cca:	9b04      	ldr	r3, [sp, #16]
     ccc:	191f      	adds	r7, r3, r4
     cce:	b23f      	sxth	r7, r7
     cd0:	4646      	mov	r6, r8
     cd2:	4456      	add	r6, sl
     cd4:	b2b6      	uxth	r6, r6
     cd6:	b232      	sxth	r2, r6
     cd8:	9b01      	ldr	r3, [sp, #4]
     cda:	9206      	str	r2, [sp, #24]
     cdc:	0039      	movs	r1, r7
     cde:	9802      	ldr	r0, [sp, #8]
     ce0:	47a8      	blx	r5
		ST7789_drawAbsoultePixel(gfx,x0 - y, y0 + x, color);
     ce2:	9b04      	ldr	r3, [sp, #16]
     ce4:	1b1c      	subs	r4, r3, r4
     ce6:	b224      	sxth	r4, r4
     ce8:	9b01      	ldr	r3, [sp, #4]
     cea:	9a06      	ldr	r2, [sp, #24]
     cec:	0021      	movs	r1, r4
     cee:	9802      	ldr	r0, [sp, #8]
     cf0:	47a8      	blx	r5
     cf2:	464a      	mov	r2, r9
     cf4:	1ab6      	subs	r6, r6, r2
     cf6:	b236      	sxth	r6, r6
		ST7789_drawAbsoultePixel(gfx,x0 + y, y0 - x, color);
     cf8:	9b01      	ldr	r3, [sp, #4]
     cfa:	0032      	movs	r2, r6
     cfc:	0039      	movs	r1, r7
     cfe:	9f02      	ldr	r7, [sp, #8]
     d00:	0038      	movs	r0, r7
     d02:	47a8      	blx	r5
		ST7789_drawAbsoultePixel(gfx,x0 - y, y0 - x, color);
     d04:	9b01      	ldr	r3, [sp, #4]
     d06:	0032      	movs	r2, r6
     d08:	0021      	movs	r1, r4
     d0a:	0038      	movs	r0, r7
     d0c:	47a8      	blx	r5
     d0e:	4642      	mov	r2, r8
     d10:	1c53      	adds	r3, r2, #1
     d12:	b29a      	uxth	r2, r3
     d14:	4690      	mov	r8, r2
	while (x<y) {
     d16:	9a03      	ldr	r2, [sp, #12]
     d18:	9b05      	ldr	r3, [sp, #20]
     d1a:	429a      	cmp	r2, r3
     d1c:	dd0f      	ble.n	d3e <ST7789_drawCircle+0x15a>
		if (f >= 0) {
     d1e:	465b      	mov	r3, fp
     d20:	2b00      	cmp	r3, #0
     d22:	dba2      	blt.n	c6a <ST7789_drawCircle+0x86>
			y--;
     d24:	9b03      	ldr	r3, [sp, #12]
     d26:	3b01      	subs	r3, #1
     d28:	b21b      	sxth	r3, r3
     d2a:	9303      	str	r3, [sp, #12]
			ddF_y += 2;
     d2c:	9b07      	ldr	r3, [sp, #28]
     d2e:	3302      	adds	r3, #2
     d30:	b29b      	uxth	r3, r3
     d32:	b21a      	sxth	r2, r3
     d34:	9207      	str	r2, [sp, #28]
			f += ddF_y;
     d36:	445b      	add	r3, fp
     d38:	b21b      	sxth	r3, r3
     d3a:	469b      	mov	fp, r3
     d3c:	e795      	b.n	c6a <ST7789_drawCircle+0x86>
	}
}
     d3e:	b009      	add	sp, #36	; 0x24
     d40:	bc3c      	pop	{r2, r3, r4, r5}
     d42:	4690      	mov	r8, r2
     d44:	4699      	mov	r9, r3
     d46:	46a2      	mov	sl, r4
     d48:	46ab      	mov	fp, r5
     d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d4c:	0000087d 	.word	0x0000087d

00000d50 <ST7789_fillCircleHelper>:
	}
	*/
}

void ST7789_fillCircleHelper(struct ST7789_param *gfx, int16_t x0, int16_t y0,int16_t r,uint8_t cornername,int16_t delta, uint16_t color)
{
     d50:	b5f0      	push	{r4, r5, r6, r7, lr}
     d52:	46de      	mov	lr, fp
     d54:	4657      	mov	r7, sl
     d56:	464e      	mov	r6, r9
     d58:	4645      	mov	r5, r8
     d5a:	b5e0      	push	{r5, r6, r7, lr}
     d5c:	b08d      	sub	sp, #52	; 0x34
     d5e:	9003      	str	r0, [sp, #12]
     d60:	9106      	str	r1, [sp, #24]
     d62:	9207      	str	r2, [sp, #28]
     d64:	001e      	movs	r6, r3
     d66:	ab16      	add	r3, sp, #88	; 0x58
     d68:	7819      	ldrb	r1, [r3, #0]
     d6a:	ab17      	add	r3, sp, #92	; 0x5c
     d6c:	2000      	movs	r0, #0
     d6e:	5e18      	ldrsh	r0, [r3, r0]
     d70:	ab18      	add	r3, sp, #96	; 0x60
     d72:	881b      	ldrh	r3, [r3, #0]
     d74:	4699      	mov	r9, r3
	
 int16_t f     = 1 - r;
     d76:	b2b2      	uxth	r2, r6
     d78:	2401      	movs	r4, #1
     d7a:	1aa4      	subs	r4, r4, r2
     d7c:	b224      	sxth	r4, r4
 int16_t ddF_x = 1;
 int16_t ddF_y = -2 * r;
     d7e:	03d3      	lsls	r3, r2, #15
     d80:	1a9b      	subs	r3, r3, r2
     d82:	005b      	lsls	r3, r3, #1
     d84:	b21b      	sxth	r3, r3
     d86:	4698      	mov	r8, r3
 int16_t x     = 0;
 int16_t y     = r;

 while (x<y) {
     d88:	2e00      	cmp	r6, #0
     d8a:	dd79      	ble.n	e80 <ST7789_fillCircleHelper+0x130>
     d8c:	b283      	uxth	r3, r0
     d8e:	9308      	str	r3, [sp, #32]
     d90:	3303      	adds	r3, #3
     d92:	b29b      	uxth	r3, r3
     d94:	469b      	mov	fp, r3
     d96:	2501      	movs	r5, #1
	 }
	 x++;
	 ddF_x += 2;
	 f+= ddF_x;

	 if (cornername & 0x1) 
     d98:	2301      	movs	r3, #1
     d9a:	400b      	ands	r3, r1
     d9c:	9304      	str	r3, [sp, #16]
	 {
		 
		 ST7789_drawFastVLine(gfx,x0+x, y0-y, 2*y+1+delta, color);
		 ST7789_drawFastVLine(gfx,x0+y, y0-x, 2*x+1+delta, color);
	 }
	 if (cornername & 0x2) {
     d9e:	2302      	movs	r3, #2
     da0:	400b      	ands	r3, r1
     da2:	9305      	str	r3, [sp, #20]
     da4:	465b      	mov	r3, fp
     da6:	9302      	str	r3, [sp, #8]
     da8:	e02c      	b.n	e04 <ST7789_fillCircleHelper+0xb4>
		 ST7789_drawFastVLine(gfx,x0+x, y0-y, 2*y+1+delta, color);
     daa:	466b      	mov	r3, sp
     dac:	8b19      	ldrh	r1, [r3, #24]
     dae:	8b9a      	ldrh	r2, [r3, #28]
     db0:	b2b3      	uxth	r3, r6
     db2:	9808      	ldr	r0, [sp, #32]
     db4:	3001      	adds	r0, #1
     db6:	469a      	mov	sl, r3
     db8:	005b      	lsls	r3, r3, #1
     dba:	18c3      	adds	r3, r0, r3
     dbc:	b21b      	sxth	r3, r3
     dbe:	920a      	str	r2, [sp, #40]	; 0x28
     dc0:	4650      	mov	r0, sl
     dc2:	1a12      	subs	r2, r2, r0
     dc4:	b212      	sxth	r2, r2
     dc6:	9109      	str	r1, [sp, #36]	; 0x24
     dc8:	1949      	adds	r1, r1, r5
     dca:	b209      	sxth	r1, r1
     dcc:	4648      	mov	r0, r9
     dce:	9000      	str	r0, [sp, #0]
     dd0:	9803      	ldr	r0, [sp, #12]
     dd2:	4f2f      	ldr	r7, [pc, #188]	; (e90 <ST7789_fillCircleHelper+0x140>)
     dd4:	47b8      	blx	r7
		 ST7789_drawFastVLine(gfx,x0+y, y0-x, 2*x+1+delta, color);
     dd6:	466b      	mov	r3, sp
     dd8:	891b      	ldrh	r3, [r3, #8]
     dda:	b21b      	sxth	r3, r3
     ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     dde:	1b52      	subs	r2, r2, r5
     de0:	b212      	sxth	r2, r2
     de2:	9909      	ldr	r1, [sp, #36]	; 0x24
     de4:	4451      	add	r1, sl
     de6:	b209      	sxth	r1, r1
     de8:	464f      	mov	r7, r9
     dea:	9700      	str	r7, [sp, #0]
     dec:	9803      	ldr	r0, [sp, #12]
     dee:	4f28      	ldr	r7, [pc, #160]	; (e90 <ST7789_fillCircleHelper+0x140>)
     df0:	47b8      	blx	r7
     df2:	e01b      	b.n	e2c <ST7789_fillCircleHelper+0xdc>
     df4:	3501      	adds	r5, #1
     df6:	b2ad      	uxth	r5, r5
     df8:	9f02      	ldr	r7, [sp, #8]
     dfa:	3702      	adds	r7, #2
     dfc:	b2bb      	uxth	r3, r7
     dfe:	9302      	str	r3, [sp, #8]
 while (x<y) {
     e00:	455e      	cmp	r6, fp
     e02:	dd3d      	ble.n	e80 <ST7789_fillCircleHelper+0x130>
	 if (f >= 0) {
     e04:	2c00      	cmp	r4, #0
     e06:	db08      	blt.n	e1a <ST7789_fillCircleHelper+0xca>
		 y--;
     e08:	3e01      	subs	r6, #1
     e0a:	b236      	sxth	r6, r6
		 ddF_y += 2;
     e0c:	4643      	mov	r3, r8
     e0e:	3302      	adds	r3, #2
     e10:	b29b      	uxth	r3, r3
     e12:	b21a      	sxth	r2, r3
     e14:	4690      	mov	r8, r2
		 f     += ddF_y;
     e16:	191c      	adds	r4, r3, r4
     e18:	b224      	sxth	r4, r4
	 x++;
     e1a:	b22b      	sxth	r3, r5
     e1c:	469b      	mov	fp, r3
	 f+= ddF_x;
     e1e:	006b      	lsls	r3, r5, #1
     e20:	3301      	adds	r3, #1
     e22:	191c      	adds	r4, r3, r4
     e24:	b224      	sxth	r4, r4
	 if (cornername & 0x1) 
     e26:	9b04      	ldr	r3, [sp, #16]
     e28:	2b00      	cmp	r3, #0
     e2a:	d1be      	bne.n	daa <ST7789_fillCircleHelper+0x5a>
	 if (cornername & 0x2) {
     e2c:	9b05      	ldr	r3, [sp, #20]
     e2e:	2b00      	cmp	r3, #0
     e30:	d0e0      	beq.n	df4 <ST7789_fillCircleHelper+0xa4>
		 ST7789_drawFastVLine(gfx,x0-x, y0-y, 2*y+1+delta, color);
     e32:	466b      	mov	r3, sp
     e34:	8b19      	ldrh	r1, [r3, #24]
     e36:	8b9a      	ldrh	r2, [r3, #28]
     e38:	b2b3      	uxth	r3, r6
     e3a:	9808      	ldr	r0, [sp, #32]
     e3c:	3001      	adds	r0, #1
     e3e:	001f      	movs	r7, r3
     e40:	005b      	lsls	r3, r3, #1
     e42:	18c3      	adds	r3, r0, r3
     e44:	b21b      	sxth	r3, r3
     e46:	0010      	movs	r0, r2
     e48:	920a      	str	r2, [sp, #40]	; 0x28
     e4a:	970b      	str	r7, [sp, #44]	; 0x2c
     e4c:	1bc2      	subs	r2, r0, r7
     e4e:	b212      	sxth	r2, r2
     e50:	9109      	str	r1, [sp, #36]	; 0x24
     e52:	1b49      	subs	r1, r1, r5
     e54:	b209      	sxth	r1, r1
     e56:	464f      	mov	r7, r9
     e58:	9700      	str	r7, [sp, #0]
     e5a:	9803      	ldr	r0, [sp, #12]
     e5c:	4f0c      	ldr	r7, [pc, #48]	; (e90 <ST7789_fillCircleHelper+0x140>)
     e5e:	46ba      	mov	sl, r7
     e60:	47b8      	blx	r7
		 ST7789_drawFastVLine(gfx,x0-y, y0-x, 2*x+1+delta, color);
     e62:	466b      	mov	r3, sp
     e64:	891b      	ldrh	r3, [r3, #8]
     e66:	b21b      	sxth	r3, r3
     e68:	980a      	ldr	r0, [sp, #40]	; 0x28
     e6a:	1b42      	subs	r2, r0, r5
     e6c:	b212      	sxth	r2, r2
     e6e:	9809      	ldr	r0, [sp, #36]	; 0x24
     e70:	990b      	ldr	r1, [sp, #44]	; 0x2c
     e72:	1a41      	subs	r1, r0, r1
     e74:	b209      	sxth	r1, r1
     e76:	464f      	mov	r7, r9
     e78:	9700      	str	r7, [sp, #0]
     e7a:	9803      	ldr	r0, [sp, #12]
     e7c:	47d0      	blx	sl
     e7e:	e7b9      	b.n	df4 <ST7789_fillCircleHelper+0xa4>
	 }
 }
	
}
     e80:	b00d      	add	sp, #52	; 0x34
     e82:	bc3c      	pop	{r2, r3, r4, r5}
     e84:	4690      	mov	r8, r2
     e86:	4699      	mov	r9, r3
     e88:	46a2      	mov	sl, r4
     e8a:	46ab      	mov	fp, r5
     e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e8e:	46c0      	nop			; (mov r8, r8)
     e90:	00000951 	.word	0x00000951

00000e94 <ST7789_fillCircle>:
{
     e94:	b5f0      	push	{r4, r5, r6, r7, lr}
     e96:	b087      	sub	sp, #28
     e98:	0016      	movs	r6, r2
     e9a:	001f      	movs	r7, r3
     e9c:	ab0c      	add	r3, sp, #48	; 0x30
     e9e:	881c      	ldrh	r4, [r3, #0]
	ST7789_drawFastVLine(gfx,x0, y0-r, 2*r+1, color);
     ea0:	b2ba      	uxth	r2, r7
     ea2:	0053      	lsls	r3, r2, #1
     ea4:	3301      	adds	r3, #1
     ea6:	b21b      	sxth	r3, r3
     ea8:	1ab2      	subs	r2, r6, r2
     eaa:	b212      	sxth	r2, r2
     eac:	9400      	str	r4, [sp, #0]
     eae:	9105      	str	r1, [sp, #20]
     eb0:	9004      	str	r0, [sp, #16]
     eb2:	4d07      	ldr	r5, [pc, #28]	; (ed0 <ST7789_fillCircle+0x3c>)
     eb4:	47a8      	blx	r5
	ST7789_fillCircleHelper(gfx,x0, y0, r, 3, 1,color);
     eb6:	9402      	str	r4, [sp, #8]
     eb8:	2301      	movs	r3, #1
     eba:	9301      	str	r3, [sp, #4]
     ebc:	3302      	adds	r3, #2
     ebe:	9300      	str	r3, [sp, #0]
     ec0:	003b      	movs	r3, r7
     ec2:	0032      	movs	r2, r6
     ec4:	9905      	ldr	r1, [sp, #20]
     ec6:	9804      	ldr	r0, [sp, #16]
     ec8:	4c02      	ldr	r4, [pc, #8]	; (ed4 <ST7789_fillCircle+0x40>)
     eca:	47a0      	blx	r4
}
     ecc:	b007      	add	sp, #28
     ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ed0:	00000951 	.word	0x00000951
     ed4:	00000d51 	.word	0x00000d51

00000ed8 <ST7789_DrawCharAt>:


void ST7789_DrawCharAt(struct ST7789_param *gfx,int x, int y, char ascii_char,sFONT *font,uint8_t font_size ,int colored)
{
     ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
     eda:	46de      	mov	lr, fp
     edc:	4657      	mov	r7, sl
     ede:	464e      	mov	r6, r9
     ee0:	4645      	mov	r5, r8
     ee2:	b5e0      	push	{r5, r6, r7, lr}
     ee4:	b08d      	sub	sp, #52	; 0x34
     ee6:	9005      	str	r0, [sp, #20]
     ee8:	910a      	str	r1, [sp, #40]	; 0x28
     eea:	920b      	str	r2, [sp, #44]	; 0x2c
     eec:	aa16      	add	r2, sp, #88	; 0x58
     eee:	ca80      	ldmia	r2!, {r7}
     ef0:	7812      	ldrb	r2, [r2, #0]
     ef2:	9204      	str	r2, [sp, #16]
	int i, j;
	unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
     ef4:	88f9      	ldrh	r1, [r7, #6]
     ef6:	88b8      	ldrh	r0, [r7, #4]
     ef8:	2207      	movs	r2, #7
     efa:	4002      	ands	r2, r0
     efc:	1e54      	subs	r4, r2, #1
     efe:	41a2      	sbcs	r2, r4
     f00:	08c0      	lsrs	r0, r0, #3
     f02:	1812      	adds	r2, r2, r0
     f04:	3b20      	subs	r3, #32
     f06:	434b      	muls	r3, r1
     f08:	4353      	muls	r3, r2
     f0a:	001e      	movs	r6, r3
	const unsigned char* ptr = &font->table[char_offset];
	//  printf("char %c\r\n",ascii_char);
	for (j = 0; j < font->Height; j++) {
     f0c:	2300      	movs	r3, #0
     f0e:	9307      	str	r3, [sp, #28]
     f10:	2900      	cmp	r1, #0
     f12:	dd61      	ble.n	fd8 <ST7789_DrawCharAt+0x100>
				{
					ST7789_drawAbsoultePixel(gfx,x + i, y + j, colored);
				}
				else
				{
					ST7789_fillRect(gfx,x+(i*font_size),y+(j*font_size),font_size,font_size, colored);
     f14:	4b34      	ldr	r3, [pc, #208]	; (fe8 <ST7789_DrawCharAt+0x110>)
     f16:	469a      	mov	sl, r3
			if ((font->table[char_offset]) & (0x80 >> (i % 8))) 
     f18:	46b8      	mov	r8, r7
     f1a:	0037      	movs	r7, r6
     f1c:	e042      	b.n	fa4 <ST7789_DrawCharAt+0xcc>
					ST7789_drawAbsoultePixel(gfx,x + i, y + j, colored);
     f1e:	ab0a      	add	r3, sp, #40	; 0x28
     f20:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
     f22:	9a08      	ldr	r2, [sp, #32]
     f24:	1951      	adds	r1, r2, r5
     f26:	b209      	sxth	r1, r1
     f28:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f2a:	9805      	ldr	r0, [sp, #20]
     f2c:	4f2f      	ldr	r7, [pc, #188]	; (fec <ST7789_DrawCharAt+0x114>)
     f2e:	47b8      	blx	r7
				}
				
			}
			if (i % 8 == 7) {
				ptr++;
				char_offset++;
     f30:	3c07      	subs	r4, #7
     f32:	4262      	negs	r2, r4
     f34:	4162      	adcs	r2, r4
     f36:	9b03      	ldr	r3, [sp, #12]
     f38:	469c      	mov	ip, r3
     f3a:	4494      	add	ip, r2
     f3c:	4663      	mov	r3, ip
     f3e:	9303      	str	r3, [sp, #12]
		for (i = 0; i < font->Width; i++) {
     f40:	3501      	adds	r5, #1
     f42:	4643      	mov	r3, r8
     f44:	889b      	ldrh	r3, [r3, #4]
     f46:	444e      	add	r6, r9
     f48:	b2b6      	uxth	r6, r6
     f4a:	42ab      	cmp	r3, r5
     f4c:	dd1c      	ble.n	f88 <ST7789_DrawCharAt+0xb0>
			if ((font->table[char_offset]) & (0x80 >> (i % 8))) 
     f4e:	17eb      	asrs	r3, r5, #31
     f50:	0f5b      	lsrs	r3, r3, #29
     f52:	18ec      	adds	r4, r5, r3
     f54:	2207      	movs	r2, #7
     f56:	4014      	ands	r4, r2
     f58:	1ae4      	subs	r4, r4, r3
     f5a:	4643      	mov	r3, r8
     f5c:	681b      	ldr	r3, [r3, #0]
     f5e:	9a03      	ldr	r2, [sp, #12]
     f60:	5c9a      	ldrb	r2, [r3, r2]
     f62:	2380      	movs	r3, #128	; 0x80
     f64:	4123      	asrs	r3, r4
     f66:	4213      	tst	r3, r2
     f68:	d0e2      	beq.n	f30 <ST7789_DrawCharAt+0x58>
				if (font_size == 1)
     f6a:	9b04      	ldr	r3, [sp, #16]
     f6c:	2b01      	cmp	r3, #1
     f6e:	d0d6      	beq.n	f1e <ST7789_DrawCharAt+0x46>
					ST7789_fillRect(gfx,x+(i*font_size),y+(j*font_size),font_size,font_size, colored);
     f70:	466b      	mov	r3, sp
     f72:	2210      	movs	r2, #16
     f74:	5e9b      	ldrsh	r3, [r3, r2]
     f76:	b231      	sxth	r1, r6
     f78:	aa0a      	add	r2, sp, #40	; 0x28
     f7a:	8f12      	ldrh	r2, [r2, #56]	; 0x38
     f7c:	9201      	str	r2, [sp, #4]
     f7e:	9300      	str	r3, [sp, #0]
     f80:	9a06      	ldr	r2, [sp, #24]
     f82:	9805      	ldr	r0, [sp, #20]
     f84:	47d0      	blx	sl
     f86:	e7d3      	b.n	f30 <ST7789_DrawCharAt+0x58>
     f88:	4667      	mov	r7, ip
			}
		}
		if (font->Width % 8 != 0) {
     f8a:	2207      	movs	r2, #7
     f8c:	4013      	ands	r3, r2
			ptr++;
			char_offset++;
     f8e:	1e5a      	subs	r2, r3, #1
     f90:	4193      	sbcs	r3, r2
     f92:	18ff      	adds	r7, r7, r3
	for (j = 0; j < font->Height; j++) {
     f94:	9b07      	ldr	r3, [sp, #28]
     f96:	3301      	adds	r3, #1
     f98:	001a      	movs	r2, r3
     f9a:	9307      	str	r3, [sp, #28]
     f9c:	4643      	mov	r3, r8
     f9e:	88db      	ldrh	r3, [r3, #6]
     fa0:	4293      	cmp	r3, r2
     fa2:	dd19      	ble.n	fd8 <ST7789_DrawCharAt+0x100>
		for (i = 0; i < font->Width; i++) {
     fa4:	4643      	mov	r3, r8
     fa6:	889b      	ldrh	r3, [r3, #4]
     fa8:	2b00      	cmp	r3, #0
     faa:	ddee      	ble.n	f8a <ST7789_DrawCharAt+0xb2>
					ST7789_fillRect(gfx,x+(i*font_size),y+(j*font_size),font_size,font_size, colored);
     fac:	466b      	mov	r3, sp
     fae:	8a1b      	ldrh	r3, [r3, #16]
     fb0:	4699      	mov	r9, r3
     fb2:	466b      	mov	r3, sp
     fb4:	8b9b      	ldrh	r3, [r3, #28]
     fb6:	466a      	mov	r2, sp
     fb8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
     fba:	4649      	mov	r1, r9
     fbc:	4359      	muls	r1, r3
     fbe:	1851      	adds	r1, r2, r1
     fc0:	b209      	sxth	r1, r1
     fc2:	9106      	str	r1, [sp, #24]
     fc4:	4669      	mov	r1, sp
     fc6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
     fc8:	9108      	str	r1, [sp, #32]
     fca:	000e      	movs	r6, r1
     fcc:	2500      	movs	r5, #0
					ST7789_drawAbsoultePixel(gfx,x + i, y + j, colored);
     fce:	189b      	adds	r3, r3, r2
     fd0:	b21b      	sxth	r3, r3
     fd2:	9309      	str	r3, [sp, #36]	; 0x24
     fd4:	9703      	str	r7, [sp, #12]
     fd6:	e7ba      	b.n	f4e <ST7789_DrawCharAt+0x76>
		}
	}
}
     fd8:	b00d      	add	sp, #52	; 0x34
     fda:	bc3c      	pop	{r2, r3, r4, r5}
     fdc:	4690      	mov	r8, r2
     fde:	4699      	mov	r9, r3
     fe0:	46a2      	mov	sl, r4
     fe2:	46ab      	mov	fp, r5
     fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fe6:	46c0      	nop			; (mov r8, r8)
     fe8:	00000ad5 	.word	0x00000ad5
     fec:	0000087d 	.word	0x0000087d

00000ff0 <ST7789_DrawStringAt>:

void ST7789_DrawStringAt(struct ST7789_param *gfx,int x, int y, const char* text, sFONT* font,uint8_t font_size ,int colored)
	{
     ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ff2:	46d6      	mov	lr, sl
     ff4:	464f      	mov	r7, r9
     ff6:	b580      	push	{r7, lr}
     ff8:	b087      	sub	sp, #28
     ffa:	9004      	str	r0, [sp, #16]
     ffc:	000d      	movs	r5, r1
     ffe:	9205      	str	r2, [sp, #20]
    1000:	001c      	movs	r4, r3
    1002:	ab0e      	add	r3, sp, #56	; 0x38
    1004:	cb80      	ldmia	r3!, {r7}
    1006:	781b      	ldrb	r3, [r3, #0]
    1008:	4699      	mov	r9, r3
    100a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    100c:	469a      	mov	sl, r3
		const char* p_text = text;
		unsigned int counter = 0;
		int refcolumn = x;
		
		/* Send the string character by character on EPD */
		while (*p_text != 0) {
    100e:	7823      	ldrb	r3, [r4, #0]
    1010:	2b00      	cmp	r3, #0
    1012:	d011      	beq.n	1038 <ST7789_DrawStringAt+0x48>
			/* Display one character on EPD */
			ST7789_DrawCharAt(gfx,refcolumn, y, *p_text, font,font_size ,colored);
    1014:	4e0b      	ldr	r6, [pc, #44]	; (1044 <ST7789_DrawStringAt+0x54>)
    1016:	4652      	mov	r2, sl
    1018:	9202      	str	r2, [sp, #8]
    101a:	464a      	mov	r2, r9
    101c:	9201      	str	r2, [sp, #4]
    101e:	9700      	str	r7, [sp, #0]
    1020:	9a05      	ldr	r2, [sp, #20]
    1022:	0029      	movs	r1, r5
    1024:	9804      	ldr	r0, [sp, #16]
    1026:	47b0      	blx	r6
			/* Decrement the column position by 16 */
			refcolumn += (font->Width*font_size);
    1028:	88bb      	ldrh	r3, [r7, #4]
    102a:	464a      	mov	r2, r9
    102c:	4353      	muls	r3, r2
    102e:	18ed      	adds	r5, r5, r3
			/* Point on the next character */
			p_text++;
    1030:	3401      	adds	r4, #1
		while (*p_text != 0) {
    1032:	7823      	ldrb	r3, [r4, #0]
    1034:	2b00      	cmp	r3, #0
    1036:	d1ee      	bne.n	1016 <ST7789_DrawStringAt+0x26>
			counter++;
		}
	}
    1038:	b007      	add	sp, #28
    103a:	bc0c      	pop	{r2, r3}
    103c:	4691      	mov	r9, r2
    103e:	469a      	mov	sl, r3
    1040:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	00000ed9 	.word	0x00000ed9

00001048 <ST7789_drawBitmap>:
	
void ST7789_drawBitmap(struct ST7789_param *gfx,int16_t x, int16_t y,const uint8_t *bitmap, int16_t w, int16_t h,uint16_t color)
{
    1048:	b5f0      	push	{r4, r5, r6, r7, lr}
    104a:	46de      	mov	lr, fp
    104c:	4657      	mov	r7, sl
    104e:	464e      	mov	r6, r9
    1050:	4645      	mov	r5, r8
    1052:	b5e0      	push	{r5, r6, r7, lr}
    1054:	b089      	sub	sp, #36	; 0x24
    1056:	9002      	str	r0, [sp, #8]
    1058:	4688      	mov	r8, r1
    105a:	9207      	str	r2, [sp, #28]
    105c:	4699      	mov	r9, r3
    105e:	ab12      	add	r3, sp, #72	; 0x48
    1060:	2200      	movs	r2, #0
    1062:	5e9b      	ldrsh	r3, [r3, r2]
    1064:	001a      	movs	r2, r3
    1066:	9304      	str	r3, [sp, #16]
    1068:	ab13      	add	r3, sp, #76	; 0x4c
    106a:	2100      	movs	r1, #0
    106c:	5e5b      	ldrsh	r3, [r3, r1]
    106e:	0018      	movs	r0, r3
    1070:	9305      	str	r3, [sp, #20]
    1072:	ab14      	add	r3, sp, #80	; 0x50
    1074:	881b      	ldrh	r3, [r3, #0]
    1076:	9303      	str	r3, [sp, #12]
		int16_t i, j, byteWidth = (w + 7) / 8;
    1078:	3207      	adds	r2, #7
    107a:	17d1      	asrs	r1, r2, #31
    107c:	2307      	movs	r3, #7
    107e:	400b      	ands	r3, r1
    1080:	189b      	adds	r3, r3, r2
    1082:	10db      	asrs	r3, r3, #3
    1084:	9306      	str	r3, [sp, #24]
		for(j=0; j<h; j++) 
    1086:	2300      	movs	r3, #0
    1088:	469a      	mov	sl, r3
    108a:	2800      	cmp	r0, #0
    108c:	dd36      	ble.n	10fc <ST7789_drawBitmap+0xb4>
    108e:	9b04      	ldr	r3, [sp, #16]
    1090:	1e5f      	subs	r7, r3, #1
    1092:	b2bf      	uxth	r7, r7
    1094:	3701      	adds	r7, #1
    1096:	003b      	movs	r3, r7
    1098:	464f      	mov	r7, r9
    109a:	4699      	mov	r9, r3
    109c:	e020      	b.n	10e0 <ST7789_drawBitmap+0x98>
    109e:	3401      	adds	r4, #1
		{
			for(i=0; i<w; i++ ) 
    10a0:	45a1      	cmp	r9, r4
    10a2:	d016      	beq.n	10d2 <ST7789_drawBitmap+0x8a>
			{
			/*	printf("eq=%d\r\n",j * byteWidth + i / 8); 
				printf("bitmap[%d]=%d, ",count,bitmap[count]);
			*/
				if(bitmap[j * byteWidth + i / 8] & (128 >> (i & 7)))//(1 << (shift % 8)))
    10a4:	b2a1      	uxth	r1, r4
    10a6:	b222      	sxth	r2, r4
    10a8:	17d3      	asrs	r3, r2, #31
    10aa:	402b      	ands	r3, r5
    10ac:	189b      	adds	r3, r3, r2
    10ae:	10db      	asrs	r3, r3, #3
    10b0:	9a00      	ldr	r2, [sp, #0]
    10b2:	18ba      	adds	r2, r7, r2
    10b4:	5cd2      	ldrb	r2, [r2, r3]
    10b6:	0028      	movs	r0, r5
    10b8:	4008      	ands	r0, r1
    10ba:	2380      	movs	r3, #128	; 0x80
    10bc:	4103      	asrs	r3, r0
    10be:	4213      	tst	r3, r2
    10c0:	d0ed      	beq.n	109e <ST7789_drawBitmap+0x56>
				{
					ST7789_drawAbsoultePixel(gfx,x+i, y+j, color);	
    10c2:	4441      	add	r1, r8
    10c4:	b209      	sxth	r1, r1
    10c6:	9b03      	ldr	r3, [sp, #12]
    10c8:	9a01      	ldr	r2, [sp, #4]
    10ca:	9802      	ldr	r0, [sp, #8]
    10cc:	4e0f      	ldr	r6, [pc, #60]	; (110c <ST7789_drawBitmap+0xc4>)
    10ce:	47b0      	blx	r6
    10d0:	e7e5      	b.n	109e <ST7789_drawBitmap+0x56>
		for(j=0; j<h; j++) 
    10d2:	4653      	mov	r3, sl
    10d4:	3301      	adds	r3, #1
    10d6:	b21b      	sxth	r3, r3
    10d8:	469a      	mov	sl, r3
    10da:	9b05      	ldr	r3, [sp, #20]
    10dc:	4553      	cmp	r3, sl
    10de:	dd0d      	ble.n	10fc <ST7789_drawBitmap+0xb4>
			for(i=0; i<w; i++ ) 
    10e0:	9b04      	ldr	r3, [sp, #16]
    10e2:	2b00      	cmp	r3, #0
    10e4:	ddf5      	ble.n	10d2 <ST7789_drawBitmap+0x8a>
				if(bitmap[j * byteWidth + i / 8] & (128 >> (i & 7)))//(1 << (shift % 8)))
    10e6:	9e06      	ldr	r6, [sp, #24]
    10e8:	4653      	mov	r3, sl
    10ea:	435e      	muls	r6, r3
    10ec:	2400      	movs	r4, #0
    10ee:	2507      	movs	r5, #7
					ST7789_drawAbsoultePixel(gfx,x+i, y+j, color);	
    10f0:	9b07      	ldr	r3, [sp, #28]
    10f2:	4453      	add	r3, sl
    10f4:	b21b      	sxth	r3, r3
    10f6:	9301      	str	r3, [sp, #4]
    10f8:	9600      	str	r6, [sp, #0]
    10fa:	e7d3      	b.n	10a4 <ST7789_drawBitmap+0x5c>

				}
			}
		}
}
    10fc:	b009      	add	sp, #36	; 0x24
    10fe:	bc3c      	pop	{r2, r3, r4, r5}
    1100:	4690      	mov	r8, r2
    1102:	4699      	mov	r9, r3
    1104:	46a2      	mov	sl, r4
    1106:	46ab      	mov	fp, r5
    1108:	bdf0      	pop	{r4, r5, r6, r7, pc}
    110a:	46c0      	nop			; (mov r8, r8)
    110c:	0000087d 	.word	0x0000087d

00001110 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1110:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    1112:	4b02      	ldr	r3, [pc, #8]	; (111c <delay_init+0xc>)
    1114:	6018      	str	r0, [r3, #0]
    1116:	4b02      	ldr	r3, [pc, #8]	; (1120 <delay_init+0x10>)
    1118:	4798      	blx	r3
}
    111a:	bd10      	pop	{r4, pc}
    111c:	20000888 	.word	0x20000888
    1120:	000018e9 	.word	0x000018e9

00001124 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1124:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1126:	4b04      	ldr	r3, [pc, #16]	; (1138 <delay_ms+0x14>)
    1128:	681c      	ldr	r4, [r3, #0]
    112a:	4b04      	ldr	r3, [pc, #16]	; (113c <delay_ms+0x18>)
    112c:	4798      	blx	r3
    112e:	0001      	movs	r1, r0
    1130:	0020      	movs	r0, r4
    1132:	4b03      	ldr	r3, [pc, #12]	; (1140 <delay_ms+0x1c>)
    1134:	4798      	blx	r3
}
    1136:	bd10      	pop	{r4, pc}
    1138:	20000888 	.word	0x20000888
    113c:	000014b5 	.word	0x000014b5
    1140:	000018fd 	.word	0x000018fd

00001144 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1144:	b570      	push	{r4, r5, r6, lr}
    1146:	0006      	movs	r6, r0
    1148:	000c      	movs	r4, r1
    114a:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    114c:	2800      	cmp	r0, #0
    114e:	d00d      	beq.n	116c <io_write+0x28>
    1150:	0008      	movs	r0, r1
    1152:	1e43      	subs	r3, r0, #1
    1154:	4198      	sbcs	r0, r3
    1156:	b2c0      	uxtb	r0, r0
    1158:	2234      	movs	r2, #52	; 0x34
    115a:	4905      	ldr	r1, [pc, #20]	; (1170 <io_write+0x2c>)
    115c:	4b05      	ldr	r3, [pc, #20]	; (1174 <io_write+0x30>)
    115e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1160:	6833      	ldr	r3, [r6, #0]
    1162:	002a      	movs	r2, r5
    1164:	0021      	movs	r1, r4
    1166:	0030      	movs	r0, r6
    1168:	4798      	blx	r3
}
    116a:	bd70      	pop	{r4, r5, r6, pc}
    116c:	2000      	movs	r0, #0
    116e:	e7f3      	b.n	1158 <io_write+0x14>
    1170:	00006ed8 	.word	0x00006ed8
    1174:	00001475 	.word	0x00001475

00001178 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1178:	b570      	push	{r4, r5, r6, lr}
    117a:	0006      	movs	r6, r0
    117c:	000c      	movs	r4, r1
    117e:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    1180:	2800      	cmp	r0, #0
    1182:	d00d      	beq.n	11a0 <io_read+0x28>
    1184:	0008      	movs	r0, r1
    1186:	1e43      	subs	r3, r0, #1
    1188:	4198      	sbcs	r0, r3
    118a:	b2c0      	uxtb	r0, r0
    118c:	223d      	movs	r2, #61	; 0x3d
    118e:	4905      	ldr	r1, [pc, #20]	; (11a4 <io_read+0x2c>)
    1190:	4b05      	ldr	r3, [pc, #20]	; (11a8 <io_read+0x30>)
    1192:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1194:	6873      	ldr	r3, [r6, #4]
    1196:	002a      	movs	r2, r5
    1198:	0021      	movs	r1, r4
    119a:	0030      	movs	r0, r6
    119c:	4798      	blx	r3
}
    119e:	bd70      	pop	{r4, r5, r6, pc}
    11a0:	2000      	movs	r0, #0
    11a2:	e7f3      	b.n	118c <io_read+0x14>
    11a4:	00006ed8 	.word	0x00006ed8
    11a8:	00001475 	.word	0x00001475

000011ac <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    11ac:	b570      	push	{r4, r5, r6, lr}
    11ae:	0004      	movs	r4, r0
    11b0:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    11b2:	2800      	cmp	r0, #0
    11b4:	d016      	beq.n	11e4 <spi_m_sync_init+0x38>
    11b6:	0008      	movs	r0, r1
    11b8:	1e43      	subs	r3, r0, #1
    11ba:	4198      	sbcs	r0, r3
    11bc:	b2c0      	uxtb	r0, r0
    11be:	2240      	movs	r2, #64	; 0x40
    11c0:	4909      	ldr	r1, [pc, #36]	; (11e8 <spi_m_sync_init+0x3c>)
    11c2:	4b0a      	ldr	r3, [pc, #40]	; (11ec <spi_m_sync_init+0x40>)
    11c4:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    11c6:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    11c8:	1d20      	adds	r0, r4, #4
    11ca:	0029      	movs	r1, r5
    11cc:	4b08      	ldr	r3, [pc, #32]	; (11f0 <spi_m_sync_init+0x44>)
    11ce:	4798      	blx	r3

	if (rc < 0) {
    11d0:	2800      	cmp	r0, #0
    11d2:	db06      	blt.n	11e2 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    11d4:	4b07      	ldr	r3, [pc, #28]	; (11f4 <spi_m_sync_init+0x48>)
    11d6:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    11d8:	4b07      	ldr	r3, [pc, #28]	; (11f8 <spi_m_sync_init+0x4c>)
    11da:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    11dc:	4b07      	ldr	r3, [pc, #28]	; (11fc <spi_m_sync_init+0x50>)
    11de:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    11e0:	2000      	movs	r0, #0
}
    11e2:	bd70      	pop	{r4, r5, r6, pc}
    11e4:	2000      	movs	r0, #0
    11e6:	e7ea      	b.n	11be <spi_m_sync_init+0x12>
    11e8:	00006eec 	.word	0x00006eec
    11ec:	00001475 	.word	0x00001475
    11f0:	00001659 	.word	0x00001659
    11f4:	ffff8000 	.word	0xffff8000
    11f8:	000012ad 	.word	0x000012ad
    11fc:	00001271 	.word	0x00001271

00001200 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    1200:	b510      	push	{r4, lr}
    1202:	0004      	movs	r4, r0
	ASSERT(spi);
    1204:	1e43      	subs	r3, r0, #1
    1206:	4198      	sbcs	r0, r3
    1208:	b2c0      	uxtb	r0, r0
    120a:	2257      	movs	r2, #87	; 0x57
    120c:	4903      	ldr	r1, [pc, #12]	; (121c <spi_m_sync_enable+0x1c>)
    120e:	4b04      	ldr	r3, [pc, #16]	; (1220 <spi_m_sync_enable+0x20>)
    1210:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    1212:	1d20      	adds	r0, r4, #4
    1214:	4b03      	ldr	r3, [pc, #12]	; (1224 <spi_m_sync_enable+0x24>)
    1216:	4798      	blx	r3
}
    1218:	bd10      	pop	{r4, pc}
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	00006eec 	.word	0x00006eec
    1220:	00001475 	.word	0x00001475
    1224:	00001751 	.word	0x00001751

00001228 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1228:	b530      	push	{r4, r5, lr}
    122a:	b087      	sub	sp, #28
    122c:	0004      	movs	r4, r0
    122e:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1230:	2800      	cmp	r0, #0
    1232:	d014      	beq.n	125e <spi_m_sync_transfer+0x36>
    1234:	0008      	movs	r0, r1
    1236:	1e43      	subs	r3, r0, #1
    1238:	4198      	sbcs	r0, r3
    123a:	b2c0      	uxtb	r0, r0
    123c:	22b3      	movs	r2, #179	; 0xb3
    123e:	4909      	ldr	r1, [pc, #36]	; (1264 <spi_m_sync_transfer+0x3c>)
    1240:	4b09      	ldr	r3, [pc, #36]	; (1268 <spi_m_sync_transfer+0x40>)
    1242:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1244:	682b      	ldr	r3, [r5, #0]
    1246:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    1248:	686b      	ldr	r3, [r5, #4]
    124a:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    124c:	68ab      	ldr	r3, [r5, #8]
    124e:	9301      	str	r3, [sp, #4]
    1250:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1252:	1d20      	adds	r0, r4, #4
    1254:	a903      	add	r1, sp, #12
    1256:	4b05      	ldr	r3, [pc, #20]	; (126c <spi_m_sync_transfer+0x44>)
    1258:	4798      	blx	r3
}
    125a:	b007      	add	sp, #28
    125c:	bd30      	pop	{r4, r5, pc}
    125e:	2000      	movs	r0, #0
    1260:	e7ec      	b.n	123c <spi_m_sync_transfer+0x14>
    1262:	46c0      	nop			; (mov r8, r8)
    1264:	00006eec 	.word	0x00006eec
    1268:	00001475 	.word	0x00001475
    126c:	00001785 	.word	0x00001785

00001270 <_spi_m_sync_io_write>:
{
    1270:	b570      	push	{r4, r5, r6, lr}
    1272:	b084      	sub	sp, #16
    1274:	0004      	movs	r4, r0
    1276:	000e      	movs	r6, r1
    1278:	0015      	movs	r5, r2
	ASSERT(io);
    127a:	1e43      	subs	r3, r0, #1
    127c:	4198      	sbcs	r0, r3
    127e:	b2c0      	uxtb	r0, r0
    1280:	22a3      	movs	r2, #163	; 0xa3
    1282:	4907      	ldr	r1, [pc, #28]	; (12a0 <_spi_m_sync_io_write+0x30>)
    1284:	4b07      	ldr	r3, [pc, #28]	; (12a4 <_spi_m_sync_io_write+0x34>)
    1286:	4798      	blx	r3
	xfer.rxbuf = 0;
    1288:	2300      	movs	r3, #0
    128a:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    128c:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    128e:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1290:	0020      	movs	r0, r4
    1292:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    1294:	a901      	add	r1, sp, #4
    1296:	4b04      	ldr	r3, [pc, #16]	; (12a8 <_spi_m_sync_io_write+0x38>)
    1298:	4798      	blx	r3
}
    129a:	b004      	add	sp, #16
    129c:	bd70      	pop	{r4, r5, r6, pc}
    129e:	46c0      	nop			; (mov r8, r8)
    12a0:	00006eec 	.word	0x00006eec
    12a4:	00001475 	.word	0x00001475
    12a8:	00001229 	.word	0x00001229

000012ac <_spi_m_sync_io_read>:
{
    12ac:	b570      	push	{r4, r5, r6, lr}
    12ae:	b084      	sub	sp, #16
    12b0:	0004      	movs	r4, r0
    12b2:	000e      	movs	r6, r1
    12b4:	0015      	movs	r5, r2
	ASSERT(io);
    12b6:	1e43      	subs	r3, r0, #1
    12b8:	4198      	sbcs	r0, r3
    12ba:	b2c0      	uxtb	r0, r0
    12bc:	2287      	movs	r2, #135	; 0x87
    12be:	4907      	ldr	r1, [pc, #28]	; (12dc <_spi_m_sync_io_read+0x30>)
    12c0:	4b07      	ldr	r3, [pc, #28]	; (12e0 <_spi_m_sync_io_read+0x34>)
    12c2:	4798      	blx	r3
	xfer.rxbuf = buf;
    12c4:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    12c6:	2300      	movs	r3, #0
    12c8:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    12ca:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    12cc:	0020      	movs	r0, r4
    12ce:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    12d0:	a901      	add	r1, sp, #4
    12d2:	4b04      	ldr	r3, [pc, #16]	; (12e4 <_spi_m_sync_io_read+0x38>)
    12d4:	4798      	blx	r3
}
    12d6:	b004      	add	sp, #16
    12d8:	bd70      	pop	{r4, r5, r6, pc}
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	00006eec 	.word	0x00006eec
    12e0:	00001475 	.word	0x00001475
    12e4:	00001229 	.word	0x00001229

000012e8 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    12e8:	b570      	push	{r4, r5, r6, lr}
    12ea:	0004      	movs	r4, r0
    12ec:	000d      	movs	r5, r1
	ASSERT(spi && io);
    12ee:	2800      	cmp	r0, #0
    12f0:	d00b      	beq.n	130a <spi_m_sync_get_io_descriptor+0x22>
    12f2:	0008      	movs	r0, r1
    12f4:	1e43      	subs	r3, r0, #1
    12f6:	4198      	sbcs	r0, r3
    12f8:	b2c0      	uxtb	r0, r0
    12fa:	22bd      	movs	r2, #189	; 0xbd
    12fc:	4904      	ldr	r1, [pc, #16]	; (1310 <spi_m_sync_get_io_descriptor+0x28>)
    12fe:	4b05      	ldr	r3, [pc, #20]	; (1314 <spi_m_sync_get_io_descriptor+0x2c>)
    1300:	4798      	blx	r3
	*io = &spi->io;
    1302:	340c      	adds	r4, #12
    1304:	602c      	str	r4, [r5, #0]
	return 0;
}
    1306:	2000      	movs	r0, #0
    1308:	bd70      	pop	{r4, r5, r6, pc}
    130a:	2000      	movs	r0, #0
    130c:	e7f5      	b.n	12fa <spi_m_sync_get_io_descriptor+0x12>
    130e:	46c0      	nop			; (mov r8, r8)
    1310:	00006eec 	.word	0x00006eec
    1314:	00001475 	.word	0x00001475

00001318 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    131a:	46ce      	mov	lr, r9
    131c:	4647      	mov	r7, r8
    131e:	b580      	push	{r7, lr}
    1320:	0004      	movs	r4, r0
    1322:	000f      	movs	r7, r1
    1324:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    1326:	2800      	cmp	r0, #0
    1328:	d026      	beq.n	1378 <usart_sync_write+0x60>
    132a:	2900      	cmp	r1, #0
    132c:	d026      	beq.n	137c <usart_sync_write+0x64>
    132e:	0010      	movs	r0, r2
    1330:	1e43      	subs	r3, r0, #1
    1332:	4198      	sbcs	r0, r3
    1334:	22f1      	movs	r2, #241	; 0xf1
    1336:	4912      	ldr	r1, [pc, #72]	; (1380 <usart_sync_write+0x68>)
    1338:	4b12      	ldr	r3, [pc, #72]	; (1384 <usart_sync_write+0x6c>)
    133a:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    133c:	3408      	adds	r4, #8
    133e:	4d12      	ldr	r5, [pc, #72]	; (1388 <usart_sync_write+0x70>)
    1340:	0020      	movs	r0, r4
    1342:	47a8      	blx	r5
    1344:	2800      	cmp	r0, #0
    1346:	d0fb      	beq.n	1340 <usart_sync_write+0x28>
    1348:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    134a:	4b10      	ldr	r3, [pc, #64]	; (138c <usart_sync_write+0x74>)
    134c:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    134e:	4d0e      	ldr	r5, [pc, #56]	; (1388 <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    1350:	5db9      	ldrb	r1, [r7, r6]
    1352:	0020      	movs	r0, r4
    1354:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    1356:	0020      	movs	r0, r4
    1358:	47a8      	blx	r5
    135a:	2800      	cmp	r0, #0
    135c:	d0fb      	beq.n	1356 <usart_sync_write+0x3e>
			;
	} while (++offset < length);
    135e:	3601      	adds	r6, #1
    1360:	4546      	cmp	r6, r8
    1362:	d3f5      	bcc.n	1350 <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
    1364:	4d0a      	ldr	r5, [pc, #40]	; (1390 <usart_sync_write+0x78>)
    1366:	0020      	movs	r0, r4
    1368:	47a8      	blx	r5
    136a:	2800      	cmp	r0, #0
    136c:	d0fb      	beq.n	1366 <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
    136e:	0030      	movs	r0, r6
    1370:	bc0c      	pop	{r2, r3}
    1372:	4690      	mov	r8, r2
    1374:	4699      	mov	r9, r3
    1376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    1378:	2000      	movs	r0, #0
    137a:	e7db      	b.n	1334 <usart_sync_write+0x1c>
    137c:	2000      	movs	r0, #0
    137e:	e7d9      	b.n	1334 <usart_sync_write+0x1c>
    1380:	00006f08 	.word	0x00006f08
    1384:	00001475 	.word	0x00001475
    1388:	00001639 	.word	0x00001639
    138c:	00001629 	.word	0x00001629
    1390:	00001643 	.word	0x00001643

00001394 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1396:	46ce      	mov	lr, r9
    1398:	4647      	mov	r7, r8
    139a:	b580      	push	{r7, lr}
    139c:	0004      	movs	r4, r0
    139e:	000f      	movs	r7, r1
    13a0:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    13a2:	2800      	cmp	r0, #0
    13a4:	d01d      	beq.n	13e2 <usart_sync_read+0x4e>
    13a6:	2900      	cmp	r1, #0
    13a8:	d01d      	beq.n	13e6 <usart_sync_read+0x52>
    13aa:	0010      	movs	r0, r2
    13ac:	1e43      	subs	r3, r0, #1
    13ae:	4198      	sbcs	r0, r3
    13b0:	2286      	movs	r2, #134	; 0x86
    13b2:	0052      	lsls	r2, r2, #1
    13b4:	490d      	ldr	r1, [pc, #52]	; (13ec <usart_sync_read+0x58>)
    13b6:	4b0e      	ldr	r3, [pc, #56]	; (13f0 <usart_sync_read+0x5c>)
    13b8:	4798      	blx	r3
	uint32_t                      offset = 0;
    13ba:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    13bc:	3408      	adds	r4, #8
    13be:	4d0d      	ldr	r5, [pc, #52]	; (13f4 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    13c0:	4b0d      	ldr	r3, [pc, #52]	; (13f8 <usart_sync_read+0x64>)
    13c2:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
    13c4:	0020      	movs	r0, r4
    13c6:	47a8      	blx	r5
    13c8:	2800      	cmp	r0, #0
    13ca:	d0fb      	beq.n	13c4 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    13cc:	0020      	movs	r0, r4
    13ce:	47c8      	blx	r9
    13d0:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
    13d2:	3601      	adds	r6, #1
    13d4:	4546      	cmp	r6, r8
    13d6:	d3f5      	bcc.n	13c4 <usart_sync_read+0x30>

	return (int32_t)offset;
}
    13d8:	0030      	movs	r0, r6
    13da:	bc0c      	pop	{r2, r3}
    13dc:	4690      	mov	r8, r2
    13de:	4699      	mov	r9, r3
    13e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    13e2:	2000      	movs	r0, #0
    13e4:	e7e4      	b.n	13b0 <usart_sync_read+0x1c>
    13e6:	2000      	movs	r0, #0
    13e8:	e7e2      	b.n	13b0 <usart_sync_read+0x1c>
    13ea:	46c0      	nop			; (mov r8, r8)
    13ec:	00006f08 	.word	0x00006f08
    13f0:	00001475 	.word	0x00001475
    13f4:	0000164d 	.word	0x0000164d
    13f8:	00001631 	.word	0x00001631

000013fc <usart_sync_init>:
{
    13fc:	b570      	push	{r4, r5, r6, lr}
    13fe:	0005      	movs	r5, r0
    1400:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    1402:	2800      	cmp	r0, #0
    1404:	d013      	beq.n	142e <usart_sync_init+0x32>
    1406:	0008      	movs	r0, r1
    1408:	1e43      	subs	r3, r0, #1
    140a:	4198      	sbcs	r0, r3
    140c:	b2c0      	uxtb	r0, r0
    140e:	2234      	movs	r2, #52	; 0x34
    1410:	4908      	ldr	r1, [pc, #32]	; (1434 <usart_sync_init+0x38>)
    1412:	4b09      	ldr	r3, [pc, #36]	; (1438 <usart_sync_init+0x3c>)
    1414:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    1416:	0028      	movs	r0, r5
    1418:	3008      	adds	r0, #8
    141a:	0021      	movs	r1, r4
    141c:	4b07      	ldr	r3, [pc, #28]	; (143c <usart_sync_init+0x40>)
    141e:	4798      	blx	r3
	if (init_status) {
    1420:	2800      	cmp	r0, #0
    1422:	d103      	bne.n	142c <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
    1424:	4b06      	ldr	r3, [pc, #24]	; (1440 <usart_sync_init+0x44>)
    1426:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
    1428:	4b06      	ldr	r3, [pc, #24]	; (1444 <usart_sync_init+0x48>)
    142a:	602b      	str	r3, [r5, #0]
}
    142c:	bd70      	pop	{r4, r5, r6, pc}
    142e:	2000      	movs	r0, #0
    1430:	e7ed      	b.n	140e <usart_sync_init+0x12>
    1432:	46c0      	nop			; (mov r8, r8)
    1434:	00006f08 	.word	0x00006f08
    1438:	00001475 	.word	0x00001475
    143c:	000015e9 	.word	0x000015e9
    1440:	00001395 	.word	0x00001395
    1444:	00001319 	.word	0x00001319

00001448 <usart_sync_enable>:
{
    1448:	b510      	push	{r4, lr}
    144a:	0004      	movs	r4, r0
	ASSERT(descr);
    144c:	1e43      	subs	r3, r0, #1
    144e:	4198      	sbcs	r0, r3
    1450:	b2c0      	uxtb	r0, r0
    1452:	2253      	movs	r2, #83	; 0x53
    1454:	4904      	ldr	r1, [pc, #16]	; (1468 <usart_sync_enable+0x20>)
    1456:	4b05      	ldr	r3, [pc, #20]	; (146c <usart_sync_enable+0x24>)
    1458:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    145a:	0020      	movs	r0, r4
    145c:	3008      	adds	r0, #8
    145e:	4b04      	ldr	r3, [pc, #16]	; (1470 <usart_sync_enable+0x28>)
    1460:	4798      	blx	r3
}
    1462:	2000      	movs	r0, #0
    1464:	bd10      	pop	{r4, pc}
    1466:	46c0      	nop			; (mov r8, r8)
    1468:	00006f08 	.word	0x00006f08
    146c:	00001475 	.word	0x00001475
    1470:	00001615 	.word	0x00001615

00001474 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1474:	2800      	cmp	r0, #0
    1476:	d100      	bne.n	147a <assert+0x6>
		__asm("BKPT #0");
    1478:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    147a:	4770      	bx	lr

0000147c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    147c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    147e:	4a06      	ldr	r2, [pc, #24]	; (1498 <_sbrk+0x1c>)
    1480:	6812      	ldr	r2, [r2, #0]
    1482:	2a00      	cmp	r2, #0
    1484:	d004      	beq.n	1490 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1486:	4a04      	ldr	r2, [pc, #16]	; (1498 <_sbrk+0x1c>)
    1488:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    148a:	18c3      	adds	r3, r0, r3
    148c:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    148e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1490:	4902      	ldr	r1, [pc, #8]	; (149c <_sbrk+0x20>)
    1492:	4a01      	ldr	r2, [pc, #4]	; (1498 <_sbrk+0x1c>)
    1494:	6011      	str	r1, [r2, #0]
    1496:	e7f6      	b.n	1486 <_sbrk+0xa>
    1498:	2000088c 	.word	0x2000088c
    149c:	20002d50 	.word	0x20002d50

000014a0 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    14a0:	2001      	movs	r0, #1
    14a2:	4240      	negs	r0, r0
    14a4:	4770      	bx	lr

000014a6 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    14a6:	2380      	movs	r3, #128	; 0x80
    14a8:	019b      	lsls	r3, r3, #6
    14aa:	604b      	str	r3, [r1, #4]

	return 0;
}
    14ac:	2000      	movs	r0, #0
    14ae:	4770      	bx	lr

000014b0 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    14b0:	2000      	movs	r0, #0
    14b2:	4770      	bx	lr

000014b4 <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
    14b4:	23fa      	movs	r3, #250	; 0xfa
    14b6:	015b      	lsls	r3, r3, #5
    14b8:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    14ba:	4770      	bx	lr

000014bc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    14bc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    14be:	4b06      	ldr	r3, [pc, #24]	; (14d8 <_init_chip+0x1c>)
    14c0:	685a      	ldr	r2, [r3, #4]
    14c2:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    14c4:	4b05      	ldr	r3, [pc, #20]	; (14dc <_init_chip+0x20>)
    14c6:	4798      	blx	r3
	_sysctrl_init_sources();
    14c8:	4b05      	ldr	r3, [pc, #20]	; (14e0 <_init_chip+0x24>)
    14ca:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    14cc:	4b05      	ldr	r3, [pc, #20]	; (14e4 <_init_chip+0x28>)
    14ce:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    14d0:	20ff      	movs	r0, #255	; 0xff
    14d2:	4b05      	ldr	r3, [pc, #20]	; (14e8 <_init_chip+0x2c>)
    14d4:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    14d6:	bd10      	pop	{r4, pc}
    14d8:	41004000 	.word	0x41004000
    14dc:	0000150d 	.word	0x0000150d
    14e0:	00001895 	.word	0x00001895
    14e4:	000018d9 	.word	0x000018d9
    14e8:	000014ed 	.word	0x000014ed

000014ec <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    14ec:	07c3      	lsls	r3, r0, #31
    14ee:	d50a      	bpl.n	1506 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    14f0:	4b05      	ldr	r3, [pc, #20]	; (1508 <_gclk_init_generators_by_fref+0x1c>)
    14f2:	2280      	movs	r2, #128	; 0x80
    14f4:	0052      	lsls	r2, r2, #1
    14f6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    14f8:	2283      	movs	r2, #131	; 0x83
    14fa:	0252      	lsls	r2, r2, #9
    14fc:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    14fe:	001a      	movs	r2, r3
    1500:	7853      	ldrb	r3, [r2, #1]
    1502:	09db      	lsrs	r3, r3, #7
    1504:	d1fc      	bne.n	1500 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    1506:	4770      	bx	lr
    1508:	40000c00 	.word	0x40000c00

0000150c <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    150c:	4b06      	ldr	r3, [pc, #24]	; (1528 <_pm_init+0x1c>)
    150e:	7a1a      	ldrb	r2, [r3, #8]
    1510:	b2d2      	uxtb	r2, r2
    1512:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1514:	7a5a      	ldrb	r2, [r3, #9]
    1516:	b2d2      	uxtb	r2, r2
    1518:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    151a:	7a9a      	ldrb	r2, [r3, #10]
    151c:	b2d2      	uxtb	r2, r2
    151e:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1520:	7ada      	ldrb	r2, [r3, #11]
    1522:	b2d2      	uxtb	r2, r2
    1524:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    1526:	4770      	bx	lr
    1528:	40000400 	.word	0x40000400

0000152c <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    152c:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    152e:	07db      	lsls	r3, r3, #31
    1530:	d409      	bmi.n	1546 <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1532:	6803      	ldr	r3, [r0, #0]
    1534:	2202      	movs	r2, #2
    1536:	4313      	orrs	r3, r2
    1538:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    153a:	3201      	adds	r2, #1
    153c:	69c3      	ldr	r3, [r0, #28]
    153e:	421a      	tst	r2, r3
    1540:	d1fc      	bne.n	153c <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1542:	2000      	movs	r0, #0
}
    1544:	4770      	bx	lr
		return ERR_BUSY;
    1546:	2004      	movs	r0, #4
    1548:	4240      	negs	r0, r0
    154a:	e7fb      	b.n	1544 <_spi_sync_enable+0x18>

0000154c <_usart_init>:
{
    154c:	b510      	push	{r4, lr}
    154e:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1550:	4b1f      	ldr	r3, [pc, #124]	; (15d0 <_usart_init+0x84>)
    1552:	18c3      	adds	r3, r0, r3
    1554:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    1556:	b2db      	uxtb	r3, r3
    1558:	2b03      	cmp	r3, #3
    155a:	d004      	beq.n	1566 <_usart_init+0x1a>
	ASSERT(false);
    155c:	4a1d      	ldr	r2, [pc, #116]	; (15d4 <_usart_init+0x88>)
    155e:	491e      	ldr	r1, [pc, #120]	; (15d8 <_usart_init+0x8c>)
    1560:	2000      	movs	r0, #0
    1562:	4b1e      	ldr	r3, [pc, #120]	; (15dc <_usart_init+0x90>)
    1564:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1566:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1568:	07db      	lsls	r3, r3, #31
    156a:	d418      	bmi.n	159e <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    156c:	2203      	movs	r2, #3
    156e:	69e3      	ldr	r3, [r4, #28]
    1570:	421a      	tst	r2, r3
    1572:	d1fc      	bne.n	156e <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1574:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1576:	079b      	lsls	r3, r3, #30
    1578:	d50b      	bpl.n	1592 <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    157a:	6823      	ldr	r3, [r4, #0]
    157c:	2202      	movs	r2, #2
    157e:	4393      	bics	r3, r2
    1580:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1582:	3201      	adds	r2, #1
    1584:	69e3      	ldr	r3, [r4, #28]
    1586:	421a      	tst	r2, r3
    1588:	d1fc      	bne.n	1584 <_usart_init+0x38>
    158a:	2202      	movs	r2, #2
    158c:	69e3      	ldr	r3, [r4, #28]
    158e:	421a      	tst	r2, r3
    1590:	d1fc      	bne.n	158c <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1592:	2305      	movs	r3, #5
    1594:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1596:	2203      	movs	r2, #3
    1598:	69e3      	ldr	r3, [r4, #28]
    159a:	421a      	tst	r2, r3
    159c:	d1fc      	bne.n	1598 <_usart_init+0x4c>
    159e:	2201      	movs	r2, #1
    15a0:	69e3      	ldr	r3, [r4, #28]
    15a2:	421a      	tst	r2, r3
    15a4:	d1fc      	bne.n	15a0 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    15a6:	4b0e      	ldr	r3, [pc, #56]	; (15e0 <_usart_init+0x94>)
    15a8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    15aa:	2203      	movs	r2, #3
    15ac:	69e3      	ldr	r3, [r4, #28]
    15ae:	421a      	tst	r2, r3
    15b0:	d1fc      	bne.n	15ac <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    15b2:	23c0      	movs	r3, #192	; 0xc0
    15b4:	029b      	lsls	r3, r3, #10
    15b6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    15b8:	2207      	movs	r2, #7
    15ba:	69e3      	ldr	r3, [r4, #28]
    15bc:	421a      	tst	r2, r3
    15be:	d1fc      	bne.n	15ba <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    15c0:	4b08      	ldr	r3, [pc, #32]	; (15e4 <_usart_init+0x98>)
    15c2:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    15c4:	2300      	movs	r3, #0
    15c6:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    15c8:	2230      	movs	r2, #48	; 0x30
    15ca:	54a3      	strb	r3, [r4, r2]
}
    15cc:	2000      	movs	r0, #0
    15ce:	bd10      	pop	{r4, pc}
    15d0:	bdfff800 	.word	0xbdfff800
    15d4:	0000023a 	.word	0x0000023a
    15d8:	00006f24 	.word	0x00006f24
    15dc:	00001475 	.word	0x00001475
    15e0:	40100004 	.word	0x40100004
    15e4:	ffffc504 	.word	0xffffc504

000015e8 <_usart_sync_init>:
{
    15e8:	b570      	push	{r4, r5, r6, lr}
    15ea:	0005      	movs	r5, r0
    15ec:	000c      	movs	r4, r1
	ASSERT(device);
    15ee:	1e43      	subs	r3, r0, #1
    15f0:	4198      	sbcs	r0, r3
    15f2:	b2c0      	uxtb	r0, r0
    15f4:	22b4      	movs	r2, #180	; 0xb4
    15f6:	4904      	ldr	r1, [pc, #16]	; (1608 <_usart_sync_init+0x20>)
    15f8:	4b04      	ldr	r3, [pc, #16]	; (160c <_usart_sync_init+0x24>)
    15fa:	4798      	blx	r3
	device->hw = hw;
    15fc:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    15fe:	0020      	movs	r0, r4
    1600:	4b03      	ldr	r3, [pc, #12]	; (1610 <_usart_sync_init+0x28>)
    1602:	4798      	blx	r3
}
    1604:	bd70      	pop	{r4, r5, r6, pc}
    1606:	46c0      	nop			; (mov r8, r8)
    1608:	00006f24 	.word	0x00006f24
    160c:	00001475 	.word	0x00001475
    1610:	0000154d 	.word	0x0000154d

00001614 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1614:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1616:	6813      	ldr	r3, [r2, #0]
    1618:	2102      	movs	r1, #2
    161a:	430b      	orrs	r3, r1
    161c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    161e:	3101      	adds	r1, #1
    1620:	69d3      	ldr	r3, [r2, #28]
    1622:	4219      	tst	r1, r3
    1624:	d1fc      	bne.n	1620 <_usart_sync_enable+0xc>
}
    1626:	4770      	bx	lr

00001628 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1628:	6803      	ldr	r3, [r0, #0]
    162a:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    162c:	8519      	strh	r1, [r3, #40]	; 0x28
}
    162e:	4770      	bx	lr

00001630 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1630:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1632:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1634:	b2c0      	uxtb	r0, r0
}
    1636:	4770      	bx	lr

00001638 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1638:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    163a:	7e18      	ldrb	r0, [r3, #24]
    163c:	2301      	movs	r3, #1
    163e:	4018      	ands	r0, r3
}
    1640:	4770      	bx	lr

00001642 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1642:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1644:	7e18      	ldrb	r0, [r3, #24]
    1646:	0780      	lsls	r0, r0, #30
    1648:	0fc0      	lsrs	r0, r0, #31
}
    164a:	4770      	bx	lr

0000164c <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    164c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    164e:	7e18      	ldrb	r0, [r3, #24]
    1650:	0740      	lsls	r0, r0, #29
    1652:	0fc0      	lsrs	r0, r0, #31
}
    1654:	4770      	bx	lr
	...

00001658 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1658:	b570      	push	{r4, r5, r6, lr}
    165a:	0005      	movs	r5, r0
    165c:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    165e:	4b35      	ldr	r3, [pc, #212]	; (1734 <_spi_m_sync_init+0xdc>)
    1660:	18cb      	adds	r3, r1, r3
    1662:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    1664:	b2db      	uxtb	r3, r3
    1666:	2b00      	cmp	r3, #0
    1668:	d00b      	beq.n	1682 <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    166a:	2800      	cmp	r0, #0
    166c:	d050      	beq.n	1710 <_spi_m_sync_init+0xb8>
    166e:	1e60      	subs	r0, r4, #1
    1670:	4184      	sbcs	r4, r0
    1672:	b2e0      	uxtb	r0, r4
    1674:	4a30      	ldr	r2, [pc, #192]	; (1738 <_spi_m_sync_init+0xe0>)
    1676:	4931      	ldr	r1, [pc, #196]	; (173c <_spi_m_sync_init+0xe4>)
    1678:	4b31      	ldr	r3, [pc, #196]	; (1740 <_spi_m_sync_init+0xe8>)
    167a:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    167c:	200d      	movs	r0, #13
    167e:	4240      	negs	r0, r0
    1680:	e045      	b.n	170e <_spi_m_sync_init+0xb6>
	ASSERT(dev && hw);
    1682:	2800      	cmp	r0, #0
    1684:	d14c      	bne.n	1720 <_spi_m_sync_init+0xc8>
    1686:	4a2c      	ldr	r2, [pc, #176]	; (1738 <_spi_m_sync_init+0xe0>)
    1688:	492c      	ldr	r1, [pc, #176]	; (173c <_spi_m_sync_init+0xe4>)
    168a:	2000      	movs	r0, #0
    168c:	4b2c      	ldr	r3, [pc, #176]	; (1740 <_spi_m_sync_init+0xe8>)
    168e:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1690:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1692:	07db      	lsls	r3, r3, #31
    1694:	d418      	bmi.n	16c8 <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1696:	2203      	movs	r2, #3
    1698:	69e3      	ldr	r3, [r4, #28]
    169a:	421a      	tst	r2, r3
    169c:	d1fc      	bne.n	1698 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    169e:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    16a0:	079b      	lsls	r3, r3, #30
    16a2:	d50b      	bpl.n	16bc <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    16a4:	6823      	ldr	r3, [r4, #0]
    16a6:	2202      	movs	r2, #2
    16a8:	4393      	bics	r3, r2
    16aa:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    16ac:	3201      	adds	r2, #1
    16ae:	69e3      	ldr	r3, [r4, #28]
    16b0:	421a      	tst	r2, r3
    16b2:	d1fc      	bne.n	16ae <_spi_m_sync_init+0x56>
    16b4:	2202      	movs	r2, #2
    16b6:	69e3      	ldr	r3, [r4, #28]
    16b8:	421a      	tst	r2, r3
    16ba:	d1fc      	bne.n	16b6 <_spi_m_sync_init+0x5e>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    16bc:	230d      	movs	r3, #13
    16be:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    16c0:	2203      	movs	r2, #3
    16c2:	69e3      	ldr	r3, [r4, #28]
    16c4:	421a      	tst	r2, r3
    16c6:	d1fc      	bne.n	16c2 <_spi_m_sync_init+0x6a>
    16c8:	2201      	movs	r2, #1
    16ca:	69e3      	ldr	r3, [r4, #28]
    16cc:	421a      	tst	r2, r3
    16ce:	d1fc      	bne.n	16ca <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    16d0:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    16d2:	0020      	movs	r0, r4
    16d4:	1e43      	subs	r3, r0, #1
    16d6:	4198      	sbcs	r0, r3
    16d8:	b2c0      	uxtb	r0, r0
    16da:	4a1a      	ldr	r2, [pc, #104]	; (1744 <_spi_m_sync_init+0xec>)
    16dc:	4917      	ldr	r1, [pc, #92]	; (173c <_spi_m_sync_init+0xe4>)
    16de:	4b18      	ldr	r3, [pc, #96]	; (1740 <_spi_m_sync_init+0xe8>)
    16e0:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    16e2:	4b19      	ldr	r3, [pc, #100]	; (1748 <_spi_m_sync_init+0xf0>)
    16e4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    16e6:	2203      	movs	r2, #3
    16e8:	69e3      	ldr	r3, [r4, #28]
    16ea:	421a      	tst	r2, r3
    16ec:	d1fc      	bne.n	16e8 <_spi_m_sync_init+0x90>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    16ee:	2380      	movs	r3, #128	; 0x80
    16f0:	029b      	lsls	r3, r3, #10
    16f2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    16f4:	2207      	movs	r2, #7
    16f6:	69e3      	ldr	r3, [r4, #28]
    16f8:	421a      	tst	r2, r3
    16fa:	d1fc      	bne.n	16f6 <_spi_m_sync_init+0x9e>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    16fc:	2300      	movs	r3, #0
    16fe:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1700:	2230      	movs	r2, #48	; 0x30
    1702:	54a3      	strb	r3, [r4, r2]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1704:	3301      	adds	r3, #1
    1706:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1708:	4b10      	ldr	r3, [pc, #64]	; (174c <_spi_m_sync_init+0xf4>)
    170a:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    170c:	2000      	movs	r0, #0
}
    170e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    1710:	4a09      	ldr	r2, [pc, #36]	; (1738 <_spi_m_sync_init+0xe0>)
    1712:	490a      	ldr	r1, [pc, #40]	; (173c <_spi_m_sync_init+0xe4>)
    1714:	2000      	movs	r0, #0
    1716:	4b0a      	ldr	r3, [pc, #40]	; (1740 <_spi_m_sync_init+0xe8>)
    1718:	4798      	blx	r3
		return ERR_INVALID_ARG;
    171a:	200d      	movs	r0, #13
    171c:	4240      	negs	r0, r0
    171e:	e7f6      	b.n	170e <_spi_m_sync_init+0xb6>
	ASSERT(dev && hw);
    1720:	0008      	movs	r0, r1
    1722:	1e43      	subs	r3, r0, #1
    1724:	4198      	sbcs	r0, r3
    1726:	b2c0      	uxtb	r0, r0
    1728:	4a03      	ldr	r2, [pc, #12]	; (1738 <_spi_m_sync_init+0xe0>)
    172a:	4904      	ldr	r1, [pc, #16]	; (173c <_spi_m_sync_init+0xe4>)
    172c:	4b04      	ldr	r3, [pc, #16]	; (1740 <_spi_m_sync_init+0xe8>)
    172e:	4798      	blx	r3
    1730:	e7ae      	b.n	1690 <_spi_m_sync_init+0x38>
    1732:	46c0      	nop			; (mov r8, r8)
    1734:	bdfff800 	.word	0xbdfff800
    1738:	0000091b 	.word	0x0000091b
    173c:	00006f24 	.word	0x00006f24
    1740:	00001475 	.word	0x00001475
    1744:	000008e5 	.word	0x000008e5
    1748:	0001000c 	.word	0x0001000c
    174c:	000001ff 	.word	0x000001ff

00001750 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1750:	b510      	push	{r4, lr}
    1752:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    1754:	d00b      	beq.n	176e <_spi_m_sync_enable+0x1e>
    1756:	6800      	ldr	r0, [r0, #0]
    1758:	1e43      	subs	r3, r0, #1
    175a:	4198      	sbcs	r0, r3
    175c:	b2c0      	uxtb	r0, r0
    175e:	4a05      	ldr	r2, [pc, #20]	; (1774 <_spi_m_sync_enable+0x24>)
    1760:	4905      	ldr	r1, [pc, #20]	; (1778 <_spi_m_sync_enable+0x28>)
    1762:	4b06      	ldr	r3, [pc, #24]	; (177c <_spi_m_sync_enable+0x2c>)
    1764:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1766:	6820      	ldr	r0, [r4, #0]
    1768:	4b05      	ldr	r3, [pc, #20]	; (1780 <_spi_m_sync_enable+0x30>)
    176a:	4798      	blx	r3
}
    176c:	bd10      	pop	{r4, pc}
    176e:	2000      	movs	r0, #0
    1770:	e7f5      	b.n	175e <_spi_m_sync_enable+0xe>
    1772:	46c0      	nop			; (mov r8, r8)
    1774:	00000976 	.word	0x00000976
    1778:	00006f24 	.word	0x00006f24
    177c:	00001475 	.word	0x00001475
    1780:	0000152d 	.word	0x0000152d

00001784 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1784:	b5f0      	push	{r4, r5, r6, r7, lr}
    1786:	46de      	mov	lr, fp
    1788:	4657      	mov	r7, sl
    178a:	464e      	mov	r6, r9
    178c:	4645      	mov	r5, r8
    178e:	b5e0      	push	{r5, r6, r7, lr}
    1790:	b083      	sub	sp, #12
    1792:	4681      	mov	r9, r0
    1794:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    1796:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1798:	680b      	ldr	r3, [r1, #0]
    179a:	4698      	mov	r8, r3
    179c:	684d      	ldr	r5, [r1, #4]
    179e:	7903      	ldrb	r3, [r0, #4]
    17a0:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    17a2:	2800      	cmp	r0, #0
    17a4:	d015      	beq.n	17d2 <_spi_m_sync_trans+0x4e>
    17a6:	0020      	movs	r0, r4
    17a8:	1e43      	subs	r3, r0, #1
    17aa:	4198      	sbcs	r0, r3
    17ac:	b2c0      	uxtb	r0, r0
    17ae:	4a36      	ldr	r2, [pc, #216]	; (1888 <_spi_m_sync_trans+0x104>)
    17b0:	4936      	ldr	r1, [pc, #216]	; (188c <_spi_m_sync_trans+0x108>)
    17b2:	4b37      	ldr	r3, [pc, #220]	; (1890 <_spi_m_sync_trans+0x10c>)
    17b4:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    17b6:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    17b8:	075b      	lsls	r3, r3, #29
    17ba:	d13f      	bne.n	183c <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    17bc:	2303      	movs	r3, #3
    17be:	69e0      	ldr	r0, [r4, #28]
    17c0:	4018      	ands	r0, r3
    17c2:	d1fc      	bne.n	17be <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    17c4:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    17c6:	079b      	lsls	r3, r3, #30
    17c8:	d53b      	bpl.n	1842 <_spi_m_sync_trans+0xbe>
    17ca:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    17cc:	2301      	movs	r3, #1
    17ce:	469c      	mov	ip, r3
    17d0:	e009      	b.n	17e6 <_spi_m_sync_trans+0x62>
    17d2:	2000      	movs	r0, #0
    17d4:	e7eb      	b.n	17ae <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    17d6:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    17d8:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    17da:	b25b      	sxtb	r3, r3
    17dc:	2b00      	cmp	r3, #0
    17de:	db16      	blt.n	180e <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    17e0:	68b3      	ldr	r3, [r6, #8]
    17e2:	4283      	cmp	r3, r0
    17e4:	d927      	bls.n	1836 <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    17e6:	7e23      	ldrb	r3, [r4, #24]
    17e8:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    17ea:	2104      	movs	r1, #4
    17ec:	4219      	tst	r1, r3
    17ee:	d02b      	beq.n	1848 <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    17f0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    17f2:	2d00      	cmp	r5, #0
    17f4:	d0f0      	beq.n	17d8 <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    17f6:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    17f8:	9901      	ldr	r1, [sp, #4]
    17fa:	2901      	cmp	r1, #1
    17fc:	d9eb      	bls.n	17d6 <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    17fe:	0a3f      	lsrs	r7, r7, #8
    1800:	706f      	strb	r7, [r5, #1]
    1802:	3502      	adds	r5, #2
    1804:	e7e8      	b.n	17d8 <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    1806:	2101      	movs	r1, #1
    1808:	468b      	mov	fp, r1
    180a:	44d8      	add	r8, fp
    180c:	e037      	b.n	187e <_spi_m_sync_trans+0xfa>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    180e:	2301      	movs	r3, #1
    1810:	425b      	negs	r3, r3
    1812:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1814:	3381      	adds	r3, #129	; 0x81
    1816:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1818:	2013      	movs	r0, #19
    181a:	4240      	negs	r0, r0
	tmp &= mask;
    181c:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    181e:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1820:	4213      	tst	r3, r2
    1822:	d0fc      	beq.n	181e <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1824:	2303      	movs	r3, #3
    1826:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1828:	b003      	add	sp, #12
    182a:	bc3c      	pop	{r2, r3, r4, r5}
    182c:	4690      	mov	r8, r2
    182e:	4699      	mov	r9, r3
    1830:	46a2      	mov	sl, r4
    1832:	46ab      	mov	fp, r5
    1834:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1836:	4293      	cmp	r3, r2
    1838:	d8d5      	bhi.n	17e6 <_spi_m_sync_trans+0x62>
    183a:	e7ef      	b.n	181c <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    183c:	2004      	movs	r0, #4
    183e:	4240      	negs	r0, r0
    1840:	e7f2      	b.n	1828 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    1842:	2014      	movs	r0, #20
    1844:	4240      	negs	r0, r0
    1846:	e7ef      	b.n	1828 <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1848:	4290      	cmp	r0, r2
    184a:	d8c6      	bhi.n	17da <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    184c:	4667      	mov	r7, ip
    184e:	421f      	tst	r7, r3
    1850:	d0c3      	beq.n	17da <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1852:	464f      	mov	r7, r9
    1854:	88ff      	ldrh	r7, [r7, #6]
    1856:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    1858:	4647      	mov	r7, r8
    185a:	2f00      	cmp	r7, #0
    185c:	d00f      	beq.n	187e <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    185e:	783f      	ldrb	r7, [r7, #0]
    1860:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    1862:	9901      	ldr	r1, [sp, #4]
    1864:	2901      	cmp	r1, #1
    1866:	d9ce      	bls.n	1806 <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    1868:	4647      	mov	r7, r8
    186a:	787f      	ldrb	r7, [r7, #1]
    186c:	023f      	lsls	r7, r7, #8
    186e:	46bb      	mov	fp, r7
    1870:	4657      	mov	r7, sl
    1872:	4659      	mov	r1, fp
    1874:	430f      	orrs	r7, r1
    1876:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    1878:	2102      	movs	r1, #2
    187a:	468b      	mov	fp, r1
    187c:	44d8      	add	r8, fp
	ctrl->txcnt++;
    187e:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    1880:	4657      	mov	r7, sl
    1882:	62a7      	str	r7, [r4, #40]	; 0x28
    1884:	e7a9      	b.n	17da <_spi_m_sync_trans+0x56>
    1886:	46c0      	nop			; (mov r8, r8)
    1888:	00000a7b 	.word	0x00000a7b
    188c:	00006f24 	.word	0x00006f24
    1890:	00001475 	.word	0x00001475

00001894 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1894:	4b0e      	ldr	r3, [pc, #56]	; (18d0 <_sysctrl_init_sources+0x3c>)
    1896:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1898:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    189a:	480e      	ldr	r0, [pc, #56]	; (18d4 <_sysctrl_init_sources+0x40>)
    189c:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    189e:	0f92      	lsrs	r2, r2, #30
    18a0:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    18a2:	2002      	movs	r0, #2
    18a4:	4302      	orrs	r2, r0
    18a6:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    18a8:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    18aa:	699a      	ldr	r2, [r3, #24]
    18ac:	4302      	orrs	r2, r0
    18ae:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    18b0:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    18b2:	211f      	movs	r1, #31
    18b4:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    18b6:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    18b8:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    18ba:	2208      	movs	r2, #8
    18bc:	68cb      	ldr	r3, [r1, #12]
    18be:	421a      	tst	r2, r3
    18c0:	d0fc      	beq.n	18bc <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    18c2:	4a03      	ldr	r2, [pc, #12]	; (18d0 <_sysctrl_init_sources+0x3c>)
    18c4:	6a13      	ldr	r3, [r2, #32]
    18c6:	2180      	movs	r1, #128	; 0x80
    18c8:	430b      	orrs	r3, r1
    18ca:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    18cc:	4770      	bx	lr
    18ce:	46c0      	nop			; (mov r8, r8)
    18d0:	40000800 	.word	0x40000800
    18d4:	0fff0000 	.word	0x0fff0000

000018d8 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    18d8:	4a02      	ldr	r2, [pc, #8]	; (18e4 <_sysctrl_init_referenced_generators+0xc>)
    18da:	6993      	ldr	r3, [r2, #24]
    18dc:	2102      	movs	r1, #2
    18de:	438b      	bics	r3, r1
    18e0:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    18e2:	4770      	bx	lr
    18e4:	40000800 	.word	0x40000800

000018e8 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    18e8:	4b02      	ldr	r3, [pc, #8]	; (18f4 <_delay_init+0xc>)
    18ea:	4a03      	ldr	r2, [pc, #12]	; (18f8 <_delay_init+0x10>)
    18ec:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    18ee:	2205      	movs	r2, #5
    18f0:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    18f2:	4770      	bx	lr
    18f4:	e000e010 	.word	0xe000e010
    18f8:	00ffffff 	.word	0x00ffffff

000018fc <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    18fc:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
    18fe:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1900:	1e5e      	subs	r6, r3, #1
    1902:	b2f6      	uxtb	r6, r6
    1904:	2b00      	cmp	r3, #0
    1906:	d013      	beq.n	1930 <_delay_cycles+0x34>
    1908:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
    190a:	4a0e      	ldr	r2, [pc, #56]	; (1944 <_delay_cycles+0x48>)
    190c:	4d0e      	ldr	r5, [pc, #56]	; (1948 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    190e:	2080      	movs	r0, #128	; 0x80
    1910:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
    1912:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    1914:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1916:	6813      	ldr	r3, [r2, #0]
    1918:	4203      	tst	r3, r0
    191a:	d0fc      	beq.n	1916 <_delay_cycles+0x1a>
	while (n--) {
    191c:	3c01      	subs	r4, #1
    191e:	b2e4      	uxtb	r4, r4
    1920:	2cff      	cmp	r4, #255	; 0xff
    1922:	d1f6      	bne.n	1912 <_delay_cycles+0x16>
    1924:	0633      	lsls	r3, r6, #24
    1926:	1af6      	subs	r6, r6, r3
    1928:	4b08      	ldr	r3, [pc, #32]	; (194c <_delay_cycles+0x50>)
    192a:	469c      	mov	ip, r3
    192c:	4461      	add	r1, ip
    192e:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1930:	4b04      	ldr	r3, [pc, #16]	; (1944 <_delay_cycles+0x48>)
    1932:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1934:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1936:	0019      	movs	r1, r3
    1938:	2280      	movs	r2, #128	; 0x80
    193a:	0252      	lsls	r2, r2, #9
    193c:	680b      	ldr	r3, [r1, #0]
    193e:	4213      	tst	r3, r2
    1940:	d0fc      	beq.n	193c <_delay_cycles+0x40>
		;
}
    1942:	bd70      	pop	{r4, r5, r6, pc}
    1944:	e000e010 	.word	0xe000e010
    1948:	00ffffff 	.word	0x00ffffff
    194c:	ff000001 	.word	0xff000001

00001950 <Start_Graphic_Lib>:
void Test_Graphic_Cir();
void Test_draw_bitmap();
void Test_Graphic_FillRect();
void Test_Text_char();
	void Start_Graphic_Lib(void)
	{
    1950:	b510      	push	{r4, lr}
    1952:	b082      	sub	sp, #8
		/*must be Called once to select the LCD and SPI parameters*/
		ST7789_Init(&ST7789_t,display_Height,display_Width,
    1954:	2326      	movs	r3, #38	; 0x26
    1956:	9301      	str	r3, [sp, #4]
    1958:	3301      	adds	r3, #1
    195a:	9300      	str	r3, [sp, #0]
    195c:	3b04      	subs	r3, #4
    195e:	22f0      	movs	r2, #240	; 0xf0
    1960:	21f0      	movs	r1, #240	; 0xf0
    1962:	4802      	ldr	r0, [pc, #8]	; (196c <Start_Graphic_Lib+0x1c>)
    1964:	4c02      	ldr	r4, [pc, #8]	; (1970 <Start_Graphic_Lib+0x20>)
    1966:	47a0      	blx	r4
					SPI_display_CS,Display_DC_pin,Display_RST_pin);
	}
    1968:	b002      	add	sp, #8
    196a:	bd10      	pop	{r4, pc}
    196c:	20000b14 	.word	0x20000b14
    1970:	00000521 	.word	0x00000521

00001974 <Port_test>:

void Port_test()
{
    1974:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1976:	25c0      	movs	r5, #192	; 0xc0
    1978:	05ed      	lsls	r5, r5, #23
    197a:	2680      	movs	r6, #128	; 0x80
    197c:	05f6      	lsls	r6, r6, #23
    197e:	2398      	movs	r3, #152	; 0x98
    1980:	50ee      	str	r6, [r5, r3]
	gpio_set_port_level(GPIO_PORTB,1U << GPIO_PIN(LED0),true);
	delay_ms(100);
    1982:	2064      	movs	r0, #100	; 0x64
    1984:	4c03      	ldr	r4, [pc, #12]	; (1994 <Port_test+0x20>)
    1986:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1988:	2394      	movs	r3, #148	; 0x94
    198a:	50ee      	str	r6, [r5, r3]
	gpio_set_port_level(GPIO_PORTB,1U << GPIO_PIN(LED0),false);
	delay_ms(100);
    198c:	2064      	movs	r0, #100	; 0x64
    198e:	47a0      	blx	r4
}	
    1990:	bd70      	pop	{r4, r5, r6, pc}
    1992:	46c0      	nop			; (mov r8, r8)
    1994:	00001125 	.word	0x00001125

00001998 <Test_Graphic_VLine>:

	void Test_Graphic_VLine()
	{
    1998:	b5f0      	push	{r4, r5, r6, r7, lr}
    199a:	b083      	sub	sp, #12
			for (uint16_t col=0;col<ST7789_t.width;col+=8)
    199c:	4b17      	ldr	r3, [pc, #92]	; (19fc <Test_Graphic_VLine+0x64>)
    199e:	88db      	ldrh	r3, [r3, #6]
    19a0:	2b00      	cmp	r3, #0
    19a2:	d028      	beq.n	19f6 <Test_Graphic_VLine+0x5e>
    19a4:	2400      	movs	r4, #0
			{
				ST7789_drawFastVLine(&ST7789_t,col,0,ST7789_t.height,ST7789_GREEN);
    19a6:	4d15      	ldr	r5, [pc, #84]	; (19fc <Test_Graphic_VLine+0x64>)
    19a8:	4f15      	ldr	r7, [pc, #84]	; (1a00 <Test_Graphic_VLine+0x68>)
				delay_ms(50);
    19aa:	4e16      	ldr	r6, [pc, #88]	; (1a04 <Test_Graphic_VLine+0x6c>)
				ST7789_drawFastVLine(&ST7789_t,col,0,ST7789_t.height,ST7789_GREEN);
    19ac:	2208      	movs	r2, #8
    19ae:	5eab      	ldrsh	r3, [r5, r2]
    19b0:	b221      	sxth	r1, r4
    19b2:	22fc      	movs	r2, #252	; 0xfc
    19b4:	00d2      	lsls	r2, r2, #3
    19b6:	9200      	str	r2, [sp, #0]
    19b8:	2200      	movs	r2, #0
    19ba:	0028      	movs	r0, r5
    19bc:	47b8      	blx	r7
				delay_ms(50);
    19be:	2032      	movs	r0, #50	; 0x32
    19c0:	47b0      	blx	r6
			for (uint16_t col=0;col<ST7789_t.width;col+=8)
    19c2:	3408      	adds	r4, #8
    19c4:	b2a4      	uxth	r4, r4
    19c6:	88eb      	ldrh	r3, [r5, #6]
    19c8:	42a3      	cmp	r3, r4
    19ca:	d8ef      	bhi.n	19ac <Test_Graphic_VLine+0x14>
			}
			for (uint16_t col=4;col<ST7789_t.width;col+=8)
    19cc:	2b04      	cmp	r3, #4
    19ce:	d912      	bls.n	19f6 <Test_Graphic_VLine+0x5e>
    19d0:	2404      	movs	r4, #4
			{
				ST7789_drawFastVLine(&ST7789_t,col,0,ST7789_t.height,ST7789_BLUE);
    19d2:	4d0a      	ldr	r5, [pc, #40]	; (19fc <Test_Graphic_VLine+0x64>)
    19d4:	4f0a      	ldr	r7, [pc, #40]	; (1a00 <Test_Graphic_VLine+0x68>)
				delay_ms(50);
    19d6:	4e0b      	ldr	r6, [pc, #44]	; (1a04 <Test_Graphic_VLine+0x6c>)
				ST7789_drawFastVLine(&ST7789_t,col,0,ST7789_t.height,ST7789_BLUE);
    19d8:	2208      	movs	r2, #8
    19da:	5eab      	ldrsh	r3, [r5, r2]
    19dc:	b221      	sxth	r1, r4
    19de:	221f      	movs	r2, #31
    19e0:	9200      	str	r2, [sp, #0]
    19e2:	2200      	movs	r2, #0
    19e4:	0028      	movs	r0, r5
    19e6:	47b8      	blx	r7
				delay_ms(50);
    19e8:	2032      	movs	r0, #50	; 0x32
    19ea:	47b0      	blx	r6
			for (uint16_t col=4;col<ST7789_t.width;col+=8)
    19ec:	3408      	adds	r4, #8
    19ee:	b2a4      	uxth	r4, r4
    19f0:	88eb      	ldrh	r3, [r5, #6]
    19f2:	42a3      	cmp	r3, r4
    19f4:	d8f0      	bhi.n	19d8 <Test_Graphic_VLine+0x40>
			}
			
	}
    19f6:	b003      	add	sp, #12
    19f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19fa:	46c0      	nop			; (mov r8, r8)
    19fc:	20000b14 	.word	0x20000b14
    1a00:	00000951 	.word	0x00000951
    1a04:	00001125 	.word	0x00001125

00001a08 <Test_Graphic_HLine>:

	void Test_Graphic_HLine()
	{
    1a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a0a:	b083      	sub	sp, #12
		for (uint16_t row=0;row<ST7789_t.height;row+=8)
    1a0c:	4b17      	ldr	r3, [pc, #92]	; (1a6c <Test_Graphic_HLine+0x64>)
    1a0e:	891b      	ldrh	r3, [r3, #8]
    1a10:	2b00      	cmp	r3, #0
    1a12:	d028      	beq.n	1a66 <Test_Graphic_HLine+0x5e>
    1a14:	2400      	movs	r4, #0
		{
			ST7789_drawFastHLine(&ST7789_t,0,row,ST7789_t.width,ST7789_RED);
    1a16:	4d15      	ldr	r5, [pc, #84]	; (1a6c <Test_Graphic_HLine+0x64>)
    1a18:	4f15      	ldr	r7, [pc, #84]	; (1a70 <Test_Graphic_HLine+0x68>)
			delay_ms(50);
    1a1a:	4e16      	ldr	r6, [pc, #88]	; (1a74 <Test_Graphic_HLine+0x6c>)
			ST7789_drawFastHLine(&ST7789_t,0,row,ST7789_t.width,ST7789_RED);
    1a1c:	2206      	movs	r2, #6
    1a1e:	5eab      	ldrsh	r3, [r5, r2]
    1a20:	b222      	sxth	r2, r4
    1a22:	21f8      	movs	r1, #248	; 0xf8
    1a24:	0209      	lsls	r1, r1, #8
    1a26:	9100      	str	r1, [sp, #0]
    1a28:	2100      	movs	r1, #0
    1a2a:	0028      	movs	r0, r5
    1a2c:	47b8      	blx	r7
			delay_ms(50);
    1a2e:	2032      	movs	r0, #50	; 0x32
    1a30:	47b0      	blx	r6
		for (uint16_t row=0;row<ST7789_t.height;row+=8)
    1a32:	3408      	adds	r4, #8
    1a34:	b2a4      	uxth	r4, r4
    1a36:	892b      	ldrh	r3, [r5, #8]
    1a38:	42a3      	cmp	r3, r4
    1a3a:	d8ef      	bhi.n	1a1c <Test_Graphic_HLine+0x14>
		}
		for (uint16_t row=4;row<ST7789_t.height;row+=8)
    1a3c:	2b04      	cmp	r3, #4
    1a3e:	d912      	bls.n	1a66 <Test_Graphic_HLine+0x5e>
    1a40:	2404      	movs	r4, #4
		{
			ST7789_drawFastHLine(&ST7789_t,0,row,ST7789_t.width,ST7789_CYAN);
    1a42:	4d0a      	ldr	r5, [pc, #40]	; (1a6c <Test_Graphic_HLine+0x64>)
    1a44:	4f0a      	ldr	r7, [pc, #40]	; (1a70 <Test_Graphic_HLine+0x68>)
			delay_ms(50);
    1a46:	4e0b      	ldr	r6, [pc, #44]	; (1a74 <Test_Graphic_HLine+0x6c>)
			ST7789_drawFastHLine(&ST7789_t,0,row,ST7789_t.width,ST7789_CYAN);
    1a48:	2206      	movs	r2, #6
    1a4a:	5eab      	ldrsh	r3, [r5, r2]
    1a4c:	b222      	sxth	r2, r4
    1a4e:	490a      	ldr	r1, [pc, #40]	; (1a78 <Test_Graphic_HLine+0x70>)
    1a50:	9100      	str	r1, [sp, #0]
    1a52:	2100      	movs	r1, #0
    1a54:	0028      	movs	r0, r5
    1a56:	47b8      	blx	r7
			delay_ms(50);
    1a58:	2032      	movs	r0, #50	; 0x32
    1a5a:	47b0      	blx	r6
		for (uint16_t row=4;row<ST7789_t.height;row+=8)
    1a5c:	3408      	adds	r4, #8
    1a5e:	b2a4      	uxth	r4, r4
    1a60:	892b      	ldrh	r3, [r5, #8]
    1a62:	42a3      	cmp	r3, r4
    1a64:	d8f0      	bhi.n	1a48 <Test_Graphic_HLine+0x40>
		}
	
	}
    1a66:	b003      	add	sp, #12
    1a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	20000b14 	.word	0x20000b14
    1a70:	000009e1 	.word	0x000009e1
    1a74:	00001125 	.word	0x00001125
    1a78:	000007ff 	.word	0x000007ff

00001a7c <Test_Graphic_Rect>:
	
	void Test_Graphic_Rect()
	{
    1a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a7e:	46c6      	mov	lr, r8
    1a80:	b500      	push	{lr}
    1a82:	b082      	sub	sp, #8
			ST7789_drawRect(&ST7789_t,32,32,64,32,ST7789_CYAN);
    1a84:	4c20      	ldr	r4, [pc, #128]	; (1b08 <Test_Graphic_Rect+0x8c>)
    1a86:	4b21      	ldr	r3, [pc, #132]	; (1b0c <Test_Graphic_Rect+0x90>)
    1a88:	9301      	str	r3, [sp, #4]
    1a8a:	2320      	movs	r3, #32
    1a8c:	9300      	str	r3, [sp, #0]
    1a8e:	3320      	adds	r3, #32
    1a90:	2220      	movs	r2, #32
    1a92:	2120      	movs	r1, #32
    1a94:	0020      	movs	r0, r4
    1a96:	4d1e      	ldr	r5, [pc, #120]	; (1b10 <Test_Graphic_Rect+0x94>)
    1a98:	47a8      	blx	r5
			ST7789_drawRect(&ST7789_t,16,16,96,64,ST7789_RED);
    1a9a:	26f8      	movs	r6, #248	; 0xf8
    1a9c:	0236      	lsls	r6, r6, #8
    1a9e:	9601      	str	r6, [sp, #4]
    1aa0:	2340      	movs	r3, #64	; 0x40
    1aa2:	9300      	str	r3, [sp, #0]
    1aa4:	3320      	adds	r3, #32
    1aa6:	2210      	movs	r2, #16
    1aa8:	2110      	movs	r1, #16
    1aaa:	0020      	movs	r0, r4
    1aac:	47a8      	blx	r5
			ST7789_drawRect(&ST7789_t,16,128,72,16,ST7789_YELLOW);
    1aae:	4b19      	ldr	r3, [pc, #100]	; (1b14 <Test_Graphic_Rect+0x98>)
    1ab0:	4698      	mov	r8, r3
    1ab2:	9301      	str	r3, [sp, #4]
    1ab4:	2710      	movs	r7, #16
    1ab6:	9700      	str	r7, [sp, #0]
    1ab8:	2348      	movs	r3, #72	; 0x48
    1aba:	2280      	movs	r2, #128	; 0x80
    1abc:	2110      	movs	r1, #16
    1abe:	0020      	movs	r0, r4
    1ac0:	47a8      	blx	r5
			ST7789_fillRect(&ST7789_t,168,128,16,48,ST7789_GREEN);
    1ac2:	23fc      	movs	r3, #252	; 0xfc
    1ac4:	00db      	lsls	r3, r3, #3
    1ac6:	9301      	str	r3, [sp, #4]
    1ac8:	2330      	movs	r3, #48	; 0x30
    1aca:	9300      	str	r3, [sp, #0]
    1acc:	3b20      	subs	r3, #32
    1ace:	2280      	movs	r2, #128	; 0x80
    1ad0:	21a8      	movs	r1, #168	; 0xa8
    1ad2:	0020      	movs	r0, r4
    1ad4:	4d10      	ldr	r5, [pc, #64]	; (1b18 <Test_Graphic_Rect+0x9c>)
    1ad6:	47a8      	blx	r5
			ST7789_fillRect(&ST7789_t,16,216,24,16,ST7789_YELLOW);
    1ad8:	4643      	mov	r3, r8
    1ada:	9301      	str	r3, [sp, #4]
    1adc:	9700      	str	r7, [sp, #0]
    1ade:	2318      	movs	r3, #24
    1ae0:	22d8      	movs	r2, #216	; 0xd8
    1ae2:	2110      	movs	r1, #16
    1ae4:	0020      	movs	r0, r4
    1ae6:	47a8      	blx	r5
			ST7789_fillRect(&ST7789_t,64,216,32,24,ST7789_RED);
    1ae8:	9601      	str	r6, [sp, #4]
    1aea:	2318      	movs	r3, #24
    1aec:	9300      	str	r3, [sp, #0]
    1aee:	3308      	adds	r3, #8
    1af0:	22d8      	movs	r2, #216	; 0xd8
    1af2:	2140      	movs	r1, #64	; 0x40
    1af4:	0020      	movs	r0, r4
    1af6:	47a8      	blx	r5
			delay_ms(1000);
    1af8:	20fa      	movs	r0, #250	; 0xfa
    1afa:	0080      	lsls	r0, r0, #2
    1afc:	4b07      	ldr	r3, [pc, #28]	; (1b1c <Test_Graphic_Rect+0xa0>)
    1afe:	4798      	blx	r3
		
	}	
    1b00:	b002      	add	sp, #8
    1b02:	bc04      	pop	{r2}
    1b04:	4690      	mov	r8, r2
    1b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b08:	20000b14 	.word	0x20000b14
    1b0c:	000007ff 	.word	0x000007ff
    1b10:	00000a71 	.word	0x00000a71
    1b14:	0000ffe0 	.word	0x0000ffe0
    1b18:	00000ad5 	.word	0x00000ad5
    1b1c:	00001125 	.word	0x00001125

00001b20 <Test_Graphic_Cir>:
	
	void Test_Graphic_Cir()
	{
    1b20:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b22:	b083      	sub	sp, #12
		for (uint16_t i=(ST7789_t.width/6)-1 ; i>4 ;i-=2)
    1b24:	4b1c      	ldr	r3, [pc, #112]	; (1b98 <Test_Graphic_Cir+0x78>)
    1b26:	88d8      	ldrh	r0, [r3, #6]
    1b28:	2106      	movs	r1, #6
    1b2a:	4b1c      	ldr	r3, [pc, #112]	; (1b9c <Test_Graphic_Cir+0x7c>)
    1b2c:	4798      	blx	r3
    1b2e:	3801      	subs	r0, #1
    1b30:	b284      	uxth	r4, r0
    1b32:	2c04      	cmp	r4, #4
    1b34:	d911      	bls.n	1b5a <Test_Graphic_Cir+0x3a>
		{
		ST7789_drawCircle(&ST7789_t,ST7789_t.width/2,ST7789_t.height/2,i,ST7789_BLUE);	
    1b36:	4d18      	ldr	r5, [pc, #96]	; (1b98 <Test_Graphic_Cir+0x78>)
    1b38:	4f19      	ldr	r7, [pc, #100]	; (1ba0 <Test_Graphic_Cir+0x80>)
		delay_ms(50);
    1b3a:	4e1a      	ldr	r6, [pc, #104]	; (1ba4 <Test_Graphic_Cir+0x84>)
		ST7789_drawCircle(&ST7789_t,ST7789_t.width/2,ST7789_t.height/2,i,ST7789_BLUE);	
    1b3c:	b223      	sxth	r3, r4
    1b3e:	892a      	ldrh	r2, [r5, #8]
    1b40:	0852      	lsrs	r2, r2, #1
    1b42:	88e9      	ldrh	r1, [r5, #6]
    1b44:	0849      	lsrs	r1, r1, #1
    1b46:	201f      	movs	r0, #31
    1b48:	9000      	str	r0, [sp, #0]
    1b4a:	0028      	movs	r0, r5
    1b4c:	47b8      	blx	r7
		delay_ms(50);
    1b4e:	2032      	movs	r0, #50	; 0x32
    1b50:	47b0      	blx	r6
		for (uint16_t i=(ST7789_t.width/6)-1 ; i>4 ;i-=2)
    1b52:	3c02      	subs	r4, #2
    1b54:	b2a4      	uxth	r4, r4
    1b56:	2c04      	cmp	r4, #4
    1b58:	d8f0      	bhi.n	1b3c <Test_Graphic_Cir+0x1c>
		}
		delay_ms(2000);
    1b5a:	20fa      	movs	r0, #250	; 0xfa
    1b5c:	00c0      	lsls	r0, r0, #3
    1b5e:	4e11      	ldr	r6, [pc, #68]	; (1ba4 <Test_Graphic_Cir+0x84>)
    1b60:	47b0      	blx	r6
		ST7789_fillScreen(&ST7789_t,ST7789_WHITE);	
    1b62:	4c0d      	ldr	r4, [pc, #52]	; (1b98 <Test_Graphic_Cir+0x78>)
    1b64:	4910      	ldr	r1, [pc, #64]	; (1ba8 <Test_Graphic_Cir+0x88>)
    1b66:	0020      	movs	r0, r4
    1b68:	4b10      	ldr	r3, [pc, #64]	; (1bac <Test_Graphic_Cir+0x8c>)
    1b6a:	4798      	blx	r3
		ST7789_fillCircle(&ST7789_t,ST7789_t.width/2,ST7789_t.height/2,(ST7789_t.width/6)-1,ST7789_RED);
    1b6c:	88e5      	ldrh	r5, [r4, #6]
    1b6e:	2106      	movs	r1, #6
    1b70:	0028      	movs	r0, r5
    1b72:	4b0a      	ldr	r3, [pc, #40]	; (1b9c <Test_Graphic_Cir+0x7c>)
    1b74:	4798      	blx	r3
    1b76:	3801      	subs	r0, #1
    1b78:	b203      	sxth	r3, r0
    1b7a:	8922      	ldrh	r2, [r4, #8]
    1b7c:	0852      	lsrs	r2, r2, #1
    1b7e:	0869      	lsrs	r1, r5, #1
    1b80:	20f8      	movs	r0, #248	; 0xf8
    1b82:	0200      	lsls	r0, r0, #8
    1b84:	9000      	str	r0, [sp, #0]
    1b86:	0020      	movs	r0, r4
    1b88:	4c09      	ldr	r4, [pc, #36]	; (1bb0 <Test_Graphic_Cir+0x90>)
    1b8a:	47a0      	blx	r4
		delay_ms(500);
    1b8c:	20fa      	movs	r0, #250	; 0xfa
    1b8e:	0040      	lsls	r0, r0, #1
    1b90:	47b0      	blx	r6
	}
    1b92:	b003      	add	sp, #12
    1b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b96:	46c0      	nop			; (mov r8, r8)
    1b98:	20000b14 	.word	0x20000b14
    1b9c:	00001f7d 	.word	0x00001f7d
    1ba0:	00000be5 	.word	0x00000be5
    1ba4:	00001125 	.word	0x00001125
    1ba8:	0000ffff 	.word	0x0000ffff
    1bac:	00000b65 	.word	0x00000b65
    1bb0:	00000e95 	.word	0x00000e95

00001bb4 <Test_Text_char>:
	
	void Test_Text_char()
	{
    1bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bb6:	46ce      	mov	lr, r9
    1bb8:	b500      	push	{lr}
    1bba:	b084      	sub	sp, #16
		ST7789_DrawCharAt(&ST7789_t,5,5,'A',&Font24,1,ST7789_BLACK);
    1bbc:	2400      	movs	r4, #0
    1bbe:	9402      	str	r4, [sp, #8]
    1bc0:	2501      	movs	r5, #1
    1bc2:	9501      	str	r5, [sp, #4]
    1bc4:	4b2e      	ldr	r3, [pc, #184]	; (1c80 <Test_Text_char+0xcc>)
    1bc6:	4699      	mov	r9, r3
    1bc8:	9300      	str	r3, [sp, #0]
    1bca:	2341      	movs	r3, #65	; 0x41
    1bcc:	2205      	movs	r2, #5
    1bce:	2105      	movs	r1, #5
    1bd0:	482c      	ldr	r0, [pc, #176]	; (1c84 <Test_Text_char+0xd0>)
    1bd2:	4e2d      	ldr	r6, [pc, #180]	; (1c88 <Test_Text_char+0xd4>)
    1bd4:	47b0      	blx	r6
		ST7789_DrawCharAt(&ST7789_t,64,5,'X',&Font16,1,ST7789_BLACK);
    1bd6:	9402      	str	r4, [sp, #8]
    1bd8:	9501      	str	r5, [sp, #4]
    1bda:	4f2c      	ldr	r7, [pc, #176]	; (1c8c <Test_Text_char+0xd8>)
    1bdc:	9700      	str	r7, [sp, #0]
    1bde:	2358      	movs	r3, #88	; 0x58
    1be0:	2205      	movs	r2, #5
    1be2:	2140      	movs	r1, #64	; 0x40
    1be4:	4827      	ldr	r0, [pc, #156]	; (1c84 <Test_Text_char+0xd0>)
    1be6:	47b0      	blx	r6
		ST7789_DrawStringAt(&ST7789_t,5,24,"Hello World",&Font24,1,ST7789_BLACK);
    1be8:	9402      	str	r4, [sp, #8]
    1bea:	9501      	str	r5, [sp, #4]
    1bec:	464b      	mov	r3, r9
    1bee:	9300      	str	r3, [sp, #0]
    1bf0:	4b27      	ldr	r3, [pc, #156]	; (1c90 <Test_Text_char+0xdc>)
    1bf2:	2218      	movs	r2, #24
    1bf4:	2105      	movs	r1, #5
    1bf6:	4823      	ldr	r0, [pc, #140]	; (1c84 <Test_Text_char+0xd0>)
    1bf8:	4e26      	ldr	r6, [pc, #152]	; (1c94 <Test_Text_char+0xe0>)
    1bfa:	47b0      	blx	r6
		ST7789_DrawStringAt(&ST7789_t,5,48,"ST7789 Display",&Font16,1,ST7789_BLACK);
    1bfc:	9402      	str	r4, [sp, #8]
    1bfe:	9501      	str	r5, [sp, #4]
    1c00:	9700      	str	r7, [sp, #0]
    1c02:	4b25      	ldr	r3, [pc, #148]	; (1c98 <Test_Text_char+0xe4>)
    1c04:	2230      	movs	r2, #48	; 0x30
    1c06:	2105      	movs	r1, #5
    1c08:	481e      	ldr	r0, [pc, #120]	; (1c84 <Test_Text_char+0xd0>)
    1c0a:	47b0      	blx	r6
		ST7789_DrawStringAt(&ST7789_t,5,68,"With SAMD21J18",&Font16,1,ST7789_RED);
    1c0c:	24f8      	movs	r4, #248	; 0xf8
    1c0e:	0224      	lsls	r4, r4, #8
    1c10:	9402      	str	r4, [sp, #8]
    1c12:	9501      	str	r5, [sp, #4]
    1c14:	9700      	str	r7, [sp, #0]
    1c16:	4b21      	ldr	r3, [pc, #132]	; (1c9c <Test_Text_char+0xe8>)
    1c18:	2244      	movs	r2, #68	; 0x44
    1c1a:	2105      	movs	r1, #5
    1c1c:	4819      	ldr	r0, [pc, #100]	; (1c84 <Test_Text_char+0xd0>)
    1c1e:	47b0      	blx	r6
		ST7789_DrawStringAt(&ST7789_t,5,88,"& SAML22J18",&Font16,1,ST7789_RED);
    1c20:	9402      	str	r4, [sp, #8]
    1c22:	9501      	str	r5, [sp, #4]
    1c24:	9700      	str	r7, [sp, #0]
    1c26:	4b1e      	ldr	r3, [pc, #120]	; (1ca0 <Test_Text_char+0xec>)
    1c28:	2258      	movs	r2, #88	; 0x58
    1c2a:	2105      	movs	r1, #5
    1c2c:	4815      	ldr	r0, [pc, #84]	; (1c84 <Test_Text_char+0xd0>)
    1c2e:	47b0      	blx	r6
		ST7789_DrawStringAt(&ST7789_t,5,108,"With SPI Bus",&Font16,1,ST7789_BLUE);
    1c30:	241f      	movs	r4, #31
    1c32:	9402      	str	r4, [sp, #8]
    1c34:	9501      	str	r5, [sp, #4]
    1c36:	9700      	str	r7, [sp, #0]
    1c38:	4b1a      	ldr	r3, [pc, #104]	; (1ca4 <Test_Text_char+0xf0>)
    1c3a:	226c      	movs	r2, #108	; 0x6c
    1c3c:	2105      	movs	r1, #5
    1c3e:	4811      	ldr	r0, [pc, #68]	; (1c84 <Test_Text_char+0xd0>)
    1c40:	47b0      	blx	r6
		ST7789_DrawStringAt(&ST7789_t,5,128,"Programmed by",&Font16,1,ST7789_BLUE);
    1c42:	9402      	str	r4, [sp, #8]
    1c44:	9501      	str	r5, [sp, #4]
    1c46:	9700      	str	r7, [sp, #0]
    1c48:	4b17      	ldr	r3, [pc, #92]	; (1ca8 <Test_Text_char+0xf4>)
    1c4a:	2280      	movs	r2, #128	; 0x80
    1c4c:	2105      	movs	r1, #5
    1c4e:	480d      	ldr	r0, [pc, #52]	; (1c84 <Test_Text_char+0xd0>)
    1c50:	47b0      	blx	r6
		ST7789_DrawStringAt(&ST7789_t,5,150,"M.Rawashdeh",&Font24,1,ST7789_BLUE);
    1c52:	9402      	str	r4, [sp, #8]
    1c54:	9501      	str	r5, [sp, #4]
    1c56:	464b      	mov	r3, r9
    1c58:	9300      	str	r3, [sp, #0]
    1c5a:	4b14      	ldr	r3, [pc, #80]	; (1cac <Test_Text_char+0xf8>)
    1c5c:	2296      	movs	r2, #150	; 0x96
    1c5e:	2105      	movs	r1, #5
    1c60:	4808      	ldr	r0, [pc, #32]	; (1c84 <Test_Text_char+0xd0>)
    1c62:	47b0      	blx	r6
		ST7789_DrawStringAt(&ST7789_t,5,190,"March 2020",&Font16,2,ST7789_BLUE);
    1c64:	9402      	str	r4, [sp, #8]
    1c66:	2302      	movs	r3, #2
    1c68:	9301      	str	r3, [sp, #4]
    1c6a:	9700      	str	r7, [sp, #0]
    1c6c:	4b10      	ldr	r3, [pc, #64]	; (1cb0 <Test_Text_char+0xfc>)
    1c6e:	22be      	movs	r2, #190	; 0xbe
    1c70:	2105      	movs	r1, #5
    1c72:	4804      	ldr	r0, [pc, #16]	; (1c84 <Test_Text_char+0xd0>)
    1c74:	47b0      	blx	r6
	}
    1c76:	b004      	add	sp, #16
    1c78:	bc04      	pop	{r2}
    1c7a:	4691      	mov	r9, r2
    1c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c7e:	46c0      	nop			; (mov r8, r8)
    1c80:	20000018 	.word	0x20000018
    1c84:	20000b14 	.word	0x20000b14
    1c88:	00000ed9 	.word	0x00000ed9
    1c8c:	20000008 	.word	0x20000008
    1c90:	00009b34 	.word	0x00009b34
    1c94:	00000ff1 	.word	0x00000ff1
    1c98:	00009b40 	.word	0x00009b40
    1c9c:	00009b50 	.word	0x00009b50
    1ca0:	00009b60 	.word	0x00009b60
    1ca4:	00009b6c 	.word	0x00009b6c
    1ca8:	00009b7c 	.word	0x00009b7c
    1cac:	00009b8c 	.word	0x00009b8c
    1cb0:	00009b98 	.word	0x00009b98

00001cb4 <Test_draw_bitmap>:
	void Test_draw_bitmap()
	{
    1cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cb6:	b085      	sub	sp, #20
		ST7789_drawBitmap(&ST7789_t,0,0,USB_ICON,239,239,ST7789_BLACK);
    1cb8:	2300      	movs	r3, #0
    1cba:	9302      	str	r3, [sp, #8]
    1cbc:	33ef      	adds	r3, #239	; 0xef
    1cbe:	9301      	str	r3, [sp, #4]
    1cc0:	9300      	str	r3, [sp, #0]
    1cc2:	4b27      	ldr	r3, [pc, #156]	; (1d60 <Test_draw_bitmap+0xac>)
    1cc4:	2200      	movs	r2, #0
    1cc6:	2100      	movs	r1, #0
    1cc8:	4826      	ldr	r0, [pc, #152]	; (1d64 <Test_draw_bitmap+0xb0>)
    1cca:	4c27      	ldr	r4, [pc, #156]	; (1d68 <Test_draw_bitmap+0xb4>)
    1ccc:	47a0      	blx	r4
		delay_ms(50);
    1cce:	2032      	movs	r0, #50	; 0x32
    1cd0:	4b26      	ldr	r3, [pc, #152]	; (1d6c <Test_draw_bitmap+0xb8>)
    1cd2:	4798      	blx	r3
    1cd4:	24ff      	movs	r4, #255	; 0xff
		 for (int16_t c=255;c>0;c-=25)
		 {
			 ST7789_drawBitmap(&ST7789_t,0,0,USB_ICON,239,239,ST7789_color565(&ST7789_t,c,255-c,8));		 			 
    1cd6:	4d23      	ldr	r5, [pc, #140]	; (1d64 <Test_draw_bitmap+0xb0>)
    1cd8:	4f25      	ldr	r7, [pc, #148]	; (1d70 <Test_draw_bitmap+0xbc>)
    1cda:	43e2      	mvns	r2, r4
    1cdc:	b2d2      	uxtb	r2, r2
    1cde:	2308      	movs	r3, #8
    1ce0:	0021      	movs	r1, r4
    1ce2:	0028      	movs	r0, r5
    1ce4:	47b8      	blx	r7
    1ce6:	9002      	str	r0, [sp, #8]
    1ce8:	23ef      	movs	r3, #239	; 0xef
    1cea:	9301      	str	r3, [sp, #4]
    1cec:	9300      	str	r3, [sp, #0]
    1cee:	4b1c      	ldr	r3, [pc, #112]	; (1d60 <Test_draw_bitmap+0xac>)
    1cf0:	2200      	movs	r2, #0
    1cf2:	2100      	movs	r1, #0
    1cf4:	0028      	movs	r0, r5
    1cf6:	4e1c      	ldr	r6, [pc, #112]	; (1d68 <Test_draw_bitmap+0xb4>)
    1cf8:	47b0      	blx	r6
    1cfa:	3c19      	subs	r4, #25
    1cfc:	b2e4      	uxtb	r4, r4
		 for (int16_t c=255;c>0;c-=25)
    1cfe:	2cec      	cmp	r4, #236	; 0xec
    1d00:	d1eb      	bne.n	1cda <Test_draw_bitmap+0x26>
		 }
		 delay_ms(50);
    1d02:	2032      	movs	r0, #50	; 0x32
    1d04:	4c19      	ldr	r4, [pc, #100]	; (1d6c <Test_draw_bitmap+0xb8>)
    1d06:	47a0      	blx	r4
		ST7789_fillScreen(&ST7789_t,ST7789_BLACK);
    1d08:	4d16      	ldr	r5, [pc, #88]	; (1d64 <Test_draw_bitmap+0xb0>)
    1d0a:	2100      	movs	r1, #0
    1d0c:	0028      	movs	r0, r5
    1d0e:	4b19      	ldr	r3, [pc, #100]	; (1d74 <Test_draw_bitmap+0xc0>)
    1d10:	4798      	blx	r3
		ST7789_drawBitmap(&ST7789_t,0,0,USB_ICON,239,239,ST7789_WHITE);
    1d12:	4b19      	ldr	r3, [pc, #100]	; (1d78 <Test_draw_bitmap+0xc4>)
    1d14:	9302      	str	r3, [sp, #8]
    1d16:	23ef      	movs	r3, #239	; 0xef
    1d18:	9301      	str	r3, [sp, #4]
    1d1a:	9300      	str	r3, [sp, #0]
    1d1c:	4b10      	ldr	r3, [pc, #64]	; (1d60 <Test_draw_bitmap+0xac>)
    1d1e:	2200      	movs	r2, #0
    1d20:	2100      	movs	r1, #0
    1d22:	0028      	movs	r0, r5
    1d24:	4d10      	ldr	r5, [pc, #64]	; (1d68 <Test_draw_bitmap+0xb4>)
    1d26:	47a8      	blx	r5
		delay_ms(50);
    1d28:	2032      	movs	r0, #50	; 0x32
    1d2a:	47a0      	blx	r4
    1d2c:	24ff      	movs	r4, #255	; 0xff
		for (int16_t c=255;c>0;c-=25)
		{
			ST7789_drawBitmap(&ST7789_t,0,0,USB_ICON,239,239,ST7789_color565(&ST7789_t,c,255-c,8));
    1d2e:	4d0d      	ldr	r5, [pc, #52]	; (1d64 <Test_draw_bitmap+0xb0>)
    1d30:	4f0f      	ldr	r7, [pc, #60]	; (1d70 <Test_draw_bitmap+0xbc>)
    1d32:	43e2      	mvns	r2, r4
    1d34:	b2d2      	uxtb	r2, r2
    1d36:	2308      	movs	r3, #8
    1d38:	0021      	movs	r1, r4
    1d3a:	0028      	movs	r0, r5
    1d3c:	47b8      	blx	r7
    1d3e:	9002      	str	r0, [sp, #8]
    1d40:	23ef      	movs	r3, #239	; 0xef
    1d42:	9301      	str	r3, [sp, #4]
    1d44:	9300      	str	r3, [sp, #0]
    1d46:	4b06      	ldr	r3, [pc, #24]	; (1d60 <Test_draw_bitmap+0xac>)
    1d48:	2200      	movs	r2, #0
    1d4a:	2100      	movs	r1, #0
    1d4c:	0028      	movs	r0, r5
    1d4e:	4e06      	ldr	r6, [pc, #24]	; (1d68 <Test_draw_bitmap+0xb4>)
    1d50:	47b0      	blx	r6
    1d52:	3c19      	subs	r4, #25
    1d54:	b2e4      	uxtb	r4, r4
		for (int16_t c=255;c>0;c-=25)
    1d56:	2cec      	cmp	r4, #236	; 0xec
    1d58:	d1eb      	bne.n	1d32 <Test_draw_bitmap+0x7e>
		}
	}
    1d5a:	b005      	add	sp, #20
    1d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d5e:	46c0      	nop			; (mov r8, r8)
    1d60:	00006f40 	.word	0x00006f40
    1d64:	20000b14 	.word	0x20000b14
    1d68:	00001049 	.word	0x00001049
    1d6c:	00001125 	.word	0x00001125
    1d70:	00000795 	.word	0x00000795
    1d74:	00000b65 	.word	0x00000b65
    1d78:	0000ffff 	.word	0x0000ffff

00001d7c <Test_Graphic_FillRect>:
	
	void Test_Graphic_FillRect()
	{
    1d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		ST7789_fillScreen(&ST7789_t,ST7789_RED);
    1d7e:	21f8      	movs	r1, #248	; 0xf8
    1d80:	0209      	lsls	r1, r1, #8
    1d82:	4810      	ldr	r0, [pc, #64]	; (1dc4 <Test_Graphic_FillRect+0x48>)
    1d84:	4c10      	ldr	r4, [pc, #64]	; (1dc8 <Test_Graphic_FillRect+0x4c>)
    1d86:	47a0      	blx	r4
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    1d88:	27c0      	movs	r7, #192	; 0xc0
    1d8a:	05ff      	lsls	r7, r7, #23
    1d8c:	269c      	movs	r6, #156	; 0x9c
    1d8e:	2580      	movs	r5, #128	; 0x80
    1d90:	05ed      	lsls	r5, r5, #23
    1d92:	51bd      	str	r5, [r7, r6]
		gpio_toggle_pin_level(LED0);
		ST7789_fillScreen(&ST7789_t,ST7789_BLACK);
    1d94:	2100      	movs	r1, #0
    1d96:	480b      	ldr	r0, [pc, #44]	; (1dc4 <Test_Graphic_FillRect+0x48>)
    1d98:	47a0      	blx	r4
    1d9a:	51bd      	str	r5, [r7, r6]
		gpio_toggle_pin_level(LED0);
		ST7789_fillScreen(&ST7789_t,ST7789_BLUE);
    1d9c:	211f      	movs	r1, #31
    1d9e:	4809      	ldr	r0, [pc, #36]	; (1dc4 <Test_Graphic_FillRect+0x48>)
    1da0:	47a0      	blx	r4
    1da2:	51bd      	str	r5, [r7, r6]
		gpio_toggle_pin_level(LED0);
		ST7789_fillScreen(&ST7789_t,ST7789_CYAN);
    1da4:	4909      	ldr	r1, [pc, #36]	; (1dcc <Test_Graphic_FillRect+0x50>)
    1da6:	4807      	ldr	r0, [pc, #28]	; (1dc4 <Test_Graphic_FillRect+0x48>)
    1da8:	47a0      	blx	r4
    1daa:	51bd      	str	r5, [r7, r6]
		gpio_toggle_pin_level(LED0);
		ST7789_fillScreen(&ST7789_t,ST7789_WHITE);
    1dac:	4908      	ldr	r1, [pc, #32]	; (1dd0 <Test_Graphic_FillRect+0x54>)
    1dae:	4805      	ldr	r0, [pc, #20]	; (1dc4 <Test_Graphic_FillRect+0x48>)
    1db0:	47a0      	blx	r4
    1db2:	51bd      	str	r5, [r7, r6]
		gpio_toggle_pin_level(LED0);
		ST7789_fillScreen(&ST7789_t,ST7789_YELLOW);
    1db4:	4907      	ldr	r1, [pc, #28]	; (1dd4 <Test_Graphic_FillRect+0x58>)
    1db6:	4803      	ldr	r0, [pc, #12]	; (1dc4 <Test_Graphic_FillRect+0x48>)
    1db8:	47a0      	blx	r4
    1dba:	51bd      	str	r5, [r7, r6]
		gpio_toggle_pin_level(LED0);
		ST7789_fillScreen(&ST7789_t,ST7789_BLUE);
    1dbc:	211f      	movs	r1, #31
    1dbe:	4801      	ldr	r0, [pc, #4]	; (1dc4 <Test_Graphic_FillRect+0x48>)
    1dc0:	47a0      	blx	r4
		
	}
    1dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dc4:	20000b14 	.word	0x20000b14
    1dc8:	00000b65 	.word	0x00000b65
    1dcc:	000007ff 	.word	0x000007ff
    1dd0:	0000ffff 	.word	0x0000ffff
    1dd4:	0000ffe0 	.word	0x0000ffe0

00001dd8 <main>:
int main(void)
{
    1dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dda:	46ce      	mov	lr, r9
    1ddc:	b500      	push	{lr}
	atmel_start_init();
    1dde:	4b20      	ldr	r3, [pc, #128]	; (1e60 <main+0x88>)
    1de0:	4798      	blx	r3
	Port_test();
    1de2:	4b20      	ldr	r3, [pc, #128]	; (1e64 <main+0x8c>)
    1de4:	4798      	blx	r3
	Start_Graphic_Lib();
    1de6:	4b20      	ldr	r3, [pc, #128]	; (1e68 <main+0x90>)
    1de8:	4798      	blx	r3
	uint16_t time_delay=1000;
	ST7789_fillScreen(&ST7789_t,ST7789_BLACK);
    1dea:	2100      	movs	r1, #0
    1dec:	481f      	ldr	r0, [pc, #124]	; (1e6c <main+0x94>)
    1dee:	4b20      	ldr	r3, [pc, #128]	; (1e70 <main+0x98>)
    1df0:	4798      	blx	r3
	while (1)
	{
		Test_Graphic_FillRect();
    1df2:	4b20      	ldr	r3, [pc, #128]	; (1e74 <main+0x9c>)
    1df4:	4699      	mov	r9, r3
		ST7789_fillScreen(&ST7789_t,ST7789_WHITE);
    1df6:	4c1e      	ldr	r4, [pc, #120]	; (1e70 <main+0x98>)
		Test_Graphic_FillRect();
    1df8:	47c8      	blx	r9
		ST7789_fillScreen(&ST7789_t,ST7789_WHITE);
    1dfa:	4e1f      	ldr	r6, [pc, #124]	; (1e78 <main+0xa0>)
    1dfc:	0031      	movs	r1, r6
    1dfe:	481b      	ldr	r0, [pc, #108]	; (1e6c <main+0x94>)
    1e00:	47a0      	blx	r4
		Test_Text_char();
    1e02:	4b1e      	ldr	r3, [pc, #120]	; (1e7c <main+0xa4>)
    1e04:	4798      	blx	r3
		delay_ms(time_delay);
    1e06:	27fa      	movs	r7, #250	; 0xfa
    1e08:	00bf      	lsls	r7, r7, #2
    1e0a:	0038      	movs	r0, r7
    1e0c:	4d1c      	ldr	r5, [pc, #112]	; (1e80 <main+0xa8>)
    1e0e:	47a8      	blx	r5
		ST7789_fillScreen(&ST7789_t,ST7789_WHITE);
    1e10:	0031      	movs	r1, r6
    1e12:	4816      	ldr	r0, [pc, #88]	; (1e6c <main+0x94>)
    1e14:	47a0      	blx	r4
		Test_Graphic_HLine();
    1e16:	4b1b      	ldr	r3, [pc, #108]	; (1e84 <main+0xac>)
    1e18:	4798      	blx	r3
		delay_ms(time_delay);
    1e1a:	0038      	movs	r0, r7
    1e1c:	47a8      	blx	r5
		ST7789_fillScreen(&ST7789_t,ST7789_WHITE);
    1e1e:	0031      	movs	r1, r6
    1e20:	4812      	ldr	r0, [pc, #72]	; (1e6c <main+0x94>)
    1e22:	47a0      	blx	r4
		Test_Graphic_VLine();
    1e24:	4b18      	ldr	r3, [pc, #96]	; (1e88 <main+0xb0>)
    1e26:	4798      	blx	r3
		delay_ms(time_delay);
    1e28:	0038      	movs	r0, r7
    1e2a:	47a8      	blx	r5
		ST7789_fillScreen(&ST7789_t,ST7789_BLACK);
    1e2c:	2100      	movs	r1, #0
    1e2e:	480f      	ldr	r0, [pc, #60]	; (1e6c <main+0x94>)
    1e30:	47a0      	blx	r4
		Test_Graphic_Rect();
    1e32:	4b16      	ldr	r3, [pc, #88]	; (1e8c <main+0xb4>)
    1e34:	4798      	blx	r3
		delay_ms(time_delay);
    1e36:	0038      	movs	r0, r7
    1e38:	47a8      	blx	r5
		ST7789_fillScreen(&ST7789_t,ST7789_WHITE);
    1e3a:	0031      	movs	r1, r6
    1e3c:	480b      	ldr	r0, [pc, #44]	; (1e6c <main+0x94>)
    1e3e:	47a0      	blx	r4
		Test_Graphic_Cir();
    1e40:	4b13      	ldr	r3, [pc, #76]	; (1e90 <main+0xb8>)
    1e42:	4798      	blx	r3
		delay_ms(time_delay);
    1e44:	0038      	movs	r0, r7
    1e46:	47a8      	blx	r5
		ST7789_fillScreen(&ST7789_t,ST7789_WHITE);
    1e48:	0031      	movs	r1, r6
    1e4a:	4808      	ldr	r0, [pc, #32]	; (1e6c <main+0x94>)
    1e4c:	47a0      	blx	r4
		Test_draw_bitmap();
    1e4e:	4b11      	ldr	r3, [pc, #68]	; (1e94 <main+0xbc>)
    1e50:	4798      	blx	r3
		delay_ms(time_delay);
    1e52:	0038      	movs	r0, r7
    1e54:	47a8      	blx	r5
		ST7789_fillScreen(&ST7789_t,ST7789_WHITE);
    1e56:	0031      	movs	r1, r6
    1e58:	4804      	ldr	r0, [pc, #16]	; (1e6c <main+0x94>)
    1e5a:	47a0      	blx	r4
    1e5c:	e7cc      	b.n	1df8 <main+0x20>
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	00000115 	.word	0x00000115
    1e64:	00001975 	.word	0x00001975
    1e68:	00001951 	.word	0x00001951
    1e6c:	20000b14 	.word	0x20000b14
    1e70:	00000b65 	.word	0x00000b65
    1e74:	00001d7d 	.word	0x00001d7d
    1e78:	0000ffff 	.word	0x0000ffff
    1e7c:	00001bb5 	.word	0x00001bb5
    1e80:	00001125 	.word	0x00001125
    1e84:	00001a09 	.word	0x00001a09
    1e88:	00001999 	.word	0x00001999
    1e8c:	00001a7d 	.word	0x00001a7d
    1e90:	00001b21 	.word	0x00001b21
    1e94:	00001cb5 	.word	0x00001cb5

00001e98 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    1e98:	b510      	push	{r4, lr}
    1e9a:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    1e9c:	2800      	cmp	r0, #0
    1e9e:	d109      	bne.n	1eb4 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    1ea0:	0011      	movs	r1, r2
    1ea2:	0018      	movs	r0, r3
    1ea4:	4b05      	ldr	r3, [pc, #20]	; (1ebc <_read+0x24>)
    1ea6:	4798      	blx	r3
    1ea8:	2800      	cmp	r0, #0
    1eaa:	db00      	blt.n	1eae <_read+0x16>
	if (n < 0) {
		return -1;
	}

	return n;
}
    1eac:	bd10      	pop	{r4, pc}
    1eae:	2001      	movs	r0, #1
    1eb0:	4240      	negs	r0, r0
    1eb2:	e7fb      	b.n	1eac <_read+0x14>
		return -1;
    1eb4:	2001      	movs	r0, #1
    1eb6:	4240      	negs	r0, r0
    1eb8:	e7f8      	b.n	1eac <_read+0x14>
    1eba:	46c0      	nop			; (mov r8, r8)
    1ebc:	00001f15 	.word	0x00001f15

00001ec0 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    1ec0:	b510      	push	{r4, lr}
    1ec2:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    1ec4:	3801      	subs	r0, #1
    1ec6:	2802      	cmp	r0, #2
    1ec8:	d809      	bhi.n	1ede <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    1eca:	0011      	movs	r1, r2
    1ecc:	0018      	movs	r0, r3
    1ece:	4b05      	ldr	r3, [pc, #20]	; (1ee4 <_write+0x24>)
    1ed0:	4798      	blx	r3
    1ed2:	2800      	cmp	r0, #0
    1ed4:	db00      	blt.n	1ed8 <_write+0x18>
	if (n < 0) {
		return -1;
	}

	return n;
}
    1ed6:	bd10      	pop	{r4, pc}
    1ed8:	2001      	movs	r0, #1
    1eda:	4240      	negs	r0, r0
    1edc:	e7fb      	b.n	1ed6 <_write+0x16>
		return -1;
    1ede:	2001      	movs	r0, #1
    1ee0:	4240      	negs	r0, r0
    1ee2:	e7f8      	b.n	1ed6 <_write+0x16>
    1ee4:	00001f39 	.word	0x00001f39

00001ee8 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    1ee8:	b570      	push	{r4, r5, r6, lr}
    1eea:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    1eec:	4d06      	ldr	r5, [pc, #24]	; (1f08 <stdio_io_init+0x20>)
    1eee:	682b      	ldr	r3, [r5, #0]
    1ef0:	6898      	ldr	r0, [r3, #8]
    1ef2:	2100      	movs	r1, #0
    1ef4:	4c05      	ldr	r4, [pc, #20]	; (1f0c <stdio_io_init+0x24>)
    1ef6:	47a0      	blx	r4
	setbuf(stdin, NULL);
    1ef8:	682b      	ldr	r3, [r5, #0]
    1efa:	6858      	ldr	r0, [r3, #4]
    1efc:	2100      	movs	r1, #0
    1efe:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    1f00:	4b03      	ldr	r3, [pc, #12]	; (1f10 <stdio_io_init+0x28>)
    1f02:	601e      	str	r6, [r3, #0]
}
    1f04:	bd70      	pop	{r4, r5, r6, pc}
    1f06:	46c0      	nop			; (mov r8, r8)
    1f08:	20000028 	.word	0x20000028
    1f0c:	00002171 	.word	0x00002171
    1f10:	20000890 	.word	0x20000890

00001f14 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    1f14:	b510      	push	{r4, lr}
    1f16:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    1f18:	4b05      	ldr	r3, [pc, #20]	; (1f30 <stdio_io_read+0x1c>)
    1f1a:	6818      	ldr	r0, [r3, #0]
    1f1c:	2800      	cmp	r0, #0
    1f1e:	d004      	beq.n	1f2a <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    1f20:	b28a      	uxth	r2, r1
    1f22:	0021      	movs	r1, r4
    1f24:	4b03      	ldr	r3, [pc, #12]	; (1f34 <stdio_io_read+0x20>)
    1f26:	4798      	blx	r3
}
    1f28:	bd10      	pop	{r4, pc}
		return 0;
    1f2a:	2000      	movs	r0, #0
    1f2c:	e7fc      	b.n	1f28 <stdio_io_read+0x14>
    1f2e:	46c0      	nop			; (mov r8, r8)
    1f30:	20000890 	.word	0x20000890
    1f34:	00001179 	.word	0x00001179

00001f38 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1f38:	b510      	push	{r4, lr}
    1f3a:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    1f3c:	4b05      	ldr	r3, [pc, #20]	; (1f54 <stdio_io_write+0x1c>)
    1f3e:	6818      	ldr	r0, [r3, #0]
    1f40:	2800      	cmp	r0, #0
    1f42:	d004      	beq.n	1f4e <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    1f44:	b28a      	uxth	r2, r1
    1f46:	0021      	movs	r1, r4
    1f48:	4b03      	ldr	r3, [pc, #12]	; (1f58 <stdio_io_write+0x20>)
    1f4a:	4798      	blx	r3
}
    1f4c:	bd10      	pop	{r4, pc}
		return 0;
    1f4e:	2000      	movs	r0, #0
    1f50:	e7fc      	b.n	1f4c <stdio_io_write+0x14>
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	20000890 	.word	0x20000890
    1f58:	00001145 	.word	0x00001145

00001f5c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    1f5c:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    1f5e:	4c04      	ldr	r4, [pc, #16]	; (1f70 <stdio_redirect_init+0x14>)
    1f60:	0020      	movs	r0, r4
    1f62:	4b04      	ldr	r3, [pc, #16]	; (1f74 <stdio_redirect_init+0x18>)
    1f64:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    1f66:	0020      	movs	r0, r4
    1f68:	4b03      	ldr	r3, [pc, #12]	; (1f78 <stdio_redirect_init+0x1c>)
    1f6a:	4798      	blx	r3
}
    1f6c:	bd10      	pop	{r4, pc}
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	200008c8 	.word	0x200008c8
    1f74:	00001449 	.word	0x00001449
    1f78:	00001ee9 	.word	0x00001ee9

00001f7c <__udivsi3>:
    1f7c:	2200      	movs	r2, #0
    1f7e:	0843      	lsrs	r3, r0, #1
    1f80:	428b      	cmp	r3, r1
    1f82:	d374      	bcc.n	206e <STACK_SIZE+0x6e>
    1f84:	0903      	lsrs	r3, r0, #4
    1f86:	428b      	cmp	r3, r1
    1f88:	d35f      	bcc.n	204a <STACK_SIZE+0x4a>
    1f8a:	0a03      	lsrs	r3, r0, #8
    1f8c:	428b      	cmp	r3, r1
    1f8e:	d344      	bcc.n	201a <STACK_SIZE+0x1a>
    1f90:	0b03      	lsrs	r3, r0, #12
    1f92:	428b      	cmp	r3, r1
    1f94:	d328      	bcc.n	1fe8 <__udivsi3+0x6c>
    1f96:	0c03      	lsrs	r3, r0, #16
    1f98:	428b      	cmp	r3, r1
    1f9a:	d30d      	bcc.n	1fb8 <__udivsi3+0x3c>
    1f9c:	22ff      	movs	r2, #255	; 0xff
    1f9e:	0209      	lsls	r1, r1, #8
    1fa0:	ba12      	rev	r2, r2
    1fa2:	0c03      	lsrs	r3, r0, #16
    1fa4:	428b      	cmp	r3, r1
    1fa6:	d302      	bcc.n	1fae <__udivsi3+0x32>
    1fa8:	1212      	asrs	r2, r2, #8
    1faa:	0209      	lsls	r1, r1, #8
    1fac:	d065      	beq.n	207a <STACK_SIZE+0x7a>
    1fae:	0b03      	lsrs	r3, r0, #12
    1fb0:	428b      	cmp	r3, r1
    1fb2:	d319      	bcc.n	1fe8 <__udivsi3+0x6c>
    1fb4:	e000      	b.n	1fb8 <__udivsi3+0x3c>
    1fb6:	0a09      	lsrs	r1, r1, #8
    1fb8:	0bc3      	lsrs	r3, r0, #15
    1fba:	428b      	cmp	r3, r1
    1fbc:	d301      	bcc.n	1fc2 <__udivsi3+0x46>
    1fbe:	03cb      	lsls	r3, r1, #15
    1fc0:	1ac0      	subs	r0, r0, r3
    1fc2:	4152      	adcs	r2, r2
    1fc4:	0b83      	lsrs	r3, r0, #14
    1fc6:	428b      	cmp	r3, r1
    1fc8:	d301      	bcc.n	1fce <__udivsi3+0x52>
    1fca:	038b      	lsls	r3, r1, #14
    1fcc:	1ac0      	subs	r0, r0, r3
    1fce:	4152      	adcs	r2, r2
    1fd0:	0b43      	lsrs	r3, r0, #13
    1fd2:	428b      	cmp	r3, r1
    1fd4:	d301      	bcc.n	1fda <__udivsi3+0x5e>
    1fd6:	034b      	lsls	r3, r1, #13
    1fd8:	1ac0      	subs	r0, r0, r3
    1fda:	4152      	adcs	r2, r2
    1fdc:	0b03      	lsrs	r3, r0, #12
    1fde:	428b      	cmp	r3, r1
    1fe0:	d301      	bcc.n	1fe6 <__udivsi3+0x6a>
    1fe2:	030b      	lsls	r3, r1, #12
    1fe4:	1ac0      	subs	r0, r0, r3
    1fe6:	4152      	adcs	r2, r2
    1fe8:	0ac3      	lsrs	r3, r0, #11
    1fea:	428b      	cmp	r3, r1
    1fec:	d301      	bcc.n	1ff2 <__udivsi3+0x76>
    1fee:	02cb      	lsls	r3, r1, #11
    1ff0:	1ac0      	subs	r0, r0, r3
    1ff2:	4152      	adcs	r2, r2
    1ff4:	0a83      	lsrs	r3, r0, #10
    1ff6:	428b      	cmp	r3, r1
    1ff8:	d301      	bcc.n	1ffe <__udivsi3+0x82>
    1ffa:	028b      	lsls	r3, r1, #10
    1ffc:	1ac0      	subs	r0, r0, r3
    1ffe:	4152      	adcs	r2, r2
    2000:	0a43      	lsrs	r3, r0, #9
    2002:	428b      	cmp	r3, r1
    2004:	d301      	bcc.n	200a <STACK_SIZE+0xa>
    2006:	024b      	lsls	r3, r1, #9
    2008:	1ac0      	subs	r0, r0, r3
    200a:	4152      	adcs	r2, r2
    200c:	0a03      	lsrs	r3, r0, #8
    200e:	428b      	cmp	r3, r1
    2010:	d301      	bcc.n	2016 <STACK_SIZE+0x16>
    2012:	020b      	lsls	r3, r1, #8
    2014:	1ac0      	subs	r0, r0, r3
    2016:	4152      	adcs	r2, r2
    2018:	d2cd      	bcs.n	1fb6 <__udivsi3+0x3a>
    201a:	09c3      	lsrs	r3, r0, #7
    201c:	428b      	cmp	r3, r1
    201e:	d301      	bcc.n	2024 <STACK_SIZE+0x24>
    2020:	01cb      	lsls	r3, r1, #7
    2022:	1ac0      	subs	r0, r0, r3
    2024:	4152      	adcs	r2, r2
    2026:	0983      	lsrs	r3, r0, #6
    2028:	428b      	cmp	r3, r1
    202a:	d301      	bcc.n	2030 <STACK_SIZE+0x30>
    202c:	018b      	lsls	r3, r1, #6
    202e:	1ac0      	subs	r0, r0, r3
    2030:	4152      	adcs	r2, r2
    2032:	0943      	lsrs	r3, r0, #5
    2034:	428b      	cmp	r3, r1
    2036:	d301      	bcc.n	203c <STACK_SIZE+0x3c>
    2038:	014b      	lsls	r3, r1, #5
    203a:	1ac0      	subs	r0, r0, r3
    203c:	4152      	adcs	r2, r2
    203e:	0903      	lsrs	r3, r0, #4
    2040:	428b      	cmp	r3, r1
    2042:	d301      	bcc.n	2048 <STACK_SIZE+0x48>
    2044:	010b      	lsls	r3, r1, #4
    2046:	1ac0      	subs	r0, r0, r3
    2048:	4152      	adcs	r2, r2
    204a:	08c3      	lsrs	r3, r0, #3
    204c:	428b      	cmp	r3, r1
    204e:	d301      	bcc.n	2054 <STACK_SIZE+0x54>
    2050:	00cb      	lsls	r3, r1, #3
    2052:	1ac0      	subs	r0, r0, r3
    2054:	4152      	adcs	r2, r2
    2056:	0883      	lsrs	r3, r0, #2
    2058:	428b      	cmp	r3, r1
    205a:	d301      	bcc.n	2060 <STACK_SIZE+0x60>
    205c:	008b      	lsls	r3, r1, #2
    205e:	1ac0      	subs	r0, r0, r3
    2060:	4152      	adcs	r2, r2
    2062:	0843      	lsrs	r3, r0, #1
    2064:	428b      	cmp	r3, r1
    2066:	d301      	bcc.n	206c <STACK_SIZE+0x6c>
    2068:	004b      	lsls	r3, r1, #1
    206a:	1ac0      	subs	r0, r0, r3
    206c:	4152      	adcs	r2, r2
    206e:	1a41      	subs	r1, r0, r1
    2070:	d200      	bcs.n	2074 <STACK_SIZE+0x74>
    2072:	4601      	mov	r1, r0
    2074:	4152      	adcs	r2, r2
    2076:	4610      	mov	r0, r2
    2078:	4770      	bx	lr
    207a:	e7ff      	b.n	207c <STACK_SIZE+0x7c>
    207c:	b501      	push	{r0, lr}
    207e:	2000      	movs	r0, #0
    2080:	f000 f806 	bl	2090 <__aeabi_idiv0>
    2084:	bd02      	pop	{r1, pc}
    2086:	46c0      	nop			; (mov r8, r8)

00002088 <__aeabi_uidivmod>:
    2088:	2900      	cmp	r1, #0
    208a:	d0f7      	beq.n	207c <STACK_SIZE+0x7c>
    208c:	e776      	b.n	1f7c <__udivsi3>
    208e:	4770      	bx	lr

00002090 <__aeabi_idiv0>:
    2090:	4770      	bx	lr
    2092:	46c0      	nop			; (mov r8, r8)

00002094 <__libc_init_array>:
    2094:	b570      	push	{r4, r5, r6, lr}
    2096:	4e0d      	ldr	r6, [pc, #52]	; (20cc <__libc_init_array+0x38>)
    2098:	4d0d      	ldr	r5, [pc, #52]	; (20d0 <__libc_init_array+0x3c>)
    209a:	2400      	movs	r4, #0
    209c:	1bad      	subs	r5, r5, r6
    209e:	10ad      	asrs	r5, r5, #2
    20a0:	d005      	beq.n	20ae <__libc_init_array+0x1a>
    20a2:	00a3      	lsls	r3, r4, #2
    20a4:	58f3      	ldr	r3, [r6, r3]
    20a6:	3401      	adds	r4, #1
    20a8:	4798      	blx	r3
    20aa:	42a5      	cmp	r5, r4
    20ac:	d1f9      	bne.n	20a2 <__libc_init_array+0xe>
    20ae:	f007 fd7b 	bl	9ba8 <_init>
    20b2:	4e08      	ldr	r6, [pc, #32]	; (20d4 <__libc_init_array+0x40>)
    20b4:	4d08      	ldr	r5, [pc, #32]	; (20d8 <__libc_init_array+0x44>)
    20b6:	2400      	movs	r4, #0
    20b8:	1bad      	subs	r5, r5, r6
    20ba:	10ad      	asrs	r5, r5, #2
    20bc:	d005      	beq.n	20ca <__libc_init_array+0x36>
    20be:	00a3      	lsls	r3, r4, #2
    20c0:	58f3      	ldr	r3, [r6, r3]
    20c2:	3401      	adds	r4, #1
    20c4:	4798      	blx	r3
    20c6:	42a5      	cmp	r5, r4
    20c8:	d1f9      	bne.n	20be <__libc_init_array+0x2a>
    20ca:	bd70      	pop	{r4, r5, r6, pc}
    20cc:	00009bb4 	.word	0x00009bb4
    20d0:	00009bb4 	.word	0x00009bb4
    20d4:	00009bb4 	.word	0x00009bb4
    20d8:	00009bbc 	.word	0x00009bbc

000020dc <memset>:
    20dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    20de:	0783      	lsls	r3, r0, #30
    20e0:	d043      	beq.n	216a <memset+0x8e>
    20e2:	1e54      	subs	r4, r2, #1
    20e4:	2a00      	cmp	r2, #0
    20e6:	d03f      	beq.n	2168 <memset+0x8c>
    20e8:	b2ce      	uxtb	r6, r1
    20ea:	0002      	movs	r2, r0
    20ec:	2503      	movs	r5, #3
    20ee:	e002      	b.n	20f6 <memset+0x1a>
    20f0:	001a      	movs	r2, r3
    20f2:	3c01      	subs	r4, #1
    20f4:	d338      	bcc.n	2168 <memset+0x8c>
    20f6:	1c53      	adds	r3, r2, #1
    20f8:	7016      	strb	r6, [r2, #0]
    20fa:	422b      	tst	r3, r5
    20fc:	d1f8      	bne.n	20f0 <memset+0x14>
    20fe:	2c03      	cmp	r4, #3
    2100:	d92a      	bls.n	2158 <memset+0x7c>
    2102:	22ff      	movs	r2, #255	; 0xff
    2104:	400a      	ands	r2, r1
    2106:	0215      	lsls	r5, r2, #8
    2108:	4315      	orrs	r5, r2
    210a:	042a      	lsls	r2, r5, #16
    210c:	4315      	orrs	r5, r2
    210e:	2c0f      	cmp	r4, #15
    2110:	d914      	bls.n	213c <memset+0x60>
    2112:	0027      	movs	r7, r4
    2114:	001a      	movs	r2, r3
    2116:	3f10      	subs	r7, #16
    2118:	093e      	lsrs	r6, r7, #4
    211a:	3601      	adds	r6, #1
    211c:	0136      	lsls	r6, r6, #4
    211e:	199e      	adds	r6, r3, r6
    2120:	6015      	str	r5, [r2, #0]
    2122:	6055      	str	r5, [r2, #4]
    2124:	6095      	str	r5, [r2, #8]
    2126:	60d5      	str	r5, [r2, #12]
    2128:	3210      	adds	r2, #16
    212a:	4296      	cmp	r6, r2
    212c:	d1f8      	bne.n	2120 <memset+0x44>
    212e:	220f      	movs	r2, #15
    2130:	4397      	bics	r7, r2
    2132:	3710      	adds	r7, #16
    2134:	19db      	adds	r3, r3, r7
    2136:	4014      	ands	r4, r2
    2138:	2c03      	cmp	r4, #3
    213a:	d90d      	bls.n	2158 <memset+0x7c>
    213c:	001a      	movs	r2, r3
    213e:	1f27      	subs	r7, r4, #4
    2140:	08be      	lsrs	r6, r7, #2
    2142:	3601      	adds	r6, #1
    2144:	00b6      	lsls	r6, r6, #2
    2146:	199e      	adds	r6, r3, r6
    2148:	c220      	stmia	r2!, {r5}
    214a:	42b2      	cmp	r2, r6
    214c:	d1fc      	bne.n	2148 <memset+0x6c>
    214e:	2203      	movs	r2, #3
    2150:	4397      	bics	r7, r2
    2152:	3704      	adds	r7, #4
    2154:	19db      	adds	r3, r3, r7
    2156:	4014      	ands	r4, r2
    2158:	2c00      	cmp	r4, #0
    215a:	d005      	beq.n	2168 <memset+0x8c>
    215c:	b2c9      	uxtb	r1, r1
    215e:	191c      	adds	r4, r3, r4
    2160:	7019      	strb	r1, [r3, #0]
    2162:	3301      	adds	r3, #1
    2164:	429c      	cmp	r4, r3
    2166:	d1fb      	bne.n	2160 <memset+0x84>
    2168:	bdf0      	pop	{r4, r5, r6, r7, pc}
    216a:	0014      	movs	r4, r2
    216c:	0003      	movs	r3, r0
    216e:	e7c6      	b.n	20fe <memset+0x22>

00002170 <setbuf>:
    2170:	424a      	negs	r2, r1
    2172:	414a      	adcs	r2, r1
    2174:	2380      	movs	r3, #128	; 0x80
    2176:	b510      	push	{r4, lr}
    2178:	0052      	lsls	r2, r2, #1
    217a:	00db      	lsls	r3, r3, #3
    217c:	f000 f802 	bl	2184 <setvbuf>
    2180:	bd10      	pop	{r4, pc}
    2182:	46c0      	nop			; (mov r8, r8)

00002184 <setvbuf>:
    2184:	b5f0      	push	{r4, r5, r6, r7, lr}
    2186:	4647      	mov	r7, r8
    2188:	46ce      	mov	lr, r9
    218a:	b580      	push	{r7, lr}
    218c:	001f      	movs	r7, r3
    218e:	4b63      	ldr	r3, [pc, #396]	; (231c <setvbuf+0x198>)
    2190:	b083      	sub	sp, #12
    2192:	681d      	ldr	r5, [r3, #0]
    2194:	0004      	movs	r4, r0
    2196:	4688      	mov	r8, r1
    2198:	0016      	movs	r6, r2
    219a:	2d00      	cmp	r5, #0
    219c:	d002      	beq.n	21a4 <setvbuf+0x20>
    219e:	6bab      	ldr	r3, [r5, #56]	; 0x38
    21a0:	2b00      	cmp	r3, #0
    21a2:	d066      	beq.n	2272 <setvbuf+0xee>
    21a4:	2e02      	cmp	r6, #2
    21a6:	d005      	beq.n	21b4 <setvbuf+0x30>
    21a8:	2e01      	cmp	r6, #1
    21aa:	d900      	bls.n	21ae <setvbuf+0x2a>
    21ac:	e0a1      	b.n	22f2 <setvbuf+0x16e>
    21ae:	2f00      	cmp	r7, #0
    21b0:	da00      	bge.n	21b4 <setvbuf+0x30>
    21b2:	e09e      	b.n	22f2 <setvbuf+0x16e>
    21b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    21b6:	07db      	lsls	r3, r3, #31
    21b8:	d533      	bpl.n	2222 <setvbuf+0x9e>
    21ba:	0021      	movs	r1, r4
    21bc:	0028      	movs	r0, r5
    21be:	f000 f96d 	bl	249c <_fflush_r>
    21c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    21c4:	2900      	cmp	r1, #0
    21c6:	d008      	beq.n	21da <setvbuf+0x56>
    21c8:	0023      	movs	r3, r4
    21ca:	3340      	adds	r3, #64	; 0x40
    21cc:	4299      	cmp	r1, r3
    21ce:	d002      	beq.n	21d6 <setvbuf+0x52>
    21d0:	0028      	movs	r0, r5
    21d2:	f000 fa67 	bl	26a4 <_free_r>
    21d6:	2300      	movs	r3, #0
    21d8:	6323      	str	r3, [r4, #48]	; 0x30
    21da:	2300      	movs	r3, #0
    21dc:	61a3      	str	r3, [r4, #24]
    21de:	6063      	str	r3, [r4, #4]
    21e0:	220c      	movs	r2, #12
    21e2:	5ea3      	ldrsh	r3, [r4, r2]
    21e4:	061a      	lsls	r2, r3, #24
    21e6:	d43d      	bmi.n	2264 <setvbuf+0xe0>
    21e8:	4a4d      	ldr	r2, [pc, #308]	; (2320 <setvbuf+0x19c>)
    21ea:	4013      	ands	r3, r2
    21ec:	81a3      	strh	r3, [r4, #12]
    21ee:	2e02      	cmp	r6, #2
    21f0:	d01e      	beq.n	2230 <setvbuf+0xac>
    21f2:	ab01      	add	r3, sp, #4
    21f4:	466a      	mov	r2, sp
    21f6:	0021      	movs	r1, r4
    21f8:	0028      	movs	r0, r5
    21fa:	f000 fb5f 	bl	28bc <__swhatbuf_r>
    21fe:	89a3      	ldrh	r3, [r4, #12]
    2200:	4318      	orrs	r0, r3
    2202:	81a0      	strh	r0, [r4, #12]
    2204:	2f00      	cmp	r7, #0
    2206:	d138      	bne.n	227a <setvbuf+0xf6>
    2208:	9f00      	ldr	r7, [sp, #0]
    220a:	0038      	movs	r0, r7
    220c:	f000 fb86 	bl	291c <malloc>
    2210:	4680      	mov	r8, r0
    2212:	2800      	cmp	r0, #0
    2214:	d100      	bne.n	2218 <setvbuf+0x94>
    2216:	e06f      	b.n	22f8 <setvbuf+0x174>
    2218:	2280      	movs	r2, #128	; 0x80
    221a:	89a3      	ldrh	r3, [r4, #12]
    221c:	4313      	orrs	r3, r2
    221e:	81a3      	strh	r3, [r4, #12]
    2220:	e02e      	b.n	2280 <setvbuf+0xfc>
    2222:	89a3      	ldrh	r3, [r4, #12]
    2224:	059b      	lsls	r3, r3, #22
    2226:	d4c8      	bmi.n	21ba <setvbuf+0x36>
    2228:	6da0      	ldr	r0, [r4, #88]	; 0x58
    222a:	f000 fb43 	bl	28b4 <__retarget_lock_acquire_recursive>
    222e:	e7c4      	b.n	21ba <setvbuf+0x36>
    2230:	2500      	movs	r5, #0
    2232:	2202      	movs	r2, #2
    2234:	4313      	orrs	r3, r2
    2236:	2200      	movs	r2, #0
    2238:	60a2      	str	r2, [r4, #8]
    223a:	0022      	movs	r2, r4
    223c:	3243      	adds	r2, #67	; 0x43
    223e:	6022      	str	r2, [r4, #0]
    2240:	6122      	str	r2, [r4, #16]
    2242:	2201      	movs	r2, #1
    2244:	6e61      	ldr	r1, [r4, #100]	; 0x64
    2246:	81a3      	strh	r3, [r4, #12]
    2248:	6162      	str	r2, [r4, #20]
    224a:	4211      	tst	r1, r2
    224c:	d104      	bne.n	2258 <setvbuf+0xd4>
    224e:	059b      	lsls	r3, r3, #22
    2250:	d402      	bmi.n	2258 <setvbuf+0xd4>
    2252:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2254:	f000 fb30 	bl	28b8 <__retarget_lock_release_recursive>
    2258:	0028      	movs	r0, r5
    225a:	b003      	add	sp, #12
    225c:	bc0c      	pop	{r2, r3}
    225e:	4690      	mov	r8, r2
    2260:	4699      	mov	r9, r3
    2262:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2264:	6921      	ldr	r1, [r4, #16]
    2266:	0028      	movs	r0, r5
    2268:	f000 fa1c 	bl	26a4 <_free_r>
    226c:	220c      	movs	r2, #12
    226e:	5ea3      	ldrsh	r3, [r4, r2]
    2270:	e7ba      	b.n	21e8 <setvbuf+0x64>
    2272:	0028      	movs	r0, r5
    2274:	f000 f96c 	bl	2550 <__sinit>
    2278:	e794      	b.n	21a4 <setvbuf+0x20>
    227a:	4643      	mov	r3, r8
    227c:	2b00      	cmp	r3, #0
    227e:	d0c4      	beq.n	220a <setvbuf+0x86>
    2280:	6bab      	ldr	r3, [r5, #56]	; 0x38
    2282:	2b00      	cmp	r3, #0
    2284:	d027      	beq.n	22d6 <setvbuf+0x152>
    2286:	9b00      	ldr	r3, [sp, #0]
    2288:	429f      	cmp	r7, r3
    228a:	d02a      	beq.n	22e2 <setvbuf+0x15e>
    228c:	2380      	movs	r3, #128	; 0x80
    228e:	89a2      	ldrh	r2, [r4, #12]
    2290:	011b      	lsls	r3, r3, #4
    2292:	4313      	orrs	r3, r2
    2294:	b21b      	sxth	r3, r3
    2296:	81a3      	strh	r3, [r4, #12]
    2298:	2e01      	cmp	r6, #1
    229a:	d026      	beq.n	22ea <setvbuf+0x166>
    229c:	4642      	mov	r2, r8
    229e:	6022      	str	r2, [r4, #0]
    22a0:	6122      	str	r2, [r4, #16]
    22a2:	2208      	movs	r2, #8
    22a4:	b29b      	uxth	r3, r3
    22a6:	6167      	str	r7, [r4, #20]
    22a8:	401a      	ands	r2, r3
    22aa:	d00b      	beq.n	22c4 <setvbuf+0x140>
    22ac:	07da      	lsls	r2, r3, #31
    22ae:	d510      	bpl.n	22d2 <setvbuf+0x14e>
    22b0:	2200      	movs	r2, #0
    22b2:	2501      	movs	r5, #1
    22b4:	60a2      	str	r2, [r4, #8]
    22b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
    22b8:	427f      	negs	r7, r7
    22ba:	61a7      	str	r7, [r4, #24]
    22bc:	4015      	ands	r5, r2
    22be:	d0c6      	beq.n	224e <setvbuf+0xca>
    22c0:	2500      	movs	r5, #0
    22c2:	e7c9      	b.n	2258 <setvbuf+0xd4>
    22c4:	60a2      	str	r2, [r4, #8]
    22c6:	2501      	movs	r5, #1
    22c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
    22ca:	4015      	ands	r5, r2
    22cc:	d0bf      	beq.n	224e <setvbuf+0xca>
    22ce:	2500      	movs	r5, #0
    22d0:	e7c2      	b.n	2258 <setvbuf+0xd4>
    22d2:	60a7      	str	r7, [r4, #8]
    22d4:	e7f7      	b.n	22c6 <setvbuf+0x142>
    22d6:	0028      	movs	r0, r5
    22d8:	f000 f93a 	bl	2550 <__sinit>
    22dc:	9b00      	ldr	r3, [sp, #0]
    22de:	429f      	cmp	r7, r3
    22e0:	d1d4      	bne.n	228c <setvbuf+0x108>
    22e2:	220c      	movs	r2, #12
    22e4:	5ea3      	ldrsh	r3, [r4, r2]
    22e6:	2e01      	cmp	r6, #1
    22e8:	d1d8      	bne.n	229c <setvbuf+0x118>
    22ea:	2201      	movs	r2, #1
    22ec:	4313      	orrs	r3, r2
    22ee:	81a3      	strh	r3, [r4, #12]
    22f0:	e7d4      	b.n	229c <setvbuf+0x118>
    22f2:	2501      	movs	r5, #1
    22f4:	426d      	negs	r5, r5
    22f6:	e7af      	b.n	2258 <setvbuf+0xd4>
    22f8:	9b00      	ldr	r3, [sp, #0]
    22fa:	4699      	mov	r9, r3
    22fc:	42bb      	cmp	r3, r7
    22fe:	d005      	beq.n	230c <setvbuf+0x188>
    2300:	0018      	movs	r0, r3
    2302:	f000 fb0b 	bl	291c <malloc>
    2306:	4680      	mov	r8, r0
    2308:	2800      	cmp	r0, #0
    230a:	d104      	bne.n	2316 <setvbuf+0x192>
    230c:	2501      	movs	r5, #1
    230e:	220c      	movs	r2, #12
    2310:	5ea3      	ldrsh	r3, [r4, r2]
    2312:	426d      	negs	r5, r5
    2314:	e78d      	b.n	2232 <setvbuf+0xae>
    2316:	464f      	mov	r7, r9
    2318:	e77e      	b.n	2218 <setvbuf+0x94>
    231a:	46c0      	nop			; (mov r8, r8)
    231c:	20000028 	.word	0x20000028
    2320:	fffff35c 	.word	0xfffff35c

00002324 <register_fini>:
    2324:	4b03      	ldr	r3, [pc, #12]	; (2334 <register_fini+0x10>)
    2326:	b510      	push	{r4, lr}
    2328:	2b00      	cmp	r3, #0
    232a:	d002      	beq.n	2332 <register_fini+0xe>
    232c:	4802      	ldr	r0, [pc, #8]	; (2338 <register_fini+0x14>)
    232e:	f000 f805 	bl	233c <atexit>
    2332:	bd10      	pop	{r4, pc}
    2334:	00000000 	.word	0x00000000
    2338:	000025d1 	.word	0x000025d1

0000233c <atexit>:
    233c:	b510      	push	{r4, lr}
    233e:	0001      	movs	r1, r0
    2340:	2300      	movs	r3, #0
    2342:	2200      	movs	r2, #0
    2344:	2000      	movs	r0, #0
    2346:	f000 fe2b 	bl	2fa0 <__register_exitproc>
    234a:	bd10      	pop	{r4, pc}

0000234c <__sflush_r>:
    234c:	b5f0      	push	{r4, r5, r6, r7, lr}
    234e:	46c6      	mov	lr, r8
    2350:	b500      	push	{lr}
    2352:	230c      	movs	r3, #12
    2354:	5eca      	ldrsh	r2, [r1, r3]
    2356:	4680      	mov	r8, r0
    2358:	b293      	uxth	r3, r2
    235a:	000c      	movs	r4, r1
    235c:	0719      	lsls	r1, r3, #28
    235e:	d440      	bmi.n	23e2 <__sflush_r+0x96>
    2360:	2380      	movs	r3, #128	; 0x80
    2362:	011b      	lsls	r3, r3, #4
    2364:	4313      	orrs	r3, r2
    2366:	6862      	ldr	r2, [r4, #4]
    2368:	81a3      	strh	r3, [r4, #12]
    236a:	2a00      	cmp	r2, #0
    236c:	dc00      	bgt.n	2370 <__sflush_r+0x24>
    236e:	e070      	b.n	2452 <__sflush_r+0x106>
    2370:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2372:	2e00      	cmp	r6, #0
    2374:	d031      	beq.n	23da <__sflush_r+0x8e>
    2376:	4642      	mov	r2, r8
    2378:	4641      	mov	r1, r8
    237a:	6815      	ldr	r5, [r2, #0]
    237c:	2200      	movs	r2, #0
    237e:	b29b      	uxth	r3, r3
    2380:	600a      	str	r2, [r1, #0]
    2382:	04da      	lsls	r2, r3, #19
    2384:	d400      	bmi.n	2388 <__sflush_r+0x3c>
    2386:	e069      	b.n	245c <__sflush_r+0x110>
    2388:	6d22      	ldr	r2, [r4, #80]	; 0x50
    238a:	075b      	lsls	r3, r3, #29
    238c:	d506      	bpl.n	239c <__sflush_r+0x50>
    238e:	6863      	ldr	r3, [r4, #4]
    2390:	1ad2      	subs	r2, r2, r3
    2392:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2394:	2b00      	cmp	r3, #0
    2396:	d001      	beq.n	239c <__sflush_r+0x50>
    2398:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    239a:	1ad2      	subs	r2, r2, r3
    239c:	2300      	movs	r3, #0
    239e:	69e1      	ldr	r1, [r4, #28]
    23a0:	4640      	mov	r0, r8
    23a2:	47b0      	blx	r6
    23a4:	1c43      	adds	r3, r0, #1
    23a6:	d03d      	beq.n	2424 <__sflush_r+0xd8>
    23a8:	89a3      	ldrh	r3, [r4, #12]
    23aa:	4a3a      	ldr	r2, [pc, #232]	; (2494 <__sflush_r+0x148>)
    23ac:	4013      	ands	r3, r2
    23ae:	2200      	movs	r2, #0
    23b0:	6062      	str	r2, [r4, #4]
    23b2:	6922      	ldr	r2, [r4, #16]
    23b4:	b21b      	sxth	r3, r3
    23b6:	81a3      	strh	r3, [r4, #12]
    23b8:	6022      	str	r2, [r4, #0]
    23ba:	04db      	lsls	r3, r3, #19
    23bc:	d447      	bmi.n	244e <__sflush_r+0x102>
    23be:	4643      	mov	r3, r8
    23c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    23c2:	601d      	str	r5, [r3, #0]
    23c4:	2900      	cmp	r1, #0
    23c6:	d008      	beq.n	23da <__sflush_r+0x8e>
    23c8:	0023      	movs	r3, r4
    23ca:	3340      	adds	r3, #64	; 0x40
    23cc:	4299      	cmp	r1, r3
    23ce:	d002      	beq.n	23d6 <__sflush_r+0x8a>
    23d0:	4640      	mov	r0, r8
    23d2:	f000 f967 	bl	26a4 <_free_r>
    23d6:	2300      	movs	r3, #0
    23d8:	6323      	str	r3, [r4, #48]	; 0x30
    23da:	2000      	movs	r0, #0
    23dc:	bc04      	pop	{r2}
    23de:	4690      	mov	r8, r2
    23e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23e2:	6926      	ldr	r6, [r4, #16]
    23e4:	2e00      	cmp	r6, #0
    23e6:	d0f8      	beq.n	23da <__sflush_r+0x8e>
    23e8:	6822      	ldr	r2, [r4, #0]
    23ea:	6026      	str	r6, [r4, #0]
    23ec:	1b95      	subs	r5, r2, r6
    23ee:	2200      	movs	r2, #0
    23f0:	079b      	lsls	r3, r3, #30
    23f2:	d100      	bne.n	23f6 <__sflush_r+0xaa>
    23f4:	6962      	ldr	r2, [r4, #20]
    23f6:	60a2      	str	r2, [r4, #8]
    23f8:	2d00      	cmp	r5, #0
    23fa:	dc04      	bgt.n	2406 <__sflush_r+0xba>
    23fc:	e7ed      	b.n	23da <__sflush_r+0x8e>
    23fe:	1836      	adds	r6, r6, r0
    2400:	1a2d      	subs	r5, r5, r0
    2402:	2d00      	cmp	r5, #0
    2404:	dde9      	ble.n	23da <__sflush_r+0x8e>
    2406:	002b      	movs	r3, r5
    2408:	0032      	movs	r2, r6
    240a:	69e1      	ldr	r1, [r4, #28]
    240c:	4640      	mov	r0, r8
    240e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    2410:	47b8      	blx	r7
    2412:	2800      	cmp	r0, #0
    2414:	dcf3      	bgt.n	23fe <__sflush_r+0xb2>
    2416:	2240      	movs	r2, #64	; 0x40
    2418:	2001      	movs	r0, #1
    241a:	89a3      	ldrh	r3, [r4, #12]
    241c:	4240      	negs	r0, r0
    241e:	4313      	orrs	r3, r2
    2420:	81a3      	strh	r3, [r4, #12]
    2422:	e7db      	b.n	23dc <__sflush_r+0x90>
    2424:	4643      	mov	r3, r8
    2426:	6819      	ldr	r1, [r3, #0]
    2428:	291d      	cmp	r1, #29
    242a:	d8f4      	bhi.n	2416 <__sflush_r+0xca>
    242c:	4b1a      	ldr	r3, [pc, #104]	; (2498 <__sflush_r+0x14c>)
    242e:	2201      	movs	r2, #1
    2430:	40cb      	lsrs	r3, r1
    2432:	439a      	bics	r2, r3
    2434:	d1ef      	bne.n	2416 <__sflush_r+0xca>
    2436:	89a3      	ldrh	r3, [r4, #12]
    2438:	4e16      	ldr	r6, [pc, #88]	; (2494 <__sflush_r+0x148>)
    243a:	6062      	str	r2, [r4, #4]
    243c:	4033      	ands	r3, r6
    243e:	6922      	ldr	r2, [r4, #16]
    2440:	b21b      	sxth	r3, r3
    2442:	81a3      	strh	r3, [r4, #12]
    2444:	6022      	str	r2, [r4, #0]
    2446:	04db      	lsls	r3, r3, #19
    2448:	d5b9      	bpl.n	23be <__sflush_r+0x72>
    244a:	2900      	cmp	r1, #0
    244c:	d1b7      	bne.n	23be <__sflush_r+0x72>
    244e:	6520      	str	r0, [r4, #80]	; 0x50
    2450:	e7b5      	b.n	23be <__sflush_r+0x72>
    2452:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    2454:	2a00      	cmp	r2, #0
    2456:	dd00      	ble.n	245a <__sflush_r+0x10e>
    2458:	e78a      	b.n	2370 <__sflush_r+0x24>
    245a:	e7be      	b.n	23da <__sflush_r+0x8e>
    245c:	2200      	movs	r2, #0
    245e:	2301      	movs	r3, #1
    2460:	69e1      	ldr	r1, [r4, #28]
    2462:	4640      	mov	r0, r8
    2464:	47b0      	blx	r6
    2466:	0002      	movs	r2, r0
    2468:	1c43      	adds	r3, r0, #1
    246a:	d002      	beq.n	2472 <__sflush_r+0x126>
    246c:	89a3      	ldrh	r3, [r4, #12]
    246e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2470:	e78b      	b.n	238a <__sflush_r+0x3e>
    2472:	4643      	mov	r3, r8
    2474:	681b      	ldr	r3, [r3, #0]
    2476:	2b00      	cmp	r3, #0
    2478:	d0f8      	beq.n	246c <__sflush_r+0x120>
    247a:	2b1d      	cmp	r3, #29
    247c:	d001      	beq.n	2482 <__sflush_r+0x136>
    247e:	2b16      	cmp	r3, #22
    2480:	d103      	bne.n	248a <__sflush_r+0x13e>
    2482:	4643      	mov	r3, r8
    2484:	2000      	movs	r0, #0
    2486:	601d      	str	r5, [r3, #0]
    2488:	e7a8      	b.n	23dc <__sflush_r+0x90>
    248a:	2140      	movs	r1, #64	; 0x40
    248c:	89a3      	ldrh	r3, [r4, #12]
    248e:	430b      	orrs	r3, r1
    2490:	81a3      	strh	r3, [r4, #12]
    2492:	e7a3      	b.n	23dc <__sflush_r+0x90>
    2494:	fffff7ff 	.word	0xfffff7ff
    2498:	20400001 	.word	0x20400001

0000249c <_fflush_r>:
    249c:	b570      	push	{r4, r5, r6, lr}
    249e:	0005      	movs	r5, r0
    24a0:	000c      	movs	r4, r1
    24a2:	2800      	cmp	r0, #0
    24a4:	d002      	beq.n	24ac <_fflush_r+0x10>
    24a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    24a8:	2b00      	cmp	r3, #0
    24aa:	d016      	beq.n	24da <_fflush_r+0x3e>
    24ac:	220c      	movs	r2, #12
    24ae:	5ea3      	ldrsh	r3, [r4, r2]
    24b0:	2600      	movs	r6, #0
    24b2:	2b00      	cmp	r3, #0
    24b4:	d00f      	beq.n	24d6 <_fflush_r+0x3a>
    24b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
    24b8:	07d2      	lsls	r2, r2, #31
    24ba:	d401      	bmi.n	24c0 <_fflush_r+0x24>
    24bc:	059b      	lsls	r3, r3, #22
    24be:	d513      	bpl.n	24e8 <_fflush_r+0x4c>
    24c0:	0021      	movs	r1, r4
    24c2:	0028      	movs	r0, r5
    24c4:	f7ff ff42 	bl	234c <__sflush_r>
    24c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
    24ca:	0006      	movs	r6, r0
    24cc:	07db      	lsls	r3, r3, #31
    24ce:	d402      	bmi.n	24d6 <_fflush_r+0x3a>
    24d0:	89a3      	ldrh	r3, [r4, #12]
    24d2:	059b      	lsls	r3, r3, #22
    24d4:	d504      	bpl.n	24e0 <_fflush_r+0x44>
    24d6:	0030      	movs	r0, r6
    24d8:	bd70      	pop	{r4, r5, r6, pc}
    24da:	f000 f839 	bl	2550 <__sinit>
    24de:	e7e5      	b.n	24ac <_fflush_r+0x10>
    24e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    24e2:	f000 f9e9 	bl	28b8 <__retarget_lock_release_recursive>
    24e6:	e7f6      	b.n	24d6 <_fflush_r+0x3a>
    24e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    24ea:	f000 f9e3 	bl	28b4 <__retarget_lock_acquire_recursive>
    24ee:	e7e7      	b.n	24c0 <_fflush_r+0x24>

000024f0 <_cleanup_r>:
    24f0:	b510      	push	{r4, lr}
    24f2:	4902      	ldr	r1, [pc, #8]	; (24fc <_cleanup_r+0xc>)
    24f4:	f000 f9b4 	bl	2860 <_fwalk_reent>
    24f8:	bd10      	pop	{r4, pc}
    24fa:	46c0      	nop			; (mov r8, r8)
    24fc:	000030b9 	.word	0x000030b9

00002500 <std.isra.0>:
    2500:	2300      	movs	r3, #0
    2502:	b510      	push	{r4, lr}
    2504:	0004      	movs	r4, r0
    2506:	6003      	str	r3, [r0, #0]
    2508:	6043      	str	r3, [r0, #4]
    250a:	6083      	str	r3, [r0, #8]
    250c:	8181      	strh	r1, [r0, #12]
    250e:	6643      	str	r3, [r0, #100]	; 0x64
    2510:	81c2      	strh	r2, [r0, #14]
    2512:	6103      	str	r3, [r0, #16]
    2514:	6143      	str	r3, [r0, #20]
    2516:	6183      	str	r3, [r0, #24]
    2518:	2208      	movs	r2, #8
    251a:	2100      	movs	r1, #0
    251c:	305c      	adds	r0, #92	; 0x5c
    251e:	f7ff fddd 	bl	20dc <memset>
    2522:	0020      	movs	r0, r4
    2524:	4b06      	ldr	r3, [pc, #24]	; (2540 <std.isra.0+0x40>)
    2526:	61e4      	str	r4, [r4, #28]
    2528:	6223      	str	r3, [r4, #32]
    252a:	4b06      	ldr	r3, [pc, #24]	; (2544 <std.isra.0+0x44>)
    252c:	3058      	adds	r0, #88	; 0x58
    252e:	6263      	str	r3, [r4, #36]	; 0x24
    2530:	4b05      	ldr	r3, [pc, #20]	; (2548 <std.isra.0+0x48>)
    2532:	62a3      	str	r3, [r4, #40]	; 0x28
    2534:	4b05      	ldr	r3, [pc, #20]	; (254c <std.isra.0+0x4c>)
    2536:	62e3      	str	r3, [r4, #44]	; 0x2c
    2538:	f000 f9b8 	bl	28ac <__retarget_lock_init_recursive>
    253c:	bd10      	pop	{r4, pc}
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	00002edd 	.word	0x00002edd
    2544:	00002f05 	.word	0x00002f05
    2548:	00002f41 	.word	0x00002f41
    254c:	00002f6d 	.word	0x00002f6d

00002550 <__sinit>:
    2550:	b570      	push	{r4, r5, r6, lr}
    2552:	0004      	movs	r4, r0
    2554:	4d14      	ldr	r5, [pc, #80]	; (25a8 <__sinit+0x58>)
    2556:	0028      	movs	r0, r5
    2558:	f000 f9ac 	bl	28b4 <__retarget_lock_acquire_recursive>
    255c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    255e:	2b00      	cmp	r3, #0
    2560:	d11d      	bne.n	259e <__sinit+0x4e>
    2562:	4a12      	ldr	r2, [pc, #72]	; (25ac <__sinit+0x5c>)
    2564:	2104      	movs	r1, #4
    2566:	63e2      	str	r2, [r4, #60]	; 0x3c
    2568:	22b8      	movs	r2, #184	; 0xb8
    256a:	0092      	lsls	r2, r2, #2
    256c:	50a3      	str	r3, [r4, r2]
    256e:	23b9      	movs	r3, #185	; 0xb9
    2570:	2203      	movs	r2, #3
    2572:	009b      	lsls	r3, r3, #2
    2574:	50e2      	str	r2, [r4, r3]
    2576:	3308      	adds	r3, #8
    2578:	18e2      	adds	r2, r4, r3
    257a:	3b04      	subs	r3, #4
    257c:	50e2      	str	r2, [r4, r3]
    257e:	6860      	ldr	r0, [r4, #4]
    2580:	2200      	movs	r2, #0
    2582:	f7ff ffbd 	bl	2500 <std.isra.0>
    2586:	2201      	movs	r2, #1
    2588:	2109      	movs	r1, #9
    258a:	68a0      	ldr	r0, [r4, #8]
    258c:	f7ff ffb8 	bl	2500 <std.isra.0>
    2590:	2202      	movs	r2, #2
    2592:	2112      	movs	r1, #18
    2594:	68e0      	ldr	r0, [r4, #12]
    2596:	f7ff ffb3 	bl	2500 <std.isra.0>
    259a:	2301      	movs	r3, #1
    259c:	63a3      	str	r3, [r4, #56]	; 0x38
    259e:	0028      	movs	r0, r5
    25a0:	f000 f98a 	bl	28b8 <__retarget_lock_release_recursive>
    25a4:	bd70      	pop	{r4, r5, r6, pc}
    25a6:	46c0      	nop			; (mov r8, r8)
    25a8:	20000d30 	.word	0x20000d30
    25ac:	000024f1 	.word	0x000024f1

000025b0 <__sfp_lock_acquire>:
    25b0:	b510      	push	{r4, lr}
    25b2:	4802      	ldr	r0, [pc, #8]	; (25bc <__sfp_lock_acquire+0xc>)
    25b4:	f000 f97e 	bl	28b4 <__retarget_lock_acquire_recursive>
    25b8:	bd10      	pop	{r4, pc}
    25ba:	46c0      	nop			; (mov r8, r8)
    25bc:	20000d44 	.word	0x20000d44

000025c0 <__sfp_lock_release>:
    25c0:	b510      	push	{r4, lr}
    25c2:	4802      	ldr	r0, [pc, #8]	; (25cc <__sfp_lock_release+0xc>)
    25c4:	f000 f978 	bl	28b8 <__retarget_lock_release_recursive>
    25c8:	bd10      	pop	{r4, pc}
    25ca:	46c0      	nop			; (mov r8, r8)
    25cc:	20000d44 	.word	0x20000d44

000025d0 <__libc_fini_array>:
    25d0:	b570      	push	{r4, r5, r6, lr}
    25d2:	4b09      	ldr	r3, [pc, #36]	; (25f8 <__libc_fini_array+0x28>)
    25d4:	4c09      	ldr	r4, [pc, #36]	; (25fc <__libc_fini_array+0x2c>)
    25d6:	1ae4      	subs	r4, r4, r3
    25d8:	10a4      	asrs	r4, r4, #2
    25da:	d009      	beq.n	25f0 <__libc_fini_array+0x20>
    25dc:	4a08      	ldr	r2, [pc, #32]	; (2600 <__libc_fini_array+0x30>)
    25de:	18a5      	adds	r5, r4, r2
    25e0:	00ad      	lsls	r5, r5, #2
    25e2:	18ed      	adds	r5, r5, r3
    25e4:	682b      	ldr	r3, [r5, #0]
    25e6:	3c01      	subs	r4, #1
    25e8:	4798      	blx	r3
    25ea:	3d04      	subs	r5, #4
    25ec:	2c00      	cmp	r4, #0
    25ee:	d1f9      	bne.n	25e4 <__libc_fini_array+0x14>
    25f0:	f007 fae4 	bl	9bbc <_fini>
    25f4:	bd70      	pop	{r4, r5, r6, pc}
    25f6:	46c0      	nop			; (mov r8, r8)
    25f8:	00009bc8 	.word	0x00009bc8
    25fc:	00009bcc 	.word	0x00009bcc
    2600:	3fffffff 	.word	0x3fffffff

00002604 <_malloc_trim_r>:
    2604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2606:	000c      	movs	r4, r1
    2608:	0006      	movs	r6, r0
    260a:	f000 fc45 	bl	2e98 <__malloc_lock>
    260e:	4f20      	ldr	r7, [pc, #128]	; (2690 <_malloc_trim_r+0x8c>)
    2610:	68bb      	ldr	r3, [r7, #8]
    2612:	685d      	ldr	r5, [r3, #4]
    2614:	2303      	movs	r3, #3
    2616:	439d      	bics	r5, r3
    2618:	4b1e      	ldr	r3, [pc, #120]	; (2694 <_malloc_trim_r+0x90>)
    261a:	1b2c      	subs	r4, r5, r4
    261c:	469c      	mov	ip, r3
    261e:	4464      	add	r4, ip
    2620:	0b24      	lsrs	r4, r4, #12
    2622:	4b1d      	ldr	r3, [pc, #116]	; (2698 <_malloc_trim_r+0x94>)
    2624:	3c01      	subs	r4, #1
    2626:	0324      	lsls	r4, r4, #12
    2628:	429c      	cmp	r4, r3
    262a:	dd07      	ble.n	263c <_malloc_trim_r+0x38>
    262c:	2100      	movs	r1, #0
    262e:	0030      	movs	r0, r6
    2630:	f000 fc42 	bl	2eb8 <_sbrk_r>
    2634:	68bb      	ldr	r3, [r7, #8]
    2636:	195b      	adds	r3, r3, r5
    2638:	4298      	cmp	r0, r3
    263a:	d004      	beq.n	2646 <_malloc_trim_r+0x42>
    263c:	0030      	movs	r0, r6
    263e:	f000 fc33 	bl	2ea8 <__malloc_unlock>
    2642:	2000      	movs	r0, #0
    2644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2646:	4261      	negs	r1, r4
    2648:	0030      	movs	r0, r6
    264a:	f000 fc35 	bl	2eb8 <_sbrk_r>
    264e:	1c43      	adds	r3, r0, #1
    2650:	d00d      	beq.n	266e <_malloc_trim_r+0x6a>
    2652:	2201      	movs	r2, #1
    2654:	68bb      	ldr	r3, [r7, #8]
    2656:	1b2d      	subs	r5, r5, r4
    2658:	4315      	orrs	r5, r2
    265a:	605d      	str	r5, [r3, #4]
    265c:	4b0f      	ldr	r3, [pc, #60]	; (269c <_malloc_trim_r+0x98>)
    265e:	0030      	movs	r0, r6
    2660:	681a      	ldr	r2, [r3, #0]
    2662:	1b14      	subs	r4, r2, r4
    2664:	601c      	str	r4, [r3, #0]
    2666:	f000 fc1f 	bl	2ea8 <__malloc_unlock>
    266a:	2001      	movs	r0, #1
    266c:	e7ea      	b.n	2644 <_malloc_trim_r+0x40>
    266e:	2100      	movs	r1, #0
    2670:	0030      	movs	r0, r6
    2672:	f000 fc21 	bl	2eb8 <_sbrk_r>
    2676:	68ba      	ldr	r2, [r7, #8]
    2678:	1a83      	subs	r3, r0, r2
    267a:	2b0f      	cmp	r3, #15
    267c:	ddde      	ble.n	263c <_malloc_trim_r+0x38>
    267e:	4908      	ldr	r1, [pc, #32]	; (26a0 <_malloc_trim_r+0x9c>)
    2680:	6809      	ldr	r1, [r1, #0]
    2682:	1a40      	subs	r0, r0, r1
    2684:	4905      	ldr	r1, [pc, #20]	; (269c <_malloc_trim_r+0x98>)
    2686:	6008      	str	r0, [r1, #0]
    2688:	2101      	movs	r1, #1
    268a:	430b      	orrs	r3, r1
    268c:	6053      	str	r3, [r2, #4]
    268e:	e7d5      	b.n	263c <_malloc_trim_r+0x38>
    2690:	2000045c 	.word	0x2000045c
    2694:	00000fef 	.word	0x00000fef
    2698:	00000fff 	.word	0x00000fff
    269c:	20000894 	.word	0x20000894
    26a0:	20000864 	.word	0x20000864

000026a4 <_free_r>:
    26a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26a6:	0004      	movs	r4, r0
    26a8:	1e0d      	subs	r5, r1, #0
    26aa:	d03c      	beq.n	2726 <_free_r+0x82>
    26ac:	f000 fbf4 	bl	2e98 <__malloc_lock>
    26b0:	0029      	movs	r1, r5
    26b2:	3908      	subs	r1, #8
    26b4:	6848      	ldr	r0, [r1, #4]
    26b6:	2301      	movs	r3, #1
    26b8:	0005      	movs	r5, r0
    26ba:	2603      	movs	r6, #3
    26bc:	439d      	bics	r5, r3
    26be:	194a      	adds	r2, r1, r5
    26c0:	469c      	mov	ip, r3
    26c2:	4f61      	ldr	r7, [pc, #388]	; (2848 <_free_r+0x1a4>)
    26c4:	6853      	ldr	r3, [r2, #4]
    26c6:	43b3      	bics	r3, r6
    26c8:	68be      	ldr	r6, [r7, #8]
    26ca:	42b2      	cmp	r2, r6
    26cc:	d056      	beq.n	277c <_free_r+0xd8>
    26ce:	4666      	mov	r6, ip
    26d0:	6053      	str	r3, [r2, #4]
    26d2:	4206      	tst	r6, r0
    26d4:	d10a      	bne.n	26ec <_free_r+0x48>
    26d6:	003e      	movs	r6, r7
    26d8:	6808      	ldr	r0, [r1, #0]
    26da:	3608      	adds	r6, #8
    26dc:	1a09      	subs	r1, r1, r0
    26de:	182d      	adds	r5, r5, r0
    26e0:	6888      	ldr	r0, [r1, #8]
    26e2:	42b0      	cmp	r0, r6
    26e4:	d065      	beq.n	27b2 <_free_r+0x10e>
    26e6:	68ce      	ldr	r6, [r1, #12]
    26e8:	60c6      	str	r6, [r0, #12]
    26ea:	60b0      	str	r0, [r6, #8]
    26ec:	2001      	movs	r0, #1
    26ee:	18d6      	adds	r6, r2, r3
    26f0:	6876      	ldr	r6, [r6, #4]
    26f2:	4206      	tst	r6, r0
    26f4:	d033      	beq.n	275e <_free_r+0xba>
    26f6:	4b55      	ldr	r3, [pc, #340]	; (284c <_free_r+0x1a8>)
    26f8:	4328      	orrs	r0, r5
    26fa:	6048      	str	r0, [r1, #4]
    26fc:	514d      	str	r5, [r1, r5]
    26fe:	429d      	cmp	r5, r3
    2700:	d812      	bhi.n	2728 <_free_r+0x84>
    2702:	08ed      	lsrs	r5, r5, #3
    2704:	3bff      	subs	r3, #255	; 0xff
    2706:	10aa      	asrs	r2, r5, #2
    2708:	3bff      	subs	r3, #255	; 0xff
    270a:	4093      	lsls	r3, r2
    270c:	687a      	ldr	r2, [r7, #4]
    270e:	00ed      	lsls	r5, r5, #3
    2710:	4313      	orrs	r3, r2
    2712:	607b      	str	r3, [r7, #4]
    2714:	19ef      	adds	r7, r5, r7
    2716:	68bb      	ldr	r3, [r7, #8]
    2718:	60cf      	str	r7, [r1, #12]
    271a:	608b      	str	r3, [r1, #8]
    271c:	60b9      	str	r1, [r7, #8]
    271e:	60d9      	str	r1, [r3, #12]
    2720:	0020      	movs	r0, r4
    2722:	f000 fbc1 	bl	2ea8 <__malloc_unlock>
    2726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2728:	0a68      	lsrs	r0, r5, #9
    272a:	2804      	cmp	r0, #4
    272c:	d850      	bhi.n	27d0 <_free_r+0x12c>
    272e:	09a8      	lsrs	r0, r5, #6
    2730:	0002      	movs	r2, r0
    2732:	3039      	adds	r0, #57	; 0x39
    2734:	3238      	adds	r2, #56	; 0x38
    2736:	00c0      	lsls	r0, r0, #3
    2738:	1838      	adds	r0, r7, r0
    273a:	3808      	subs	r0, #8
    273c:	6883      	ldr	r3, [r0, #8]
    273e:	2603      	movs	r6, #3
    2740:	4298      	cmp	r0, r3
    2742:	d04c      	beq.n	27de <_free_r+0x13a>
    2744:	685a      	ldr	r2, [r3, #4]
    2746:	43b2      	bics	r2, r6
    2748:	4295      	cmp	r5, r2
    274a:	d230      	bcs.n	27ae <_free_r+0x10a>
    274c:	689b      	ldr	r3, [r3, #8]
    274e:	4298      	cmp	r0, r3
    2750:	d1f8      	bne.n	2744 <_free_r+0xa0>
    2752:	68c3      	ldr	r3, [r0, #12]
    2754:	60cb      	str	r3, [r1, #12]
    2756:	6088      	str	r0, [r1, #8]
    2758:	6099      	str	r1, [r3, #8]
    275a:	60c1      	str	r1, [r0, #12]
    275c:	e7e0      	b.n	2720 <_free_r+0x7c>
    275e:	18ed      	adds	r5, r5, r3
    2760:	4e3b      	ldr	r6, [pc, #236]	; (2850 <_free_r+0x1ac>)
    2762:	6893      	ldr	r3, [r2, #8]
    2764:	42b3      	cmp	r3, r6
    2766:	d042      	beq.n	27ee <_free_r+0x14a>
    2768:	68d2      	ldr	r2, [r2, #12]
    276a:	4328      	orrs	r0, r5
    276c:	60da      	str	r2, [r3, #12]
    276e:	6093      	str	r3, [r2, #8]
    2770:	4b36      	ldr	r3, [pc, #216]	; (284c <_free_r+0x1a8>)
    2772:	6048      	str	r0, [r1, #4]
    2774:	514d      	str	r5, [r1, r5]
    2776:	429d      	cmp	r5, r3
    2778:	d8d6      	bhi.n	2728 <_free_r+0x84>
    277a:	e7c2      	b.n	2702 <_free_r+0x5e>
    277c:	4662      	mov	r2, ip
    277e:	18eb      	adds	r3, r5, r3
    2780:	4202      	tst	r2, r0
    2782:	d106      	bne.n	2792 <_free_r+0xee>
    2784:	680a      	ldr	r2, [r1, #0]
    2786:	1a89      	subs	r1, r1, r2
    2788:	6888      	ldr	r0, [r1, #8]
    278a:	189b      	adds	r3, r3, r2
    278c:	68ca      	ldr	r2, [r1, #12]
    278e:	60c2      	str	r2, [r0, #12]
    2790:	6090      	str	r0, [r2, #8]
    2792:	2201      	movs	r2, #1
    2794:	431a      	orrs	r2, r3
    2796:	604a      	str	r2, [r1, #4]
    2798:	4a2e      	ldr	r2, [pc, #184]	; (2854 <_free_r+0x1b0>)
    279a:	60b9      	str	r1, [r7, #8]
    279c:	6812      	ldr	r2, [r2, #0]
    279e:	4293      	cmp	r3, r2
    27a0:	d3be      	bcc.n	2720 <_free_r+0x7c>
    27a2:	4b2d      	ldr	r3, [pc, #180]	; (2858 <_free_r+0x1b4>)
    27a4:	0020      	movs	r0, r4
    27a6:	6819      	ldr	r1, [r3, #0]
    27a8:	f7ff ff2c 	bl	2604 <_malloc_trim_r>
    27ac:	e7b8      	b.n	2720 <_free_r+0x7c>
    27ae:	0018      	movs	r0, r3
    27b0:	e7cf      	b.n	2752 <_free_r+0xae>
    27b2:	4666      	mov	r6, ip
    27b4:	18d0      	adds	r0, r2, r3
    27b6:	6840      	ldr	r0, [r0, #4]
    27b8:	4230      	tst	r0, r6
    27ba:	d13f      	bne.n	283c <_free_r+0x198>
    27bc:	6890      	ldr	r0, [r2, #8]
    27be:	195d      	adds	r5, r3, r5
    27c0:	68d3      	ldr	r3, [r2, #12]
    27c2:	60c3      	str	r3, [r0, #12]
    27c4:	6098      	str	r0, [r3, #8]
    27c6:	4663      	mov	r3, ip
    27c8:	432b      	orrs	r3, r5
    27ca:	604b      	str	r3, [r1, #4]
    27cc:	514d      	str	r5, [r1, r5]
    27ce:	e7a7      	b.n	2720 <_free_r+0x7c>
    27d0:	2814      	cmp	r0, #20
    27d2:	d814      	bhi.n	27fe <_free_r+0x15a>
    27d4:	0002      	movs	r2, r0
    27d6:	305c      	adds	r0, #92	; 0x5c
    27d8:	325b      	adds	r2, #91	; 0x5b
    27da:	00c0      	lsls	r0, r0, #3
    27dc:	e7ac      	b.n	2738 <_free_r+0x94>
    27de:	2301      	movs	r3, #1
    27e0:	1092      	asrs	r2, r2, #2
    27e2:	4093      	lsls	r3, r2
    27e4:	687a      	ldr	r2, [r7, #4]
    27e6:	4313      	orrs	r3, r2
    27e8:	607b      	str	r3, [r7, #4]
    27ea:	0003      	movs	r3, r0
    27ec:	e7b2      	b.n	2754 <_free_r+0xb0>
    27ee:	4328      	orrs	r0, r5
    27f0:	60d9      	str	r1, [r3, #12]
    27f2:	6099      	str	r1, [r3, #8]
    27f4:	60cb      	str	r3, [r1, #12]
    27f6:	608b      	str	r3, [r1, #8]
    27f8:	6048      	str	r0, [r1, #4]
    27fa:	514d      	str	r5, [r1, r5]
    27fc:	e790      	b.n	2720 <_free_r+0x7c>
    27fe:	2854      	cmp	r0, #84	; 0x54
    2800:	d805      	bhi.n	280e <_free_r+0x16a>
    2802:	0b28      	lsrs	r0, r5, #12
    2804:	0002      	movs	r2, r0
    2806:	306f      	adds	r0, #111	; 0x6f
    2808:	326e      	adds	r2, #110	; 0x6e
    280a:	00c0      	lsls	r0, r0, #3
    280c:	e794      	b.n	2738 <_free_r+0x94>
    280e:	22aa      	movs	r2, #170	; 0xaa
    2810:	0052      	lsls	r2, r2, #1
    2812:	4290      	cmp	r0, r2
    2814:	d805      	bhi.n	2822 <_free_r+0x17e>
    2816:	0be8      	lsrs	r0, r5, #15
    2818:	0002      	movs	r2, r0
    281a:	3078      	adds	r0, #120	; 0x78
    281c:	3277      	adds	r2, #119	; 0x77
    281e:	00c0      	lsls	r0, r0, #3
    2820:	e78a      	b.n	2738 <_free_r+0x94>
    2822:	4a0e      	ldr	r2, [pc, #56]	; (285c <_free_r+0x1b8>)
    2824:	4290      	cmp	r0, r2
    2826:	d805      	bhi.n	2834 <_free_r+0x190>
    2828:	0ca8      	lsrs	r0, r5, #18
    282a:	0002      	movs	r2, r0
    282c:	307d      	adds	r0, #125	; 0x7d
    282e:	327c      	adds	r2, #124	; 0x7c
    2830:	00c0      	lsls	r0, r0, #3
    2832:	e781      	b.n	2738 <_free_r+0x94>
    2834:	20fe      	movs	r0, #254	; 0xfe
    2836:	227e      	movs	r2, #126	; 0x7e
    2838:	0080      	lsls	r0, r0, #2
    283a:	e77d      	b.n	2738 <_free_r+0x94>
    283c:	4663      	mov	r3, ip
    283e:	432b      	orrs	r3, r5
    2840:	604b      	str	r3, [r1, #4]
    2842:	6015      	str	r5, [r2, #0]
    2844:	e76c      	b.n	2720 <_free_r+0x7c>
    2846:	46c0      	nop			; (mov r8, r8)
    2848:	2000045c 	.word	0x2000045c
    284c:	000001ff 	.word	0x000001ff
    2850:	20000464 	.word	0x20000464
    2854:	20000868 	.word	0x20000868
    2858:	200008c4 	.word	0x200008c4
    285c:	00000554 	.word	0x00000554

00002860 <_fwalk_reent>:
    2860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2862:	4647      	mov	r7, r8
    2864:	46ce      	mov	lr, r9
    2866:	b580      	push	{r7, lr}
    2868:	27b8      	movs	r7, #184	; 0xb8
    286a:	4680      	mov	r8, r0
    286c:	00bf      	lsls	r7, r7, #2
    286e:	4447      	add	r7, r8
    2870:	4689      	mov	r9, r1
    2872:	2600      	movs	r6, #0
    2874:	2f00      	cmp	r7, #0
    2876:	d014      	beq.n	28a2 <_fwalk_reent+0x42>
    2878:	687b      	ldr	r3, [r7, #4]
    287a:	68bc      	ldr	r4, [r7, #8]
    287c:	1e5d      	subs	r5, r3, #1
    287e:	d40d      	bmi.n	289c <_fwalk_reent+0x3c>
    2880:	89a3      	ldrh	r3, [r4, #12]
    2882:	2b01      	cmp	r3, #1
    2884:	d907      	bls.n	2896 <_fwalk_reent+0x36>
    2886:	220e      	movs	r2, #14
    2888:	5ea3      	ldrsh	r3, [r4, r2]
    288a:	3301      	adds	r3, #1
    288c:	d003      	beq.n	2896 <_fwalk_reent+0x36>
    288e:	0021      	movs	r1, r4
    2890:	4640      	mov	r0, r8
    2892:	47c8      	blx	r9
    2894:	4306      	orrs	r6, r0
    2896:	3468      	adds	r4, #104	; 0x68
    2898:	3d01      	subs	r5, #1
    289a:	d2f1      	bcs.n	2880 <_fwalk_reent+0x20>
    289c:	683f      	ldr	r7, [r7, #0]
    289e:	2f00      	cmp	r7, #0
    28a0:	d1ea      	bne.n	2878 <_fwalk_reent+0x18>
    28a2:	0030      	movs	r0, r6
    28a4:	bc0c      	pop	{r2, r3}
    28a6:	4690      	mov	r8, r2
    28a8:	4699      	mov	r9, r3
    28aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000028ac <__retarget_lock_init_recursive>:
    28ac:	4770      	bx	lr
    28ae:	46c0      	nop			; (mov r8, r8)

000028b0 <__retarget_lock_close_recursive>:
    28b0:	4770      	bx	lr
    28b2:	46c0      	nop			; (mov r8, r8)

000028b4 <__retarget_lock_acquire_recursive>:
    28b4:	4770      	bx	lr
    28b6:	46c0      	nop			; (mov r8, r8)

000028b8 <__retarget_lock_release_recursive>:
    28b8:	4770      	bx	lr
    28ba:	46c0      	nop			; (mov r8, r8)

000028bc <__swhatbuf_r>:
    28bc:	b570      	push	{r4, r5, r6, lr}
    28be:	000c      	movs	r4, r1
    28c0:	001e      	movs	r6, r3
    28c2:	230e      	movs	r3, #14
    28c4:	5ec9      	ldrsh	r1, [r1, r3]
    28c6:	b090      	sub	sp, #64	; 0x40
    28c8:	0015      	movs	r5, r2
    28ca:	2900      	cmp	r1, #0
    28cc:	db15      	blt.n	28fa <__swhatbuf_r+0x3e>
    28ce:	aa01      	add	r2, sp, #4
    28d0:	f000 fc58 	bl	3184 <_fstat_r>
    28d4:	2800      	cmp	r0, #0
    28d6:	db10      	blt.n	28fa <__swhatbuf_r+0x3e>
    28d8:	22f0      	movs	r2, #240	; 0xf0
    28da:	9b02      	ldr	r3, [sp, #8]
    28dc:	0212      	lsls	r2, r2, #8
    28de:	4013      	ands	r3, r2
    28e0:	4a0d      	ldr	r2, [pc, #52]	; (2918 <__swhatbuf_r+0x5c>)
    28e2:	2080      	movs	r0, #128	; 0x80
    28e4:	4694      	mov	ip, r2
    28e6:	4463      	add	r3, ip
    28e8:	425a      	negs	r2, r3
    28ea:	4153      	adcs	r3, r2
    28ec:	6033      	str	r3, [r6, #0]
    28ee:	2380      	movs	r3, #128	; 0x80
    28f0:	00db      	lsls	r3, r3, #3
    28f2:	602b      	str	r3, [r5, #0]
    28f4:	0100      	lsls	r0, r0, #4
    28f6:	b010      	add	sp, #64	; 0x40
    28f8:	bd70      	pop	{r4, r5, r6, pc}
    28fa:	2300      	movs	r3, #0
    28fc:	6033      	str	r3, [r6, #0]
    28fe:	89a3      	ldrh	r3, [r4, #12]
    2900:	061b      	lsls	r3, r3, #24
    2902:	d503      	bpl.n	290c <__swhatbuf_r+0x50>
    2904:	2340      	movs	r3, #64	; 0x40
    2906:	2000      	movs	r0, #0
    2908:	602b      	str	r3, [r5, #0]
    290a:	e7f4      	b.n	28f6 <__swhatbuf_r+0x3a>
    290c:	2380      	movs	r3, #128	; 0x80
    290e:	00db      	lsls	r3, r3, #3
    2910:	602b      	str	r3, [r5, #0]
    2912:	2000      	movs	r0, #0
    2914:	e7ef      	b.n	28f6 <__swhatbuf_r+0x3a>
    2916:	46c0      	nop			; (mov r8, r8)
    2918:	ffffe000 	.word	0xffffe000

0000291c <malloc>:
    291c:	b510      	push	{r4, lr}
    291e:	4b03      	ldr	r3, [pc, #12]	; (292c <malloc+0x10>)
    2920:	0001      	movs	r1, r0
    2922:	6818      	ldr	r0, [r3, #0]
    2924:	f000 f804 	bl	2930 <_malloc_r>
    2928:	bd10      	pop	{r4, pc}
    292a:	46c0      	nop			; (mov r8, r8)
    292c:	20000028 	.word	0x20000028

00002930 <_malloc_r>:
    2930:	b5f0      	push	{r4, r5, r6, r7, lr}
    2932:	4657      	mov	r7, sl
    2934:	4645      	mov	r5, r8
    2936:	46de      	mov	lr, fp
    2938:	464e      	mov	r6, r9
    293a:	b5e0      	push	{r5, r6, r7, lr}
    293c:	000d      	movs	r5, r1
    293e:	350b      	adds	r5, #11
    2940:	b083      	sub	sp, #12
    2942:	0007      	movs	r7, r0
    2944:	2d16      	cmp	r5, #22
    2946:	d800      	bhi.n	294a <_malloc_r+0x1a>
    2948:	e09f      	b.n	2a8a <_malloc_r+0x15a>
    294a:	2307      	movs	r3, #7
    294c:	439d      	bics	r5, r3
    294e:	d500      	bpl.n	2952 <_malloc_r+0x22>
    2950:	e0c4      	b.n	2adc <_malloc_r+0x1ac>
    2952:	42a9      	cmp	r1, r5
    2954:	d900      	bls.n	2958 <_malloc_r+0x28>
    2956:	e0c1      	b.n	2adc <_malloc_r+0x1ac>
    2958:	f000 fa9e 	bl	2e98 <__malloc_lock>
    295c:	23f8      	movs	r3, #248	; 0xf8
    295e:	33ff      	adds	r3, #255	; 0xff
    2960:	429d      	cmp	r5, r3
    2962:	d800      	bhi.n	2966 <_malloc_r+0x36>
    2964:	e28f      	b.n	2e86 <_malloc_r+0x556>
    2966:	0a68      	lsrs	r0, r5, #9
    2968:	d100      	bne.n	296c <_malloc_r+0x3c>
    296a:	e0bb      	b.n	2ae4 <_malloc_r+0x1b4>
    296c:	2804      	cmp	r0, #4
    296e:	d900      	bls.n	2972 <_malloc_r+0x42>
    2970:	e162      	b.n	2c38 <_malloc_r+0x308>
    2972:	2338      	movs	r3, #56	; 0x38
    2974:	4698      	mov	r8, r3
    2976:	09a8      	lsrs	r0, r5, #6
    2978:	4480      	add	r8, r0
    297a:	3039      	adds	r0, #57	; 0x39
    297c:	00c1      	lsls	r1, r0, #3
    297e:	4ed2      	ldr	r6, [pc, #840]	; (2cc8 <_malloc_r+0x398>)
    2980:	1871      	adds	r1, r6, r1
    2982:	3908      	subs	r1, #8
    2984:	68cc      	ldr	r4, [r1, #12]
    2986:	42a1      	cmp	r1, r4
    2988:	d019      	beq.n	29be <_malloc_r+0x8e>
    298a:	2303      	movs	r3, #3
    298c:	6862      	ldr	r2, [r4, #4]
    298e:	439a      	bics	r2, r3
    2990:	0013      	movs	r3, r2
    2992:	1b52      	subs	r2, r2, r5
    2994:	2a0f      	cmp	r2, #15
    2996:	dd00      	ble.n	299a <_malloc_r+0x6a>
    2998:	e0aa      	b.n	2af0 <_malloc_r+0x1c0>
    299a:	2a00      	cmp	r2, #0
    299c:	db00      	blt.n	29a0 <_malloc_r+0x70>
    299e:	e088      	b.n	2ab2 <_malloc_r+0x182>
    29a0:	2303      	movs	r3, #3
    29a2:	469c      	mov	ip, r3
    29a4:	e008      	b.n	29b8 <_malloc_r+0x88>
    29a6:	4662      	mov	r2, ip
    29a8:	6863      	ldr	r3, [r4, #4]
    29aa:	4393      	bics	r3, r2
    29ac:	1b5a      	subs	r2, r3, r5
    29ae:	2a0f      	cmp	r2, #15
    29b0:	dd00      	ble.n	29b4 <_malloc_r+0x84>
    29b2:	e09d      	b.n	2af0 <_malloc_r+0x1c0>
    29b4:	2a00      	cmp	r2, #0
    29b6:	da7c      	bge.n	2ab2 <_malloc_r+0x182>
    29b8:	68e4      	ldr	r4, [r4, #12]
    29ba:	42a1      	cmp	r1, r4
    29bc:	d1f3      	bne.n	29a6 <_malloc_r+0x76>
    29be:	0032      	movs	r2, r6
    29c0:	6934      	ldr	r4, [r6, #16]
    29c2:	3208      	adds	r2, #8
    29c4:	4294      	cmp	r4, r2
    29c6:	d100      	bne.n	29ca <_malloc_r+0x9a>
    29c8:	e190      	b.n	2cec <_malloc_r+0x3bc>
    29ca:	2303      	movs	r3, #3
    29cc:	6861      	ldr	r1, [r4, #4]
    29ce:	4399      	bics	r1, r3
    29d0:	4689      	mov	r9, r1
    29d2:	1b49      	subs	r1, r1, r5
    29d4:	290f      	cmp	r1, #15
    29d6:	dd00      	ble.n	29da <_malloc_r+0xaa>
    29d8:	e162      	b.n	2ca0 <_malloc_r+0x370>
    29da:	6172      	str	r2, [r6, #20]
    29dc:	6132      	str	r2, [r6, #16]
    29de:	2900      	cmp	r1, #0
    29e0:	db00      	blt.n	29e4 <_malloc_r+0xb4>
    29e2:	e087      	b.n	2af4 <_malloc_r+0x1c4>
    29e4:	4ab9      	ldr	r2, [pc, #740]	; (2ccc <_malloc_r+0x39c>)
    29e6:	464b      	mov	r3, r9
    29e8:	4591      	cmp	r9, r2
    29ea:	d900      	bls.n	29ee <_malloc_r+0xbe>
    29ec:	e130      	b.n	2c50 <_malloc_r+0x320>
    29ee:	08db      	lsrs	r3, r3, #3
    29f0:	3aff      	subs	r2, #255	; 0xff
    29f2:	1099      	asrs	r1, r3, #2
    29f4:	3aff      	subs	r2, #255	; 0xff
    29f6:	408a      	lsls	r2, r1
    29f8:	00db      	lsls	r3, r3, #3
    29fa:	6871      	ldr	r1, [r6, #4]
    29fc:	199b      	adds	r3, r3, r6
    29fe:	430a      	orrs	r2, r1
    2a00:	6899      	ldr	r1, [r3, #8]
    2a02:	6072      	str	r2, [r6, #4]
    2a04:	60e3      	str	r3, [r4, #12]
    2a06:	60a1      	str	r1, [r4, #8]
    2a08:	609c      	str	r4, [r3, #8]
    2a0a:	0013      	movs	r3, r2
    2a0c:	60cc      	str	r4, [r1, #12]
    2a0e:	2101      	movs	r1, #1
    2a10:	1082      	asrs	r2, r0, #2
    2a12:	4091      	lsls	r1, r2
    2a14:	4299      	cmp	r1, r3
    2a16:	d86f      	bhi.n	2af8 <_malloc_r+0x1c8>
    2a18:	420b      	tst	r3, r1
    2a1a:	d105      	bne.n	2a28 <_malloc_r+0xf8>
    2a1c:	2203      	movs	r2, #3
    2a1e:	4390      	bics	r0, r2
    2a20:	0049      	lsls	r1, r1, #1
    2a22:	3004      	adds	r0, #4
    2a24:	420b      	tst	r3, r1
    2a26:	d0fb      	beq.n	2a20 <_malloc_r+0xf0>
    2a28:	2303      	movs	r3, #3
    2a2a:	4698      	mov	r8, r3
    2a2c:	00c3      	lsls	r3, r0, #3
    2a2e:	4699      	mov	r9, r3
    2a30:	44b1      	add	r9, r6
    2a32:	46cc      	mov	ip, r9
    2a34:	4682      	mov	sl, r0
    2a36:	4663      	mov	r3, ip
    2a38:	68dc      	ldr	r4, [r3, #12]
    2a3a:	45a4      	cmp	ip, r4
    2a3c:	d107      	bne.n	2a4e <_malloc_r+0x11e>
    2a3e:	e157      	b.n	2cf0 <_malloc_r+0x3c0>
    2a40:	2a00      	cmp	r2, #0
    2a42:	db00      	blt.n	2a46 <_malloc_r+0x116>
    2a44:	e166      	b.n	2d14 <_malloc_r+0x3e4>
    2a46:	68e4      	ldr	r4, [r4, #12]
    2a48:	45a4      	cmp	ip, r4
    2a4a:	d100      	bne.n	2a4e <_malloc_r+0x11e>
    2a4c:	e150      	b.n	2cf0 <_malloc_r+0x3c0>
    2a4e:	4642      	mov	r2, r8
    2a50:	6863      	ldr	r3, [r4, #4]
    2a52:	4393      	bics	r3, r2
    2a54:	1b5a      	subs	r2, r3, r5
    2a56:	2a0f      	cmp	r2, #15
    2a58:	ddf2      	ble.n	2a40 <_malloc_r+0x110>
    2a5a:	2001      	movs	r0, #1
    2a5c:	4680      	mov	r8, r0
    2a5e:	1961      	adds	r1, r4, r5
    2a60:	4305      	orrs	r5, r0
    2a62:	6065      	str	r5, [r4, #4]
    2a64:	68a0      	ldr	r0, [r4, #8]
    2a66:	68e5      	ldr	r5, [r4, #12]
    2a68:	3608      	adds	r6, #8
    2a6a:	60c5      	str	r5, [r0, #12]
    2a6c:	60a8      	str	r0, [r5, #8]
    2a6e:	4640      	mov	r0, r8
    2a70:	60f1      	str	r1, [r6, #12]
    2a72:	60b1      	str	r1, [r6, #8]
    2a74:	4310      	orrs	r0, r2
    2a76:	6048      	str	r0, [r1, #4]
    2a78:	60ce      	str	r6, [r1, #12]
    2a7a:	608e      	str	r6, [r1, #8]
    2a7c:	0038      	movs	r0, r7
    2a7e:	50e2      	str	r2, [r4, r3]
    2a80:	f000 fa12 	bl	2ea8 <__malloc_unlock>
    2a84:	0020      	movs	r0, r4
    2a86:	3008      	adds	r0, #8
    2a88:	e021      	b.n	2ace <_malloc_r+0x19e>
    2a8a:	2910      	cmp	r1, #16
    2a8c:	d826      	bhi.n	2adc <_malloc_r+0x1ac>
    2a8e:	0038      	movs	r0, r7
    2a90:	f000 fa02 	bl	2e98 <__malloc_lock>
    2a94:	2510      	movs	r5, #16
    2a96:	2318      	movs	r3, #24
    2a98:	2002      	movs	r0, #2
    2a9a:	4e8b      	ldr	r6, [pc, #556]	; (2cc8 <_malloc_r+0x398>)
    2a9c:	18f3      	adds	r3, r6, r3
    2a9e:	001a      	movs	r2, r3
    2aa0:	685c      	ldr	r4, [r3, #4]
    2aa2:	3a08      	subs	r2, #8
    2aa4:	4294      	cmp	r4, r2
    2aa6:	d100      	bne.n	2aaa <_malloc_r+0x17a>
    2aa8:	e12e      	b.n	2d08 <_malloc_r+0x3d8>
    2aaa:	2303      	movs	r3, #3
    2aac:	6862      	ldr	r2, [r4, #4]
    2aae:	439a      	bics	r2, r3
    2ab0:	0013      	movs	r3, r2
    2ab2:	68e2      	ldr	r2, [r4, #12]
    2ab4:	68a1      	ldr	r1, [r4, #8]
    2ab6:	60ca      	str	r2, [r1, #12]
    2ab8:	6091      	str	r1, [r2, #8]
    2aba:	2201      	movs	r2, #1
    2abc:	18e3      	adds	r3, r4, r3
    2abe:	6859      	ldr	r1, [r3, #4]
    2ac0:	0038      	movs	r0, r7
    2ac2:	430a      	orrs	r2, r1
    2ac4:	605a      	str	r2, [r3, #4]
    2ac6:	f000 f9ef 	bl	2ea8 <__malloc_unlock>
    2aca:	0020      	movs	r0, r4
    2acc:	3008      	adds	r0, #8
    2ace:	b003      	add	sp, #12
    2ad0:	bc3c      	pop	{r2, r3, r4, r5}
    2ad2:	4690      	mov	r8, r2
    2ad4:	4699      	mov	r9, r3
    2ad6:	46a2      	mov	sl, r4
    2ad8:	46ab      	mov	fp, r5
    2ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2adc:	230c      	movs	r3, #12
    2ade:	2000      	movs	r0, #0
    2ae0:	603b      	str	r3, [r7, #0]
    2ae2:	e7f4      	b.n	2ace <_malloc_r+0x19e>
    2ae4:	2180      	movs	r1, #128	; 0x80
    2ae6:	233f      	movs	r3, #63	; 0x3f
    2ae8:	2040      	movs	r0, #64	; 0x40
    2aea:	0089      	lsls	r1, r1, #2
    2aec:	4698      	mov	r8, r3
    2aee:	e746      	b.n	297e <_malloc_r+0x4e>
    2af0:	4640      	mov	r0, r8
    2af2:	e764      	b.n	29be <_malloc_r+0x8e>
    2af4:	464b      	mov	r3, r9
    2af6:	e7e0      	b.n	2aba <_malloc_r+0x18a>
    2af8:	2303      	movs	r3, #3
    2afa:	68b4      	ldr	r4, [r6, #8]
    2afc:	6862      	ldr	r2, [r4, #4]
    2afe:	439a      	bics	r2, r3
    2b00:	4690      	mov	r8, r2
    2b02:	42aa      	cmp	r2, r5
    2b04:	d303      	bcc.n	2b0e <_malloc_r+0x1de>
    2b06:	1b53      	subs	r3, r2, r5
    2b08:	2b0f      	cmp	r3, #15
    2b0a:	dd00      	ble.n	2b0e <_malloc_r+0x1de>
    2b0c:	e086      	b.n	2c1c <_malloc_r+0x2ec>
    2b0e:	0023      	movs	r3, r4
    2b10:	4443      	add	r3, r8
    2b12:	4a6f      	ldr	r2, [pc, #444]	; (2cd0 <_malloc_r+0x3a0>)
    2b14:	9301      	str	r3, [sp, #4]
    2b16:	4b6f      	ldr	r3, [pc, #444]	; (2cd4 <_malloc_r+0x3a4>)
    2b18:	4693      	mov	fp, r2
    2b1a:	681b      	ldr	r3, [r3, #0]
    2b1c:	6812      	ldr	r2, [r2, #0]
    2b1e:	18eb      	adds	r3, r5, r3
    2b20:	3201      	adds	r2, #1
    2b22:	d100      	bne.n	2b26 <_malloc_r+0x1f6>
    2b24:	e168      	b.n	2df8 <_malloc_r+0x4c8>
    2b26:	4a6c      	ldr	r2, [pc, #432]	; (2cd8 <_malloc_r+0x3a8>)
    2b28:	4694      	mov	ip, r2
    2b2a:	4463      	add	r3, ip
    2b2c:	0b1b      	lsrs	r3, r3, #12
    2b2e:	031b      	lsls	r3, r3, #12
    2b30:	9300      	str	r3, [sp, #0]
    2b32:	9900      	ldr	r1, [sp, #0]
    2b34:	0038      	movs	r0, r7
    2b36:	f000 f9bf 	bl	2eb8 <_sbrk_r>
    2b3a:	0003      	movs	r3, r0
    2b3c:	4681      	mov	r9, r0
    2b3e:	3301      	adds	r3, #1
    2b40:	d061      	beq.n	2c06 <_malloc_r+0x2d6>
    2b42:	9b01      	ldr	r3, [sp, #4]
    2b44:	4283      	cmp	r3, r0
    2b46:	d900      	bls.n	2b4a <_malloc_r+0x21a>
    2b48:	e0ff      	b.n	2d4a <_malloc_r+0x41a>
    2b4a:	4b64      	ldr	r3, [pc, #400]	; (2cdc <_malloc_r+0x3ac>)
    2b4c:	9a00      	ldr	r2, [sp, #0]
    2b4e:	469a      	mov	sl, r3
    2b50:	681b      	ldr	r3, [r3, #0]
    2b52:	469c      	mov	ip, r3
    2b54:	4653      	mov	r3, sl
    2b56:	4462      	add	r2, ip
    2b58:	601a      	str	r2, [r3, #0]
    2b5a:	9b01      	ldr	r3, [sp, #4]
    2b5c:	0011      	movs	r1, r2
    2b5e:	4283      	cmp	r3, r0
    2b60:	d100      	bne.n	2b64 <_malloc_r+0x234>
    2b62:	e155      	b.n	2e10 <_malloc_r+0x4e0>
    2b64:	465b      	mov	r3, fp
    2b66:	681b      	ldr	r3, [r3, #0]
    2b68:	3301      	adds	r3, #1
    2b6a:	d100      	bne.n	2b6e <_malloc_r+0x23e>
    2b6c:	e16c      	b.n	2e48 <_malloc_r+0x518>
    2b6e:	464b      	mov	r3, r9
    2b70:	9a01      	ldr	r2, [sp, #4]
    2b72:	1a9b      	subs	r3, r3, r2
    2b74:	1859      	adds	r1, r3, r1
    2b76:	4653      	mov	r3, sl
    2b78:	6019      	str	r1, [r3, #0]
    2b7a:	2307      	movs	r3, #7
    2b7c:	464a      	mov	r2, r9
    2b7e:	4013      	ands	r3, r2
    2b80:	d100      	bne.n	2b84 <_malloc_r+0x254>
    2b82:	e124      	b.n	2dce <_malloc_r+0x49e>
    2b84:	2108      	movs	r1, #8
    2b86:	4689      	mov	r9, r1
    2b88:	4955      	ldr	r1, [pc, #340]	; (2ce0 <_malloc_r+0x3b0>)
    2b8a:	1ad2      	subs	r2, r2, r3
    2b8c:	4491      	add	r9, r2
    2b8e:	1acb      	subs	r3, r1, r3
    2b90:	9a00      	ldr	r2, [sp, #0]
    2b92:	0038      	movs	r0, r7
    2b94:	444a      	add	r2, r9
    2b96:	0511      	lsls	r1, r2, #20
    2b98:	0d09      	lsrs	r1, r1, #20
    2b9a:	1a5b      	subs	r3, r3, r1
    2b9c:	0019      	movs	r1, r3
    2b9e:	469b      	mov	fp, r3
    2ba0:	f000 f98a 	bl	2eb8 <_sbrk_r>
    2ba4:	1c43      	adds	r3, r0, #1
    2ba6:	d100      	bne.n	2baa <_malloc_r+0x27a>
    2ba8:	e142      	b.n	2e30 <_malloc_r+0x500>
    2baa:	464b      	mov	r3, r9
    2bac:	1ac0      	subs	r0, r0, r3
    2bae:	2301      	movs	r3, #1
    2bb0:	4458      	add	r0, fp
    2bb2:	4318      	orrs	r0, r3
    2bb4:	4653      	mov	r3, sl
    2bb6:	681b      	ldr	r3, [r3, #0]
    2bb8:	445b      	add	r3, fp
    2bba:	0019      	movs	r1, r3
    2bbc:	4653      	mov	r3, sl
    2bbe:	6019      	str	r1, [r3, #0]
    2bc0:	464b      	mov	r3, r9
    2bc2:	60b3      	str	r3, [r6, #8]
    2bc4:	6058      	str	r0, [r3, #4]
    2bc6:	42b4      	cmp	r4, r6
    2bc8:	d013      	beq.n	2bf2 <_malloc_r+0x2c2>
    2bca:	4643      	mov	r3, r8
    2bcc:	2b0f      	cmp	r3, #15
    2bce:	d800      	bhi.n	2bd2 <_malloc_r+0x2a2>
    2bd0:	e0e8      	b.n	2da4 <_malloc_r+0x474>
    2bd2:	4643      	mov	r3, r8
    2bd4:	2207      	movs	r2, #7
    2bd6:	6860      	ldr	r0, [r4, #4]
    2bd8:	3b0c      	subs	r3, #12
    2bda:	4393      	bics	r3, r2
    2bdc:	3a06      	subs	r2, #6
    2bde:	4002      	ands	r2, r0
    2be0:	2005      	movs	r0, #5
    2be2:	431a      	orrs	r2, r3
    2be4:	6062      	str	r2, [r4, #4]
    2be6:	18e2      	adds	r2, r4, r3
    2be8:	6050      	str	r0, [r2, #4]
    2bea:	6090      	str	r0, [r2, #8]
    2bec:	2b0f      	cmp	r3, #15
    2bee:	d900      	bls.n	2bf2 <_malloc_r+0x2c2>
    2bf0:	e122      	b.n	2e38 <_malloc_r+0x508>
    2bf2:	4b3c      	ldr	r3, [pc, #240]	; (2ce4 <_malloc_r+0x3b4>)
    2bf4:	681a      	ldr	r2, [r3, #0]
    2bf6:	4291      	cmp	r1, r2
    2bf8:	d900      	bls.n	2bfc <_malloc_r+0x2cc>
    2bfa:	6019      	str	r1, [r3, #0]
    2bfc:	4b3a      	ldr	r3, [pc, #232]	; (2ce8 <_malloc_r+0x3b8>)
    2bfe:	681a      	ldr	r2, [r3, #0]
    2c00:	4291      	cmp	r1, r2
    2c02:	d900      	bls.n	2c06 <_malloc_r+0x2d6>
    2c04:	6019      	str	r1, [r3, #0]
    2c06:	2303      	movs	r3, #3
    2c08:	68b4      	ldr	r4, [r6, #8]
    2c0a:	6862      	ldr	r2, [r4, #4]
    2c0c:	439a      	bics	r2, r3
    2c0e:	1b53      	subs	r3, r2, r5
    2c10:	4295      	cmp	r5, r2
    2c12:	d900      	bls.n	2c16 <_malloc_r+0x2e6>
    2c14:	e0c9      	b.n	2daa <_malloc_r+0x47a>
    2c16:	2b0f      	cmp	r3, #15
    2c18:	dc00      	bgt.n	2c1c <_malloc_r+0x2ec>
    2c1a:	e0c6      	b.n	2daa <_malloc_r+0x47a>
    2c1c:	2201      	movs	r2, #1
    2c1e:	0029      	movs	r1, r5
    2c20:	4313      	orrs	r3, r2
    2c22:	4311      	orrs	r1, r2
    2c24:	1965      	adds	r5, r4, r5
    2c26:	6061      	str	r1, [r4, #4]
    2c28:	0038      	movs	r0, r7
    2c2a:	60b5      	str	r5, [r6, #8]
    2c2c:	606b      	str	r3, [r5, #4]
    2c2e:	f000 f93b 	bl	2ea8 <__malloc_unlock>
    2c32:	0020      	movs	r0, r4
    2c34:	3008      	adds	r0, #8
    2c36:	e74a      	b.n	2ace <_malloc_r+0x19e>
    2c38:	2814      	cmp	r0, #20
    2c3a:	d97a      	bls.n	2d32 <_malloc_r+0x402>
    2c3c:	2854      	cmp	r0, #84	; 0x54
    2c3e:	d900      	bls.n	2c42 <_malloc_r+0x312>
    2c40:	e0ba      	b.n	2db8 <_malloc_r+0x488>
    2c42:	236e      	movs	r3, #110	; 0x6e
    2c44:	4698      	mov	r8, r3
    2c46:	0b28      	lsrs	r0, r5, #12
    2c48:	4480      	add	r8, r0
    2c4a:	306f      	adds	r0, #111	; 0x6f
    2c4c:	00c1      	lsls	r1, r0, #3
    2c4e:	e696      	b.n	297e <_malloc_r+0x4e>
    2c50:	0a5a      	lsrs	r2, r3, #9
    2c52:	2a04      	cmp	r2, #4
    2c54:	d973      	bls.n	2d3e <_malloc_r+0x40e>
    2c56:	2a14      	cmp	r2, #20
    2c58:	d900      	bls.n	2c5c <_malloc_r+0x32c>
    2c5a:	e0d0      	b.n	2dfe <_malloc_r+0x4ce>
    2c5c:	0011      	movs	r1, r2
    2c5e:	325c      	adds	r2, #92	; 0x5c
    2c60:	315b      	adds	r1, #91	; 0x5b
    2c62:	00d2      	lsls	r2, r2, #3
    2c64:	2308      	movs	r3, #8
    2c66:	425b      	negs	r3, r3
    2c68:	469c      	mov	ip, r3
    2c6a:	18b2      	adds	r2, r6, r2
    2c6c:	4494      	add	ip, r2
    2c6e:	4663      	mov	r3, ip
    2c70:	689a      	ldr	r2, [r3, #8]
    2c72:	2303      	movs	r3, #3
    2c74:	4698      	mov	r8, r3
    2c76:	4594      	cmp	ip, r2
    2c78:	d100      	bne.n	2c7c <_malloc_r+0x34c>
    2c7a:	e0ab      	b.n	2dd4 <_malloc_r+0x4a4>
    2c7c:	4643      	mov	r3, r8
    2c7e:	6851      	ldr	r1, [r2, #4]
    2c80:	4399      	bics	r1, r3
    2c82:	4589      	cmp	r9, r1
    2c84:	d300      	bcc.n	2c88 <_malloc_r+0x358>
    2c86:	e095      	b.n	2db4 <_malloc_r+0x484>
    2c88:	6892      	ldr	r2, [r2, #8]
    2c8a:	4594      	cmp	ip, r2
    2c8c:	d1f6      	bne.n	2c7c <_malloc_r+0x34c>
    2c8e:	4663      	mov	r3, ip
    2c90:	68da      	ldr	r2, [r3, #12]
    2c92:	6873      	ldr	r3, [r6, #4]
    2c94:	4661      	mov	r1, ip
    2c96:	60e2      	str	r2, [r4, #12]
    2c98:	60a1      	str	r1, [r4, #8]
    2c9a:	6094      	str	r4, [r2, #8]
    2c9c:	60cc      	str	r4, [r1, #12]
    2c9e:	e6b6      	b.n	2a0e <_malloc_r+0xde>
    2ca0:	2301      	movs	r3, #1
    2ca2:	1960      	adds	r0, r4, r5
    2ca4:	431d      	orrs	r5, r3
    2ca6:	6065      	str	r5, [r4, #4]
    2ca8:	6170      	str	r0, [r6, #20]
    2caa:	6130      	str	r0, [r6, #16]
    2cac:	60c2      	str	r2, [r0, #12]
    2cae:	6082      	str	r2, [r0, #8]
    2cb0:	001a      	movs	r2, r3
    2cb2:	464b      	mov	r3, r9
    2cb4:	430a      	orrs	r2, r1
    2cb6:	6042      	str	r2, [r0, #4]
    2cb8:	0038      	movs	r0, r7
    2cba:	50e1      	str	r1, [r4, r3]
    2cbc:	f000 f8f4 	bl	2ea8 <__malloc_unlock>
    2cc0:	0020      	movs	r0, r4
    2cc2:	3008      	adds	r0, #8
    2cc4:	e703      	b.n	2ace <_malloc_r+0x19e>
    2cc6:	46c0      	nop			; (mov r8, r8)
    2cc8:	2000045c 	.word	0x2000045c
    2ccc:	000001ff 	.word	0x000001ff
    2cd0:	20000864 	.word	0x20000864
    2cd4:	200008c4 	.word	0x200008c4
    2cd8:	0000100f 	.word	0x0000100f
    2cdc:	20000894 	.word	0x20000894
    2ce0:	00001008 	.word	0x00001008
    2ce4:	200008bc 	.word	0x200008bc
    2ce8:	200008c0 	.word	0x200008c0
    2cec:	6873      	ldr	r3, [r6, #4]
    2cee:	e68e      	b.n	2a0e <_malloc_r+0xde>
    2cf0:	2308      	movs	r3, #8
    2cf2:	469b      	mov	fp, r3
    2cf4:	3b07      	subs	r3, #7
    2cf6:	44dc      	add	ip, fp
    2cf8:	469b      	mov	fp, r3
    2cfa:	44da      	add	sl, fp
    2cfc:	4643      	mov	r3, r8
    2cfe:	4652      	mov	r2, sl
    2d00:	4213      	tst	r3, r2
    2d02:	d000      	beq.n	2d06 <_malloc_r+0x3d6>
    2d04:	e697      	b.n	2a36 <_malloc_r+0x106>
    2d06:	e037      	b.n	2d78 <_malloc_r+0x448>
    2d08:	68dc      	ldr	r4, [r3, #12]
    2d0a:	3002      	adds	r0, #2
    2d0c:	42a3      	cmp	r3, r4
    2d0e:	d100      	bne.n	2d12 <_malloc_r+0x3e2>
    2d10:	e655      	b.n	29be <_malloc_r+0x8e>
    2d12:	e6ca      	b.n	2aaa <_malloc_r+0x17a>
    2d14:	2201      	movs	r2, #1
    2d16:	18e3      	adds	r3, r4, r3
    2d18:	6859      	ldr	r1, [r3, #4]
    2d1a:	0038      	movs	r0, r7
    2d1c:	430a      	orrs	r2, r1
    2d1e:	605a      	str	r2, [r3, #4]
    2d20:	68e3      	ldr	r3, [r4, #12]
    2d22:	68a2      	ldr	r2, [r4, #8]
    2d24:	60d3      	str	r3, [r2, #12]
    2d26:	609a      	str	r2, [r3, #8]
    2d28:	f000 f8be 	bl	2ea8 <__malloc_unlock>
    2d2c:	0020      	movs	r0, r4
    2d2e:	3008      	adds	r0, #8
    2d30:	e6cd      	b.n	2ace <_malloc_r+0x19e>
    2d32:	235b      	movs	r3, #91	; 0x5b
    2d34:	4698      	mov	r8, r3
    2d36:	4480      	add	r8, r0
    2d38:	305c      	adds	r0, #92	; 0x5c
    2d3a:	00c1      	lsls	r1, r0, #3
    2d3c:	e61f      	b.n	297e <_malloc_r+0x4e>
    2d3e:	099a      	lsrs	r2, r3, #6
    2d40:	0011      	movs	r1, r2
    2d42:	3239      	adds	r2, #57	; 0x39
    2d44:	3138      	adds	r1, #56	; 0x38
    2d46:	00d2      	lsls	r2, r2, #3
    2d48:	e78c      	b.n	2c64 <_malloc_r+0x334>
    2d4a:	42b4      	cmp	r4, r6
    2d4c:	d000      	beq.n	2d50 <_malloc_r+0x420>
    2d4e:	e75a      	b.n	2c06 <_malloc_r+0x2d6>
    2d50:	4b4f      	ldr	r3, [pc, #316]	; (2e90 <_malloc_r+0x560>)
    2d52:	9a00      	ldr	r2, [sp, #0]
    2d54:	469a      	mov	sl, r3
    2d56:	681b      	ldr	r3, [r3, #0]
    2d58:	469c      	mov	ip, r3
    2d5a:	4653      	mov	r3, sl
    2d5c:	4462      	add	r2, ip
    2d5e:	0011      	movs	r1, r2
    2d60:	601a      	str	r2, [r3, #0]
    2d62:	e6ff      	b.n	2b64 <_malloc_r+0x234>
    2d64:	2308      	movs	r3, #8
    2d66:	425b      	negs	r3, r3
    2d68:	469c      	mov	ip, r3
    2d6a:	44e1      	add	r9, ip
    2d6c:	464b      	mov	r3, r9
    2d6e:	689b      	ldr	r3, [r3, #8]
    2d70:	3801      	subs	r0, #1
    2d72:	4599      	cmp	r9, r3
    2d74:	d000      	beq.n	2d78 <_malloc_r+0x448>
    2d76:	e084      	b.n	2e82 <_malloc_r+0x552>
    2d78:	4643      	mov	r3, r8
    2d7a:	4203      	tst	r3, r0
    2d7c:	d1f2      	bne.n	2d64 <_malloc_r+0x434>
    2d7e:	6873      	ldr	r3, [r6, #4]
    2d80:	438b      	bics	r3, r1
    2d82:	6073      	str	r3, [r6, #4]
    2d84:	0049      	lsls	r1, r1, #1
    2d86:	4299      	cmp	r1, r3
    2d88:	d900      	bls.n	2d8c <_malloc_r+0x45c>
    2d8a:	e6b5      	b.n	2af8 <_malloc_r+0x1c8>
    2d8c:	2900      	cmp	r1, #0
    2d8e:	d100      	bne.n	2d92 <_malloc_r+0x462>
    2d90:	e6b2      	b.n	2af8 <_malloc_r+0x1c8>
    2d92:	4650      	mov	r0, sl
    2d94:	420b      	tst	r3, r1
    2d96:	d000      	beq.n	2d9a <_malloc_r+0x46a>
    2d98:	e648      	b.n	2a2c <_malloc_r+0xfc>
    2d9a:	0049      	lsls	r1, r1, #1
    2d9c:	3004      	adds	r0, #4
    2d9e:	420b      	tst	r3, r1
    2da0:	d0fb      	beq.n	2d9a <_malloc_r+0x46a>
    2da2:	e643      	b.n	2a2c <_malloc_r+0xfc>
    2da4:	2301      	movs	r3, #1
    2da6:	464a      	mov	r2, r9
    2da8:	6053      	str	r3, [r2, #4]
    2daa:	0038      	movs	r0, r7
    2dac:	f000 f87c 	bl	2ea8 <__malloc_unlock>
    2db0:	2000      	movs	r0, #0
    2db2:	e68c      	b.n	2ace <_malloc_r+0x19e>
    2db4:	4694      	mov	ip, r2
    2db6:	e76a      	b.n	2c8e <_malloc_r+0x35e>
    2db8:	23aa      	movs	r3, #170	; 0xaa
    2dba:	005b      	lsls	r3, r3, #1
    2dbc:	4298      	cmp	r0, r3
    2dbe:	d811      	bhi.n	2de4 <_malloc_r+0x4b4>
    2dc0:	3bdd      	subs	r3, #221	; 0xdd
    2dc2:	4698      	mov	r8, r3
    2dc4:	0be8      	lsrs	r0, r5, #15
    2dc6:	4480      	add	r8, r0
    2dc8:	3078      	adds	r0, #120	; 0x78
    2dca:	00c1      	lsls	r1, r0, #3
    2dcc:	e5d7      	b.n	297e <_malloc_r+0x4e>
    2dce:	2380      	movs	r3, #128	; 0x80
    2dd0:	015b      	lsls	r3, r3, #5
    2dd2:	e6dd      	b.n	2b90 <_malloc_r+0x260>
    2dd4:	1089      	asrs	r1, r1, #2
    2dd6:	3b02      	subs	r3, #2
    2dd8:	408b      	lsls	r3, r1
    2dda:	6872      	ldr	r2, [r6, #4]
    2ddc:	4313      	orrs	r3, r2
    2dde:	6073      	str	r3, [r6, #4]
    2de0:	4662      	mov	r2, ip
    2de2:	e757      	b.n	2c94 <_malloc_r+0x364>
    2de4:	4b2b      	ldr	r3, [pc, #172]	; (2e94 <_malloc_r+0x564>)
    2de6:	4298      	cmp	r0, r3
    2de8:	d81c      	bhi.n	2e24 <_malloc_r+0x4f4>
    2dea:	237c      	movs	r3, #124	; 0x7c
    2dec:	4698      	mov	r8, r3
    2dee:	0ca8      	lsrs	r0, r5, #18
    2df0:	4480      	add	r8, r0
    2df2:	307d      	adds	r0, #125	; 0x7d
    2df4:	00c1      	lsls	r1, r0, #3
    2df6:	e5c2      	b.n	297e <_malloc_r+0x4e>
    2df8:	3310      	adds	r3, #16
    2dfa:	9300      	str	r3, [sp, #0]
    2dfc:	e699      	b.n	2b32 <_malloc_r+0x202>
    2dfe:	2a54      	cmp	r2, #84	; 0x54
    2e00:	d826      	bhi.n	2e50 <_malloc_r+0x520>
    2e02:	464b      	mov	r3, r9
    2e04:	0b1a      	lsrs	r2, r3, #12
    2e06:	0011      	movs	r1, r2
    2e08:	326f      	adds	r2, #111	; 0x6f
    2e0a:	316e      	adds	r1, #110	; 0x6e
    2e0c:	00d2      	lsls	r2, r2, #3
    2e0e:	e729      	b.n	2c64 <_malloc_r+0x334>
    2e10:	051b      	lsls	r3, r3, #20
    2e12:	d000      	beq.n	2e16 <_malloc_r+0x4e6>
    2e14:	e6a6      	b.n	2b64 <_malloc_r+0x234>
    2e16:	2001      	movs	r0, #1
    2e18:	9b00      	ldr	r3, [sp, #0]
    2e1a:	68b2      	ldr	r2, [r6, #8]
    2e1c:	4443      	add	r3, r8
    2e1e:	4303      	orrs	r3, r0
    2e20:	6053      	str	r3, [r2, #4]
    2e22:	e6e6      	b.n	2bf2 <_malloc_r+0x2c2>
    2e24:	21fe      	movs	r1, #254	; 0xfe
    2e26:	237e      	movs	r3, #126	; 0x7e
    2e28:	207f      	movs	r0, #127	; 0x7f
    2e2a:	0089      	lsls	r1, r1, #2
    2e2c:	4698      	mov	r8, r3
    2e2e:	e5a6      	b.n	297e <_malloc_r+0x4e>
    2e30:	2300      	movs	r3, #0
    2e32:	2001      	movs	r0, #1
    2e34:	469b      	mov	fp, r3
    2e36:	e6bd      	b.n	2bb4 <_malloc_r+0x284>
    2e38:	0021      	movs	r1, r4
    2e3a:	0038      	movs	r0, r7
    2e3c:	3108      	adds	r1, #8
    2e3e:	f7ff fc31 	bl	26a4 <_free_r>
    2e42:	4653      	mov	r3, sl
    2e44:	6819      	ldr	r1, [r3, #0]
    2e46:	e6d4      	b.n	2bf2 <_malloc_r+0x2c2>
    2e48:	465b      	mov	r3, fp
    2e4a:	464a      	mov	r2, r9
    2e4c:	601a      	str	r2, [r3, #0]
    2e4e:	e694      	b.n	2b7a <_malloc_r+0x24a>
    2e50:	21aa      	movs	r1, #170	; 0xaa
    2e52:	0049      	lsls	r1, r1, #1
    2e54:	428a      	cmp	r2, r1
    2e56:	d806      	bhi.n	2e66 <_malloc_r+0x536>
    2e58:	464b      	mov	r3, r9
    2e5a:	0bda      	lsrs	r2, r3, #15
    2e5c:	0011      	movs	r1, r2
    2e5e:	3278      	adds	r2, #120	; 0x78
    2e60:	3177      	adds	r1, #119	; 0x77
    2e62:	00d2      	lsls	r2, r2, #3
    2e64:	e6fe      	b.n	2c64 <_malloc_r+0x334>
    2e66:	490b      	ldr	r1, [pc, #44]	; (2e94 <_malloc_r+0x564>)
    2e68:	428a      	cmp	r2, r1
    2e6a:	d806      	bhi.n	2e7a <_malloc_r+0x54a>
    2e6c:	464b      	mov	r3, r9
    2e6e:	0c9a      	lsrs	r2, r3, #18
    2e70:	0011      	movs	r1, r2
    2e72:	327d      	adds	r2, #125	; 0x7d
    2e74:	317c      	adds	r1, #124	; 0x7c
    2e76:	00d2      	lsls	r2, r2, #3
    2e78:	e6f4      	b.n	2c64 <_malloc_r+0x334>
    2e7a:	22fe      	movs	r2, #254	; 0xfe
    2e7c:	217e      	movs	r1, #126	; 0x7e
    2e7e:	0092      	lsls	r2, r2, #2
    2e80:	e6f0      	b.n	2c64 <_malloc_r+0x334>
    2e82:	6873      	ldr	r3, [r6, #4]
    2e84:	e77e      	b.n	2d84 <_malloc_r+0x454>
    2e86:	002b      	movs	r3, r5
    2e88:	08e8      	lsrs	r0, r5, #3
    2e8a:	3308      	adds	r3, #8
    2e8c:	e605      	b.n	2a9a <_malloc_r+0x16a>
    2e8e:	46c0      	nop			; (mov r8, r8)
    2e90:	20000894 	.word	0x20000894
    2e94:	00000554 	.word	0x00000554

00002e98 <__malloc_lock>:
    2e98:	b510      	push	{r4, lr}
    2e9a:	4802      	ldr	r0, [pc, #8]	; (2ea4 <__malloc_lock+0xc>)
    2e9c:	f7ff fd0a 	bl	28b4 <__retarget_lock_acquire_recursive>
    2ea0:	bd10      	pop	{r4, pc}
    2ea2:	46c0      	nop			; (mov r8, r8)
    2ea4:	20000d34 	.word	0x20000d34

00002ea8 <__malloc_unlock>:
    2ea8:	b510      	push	{r4, lr}
    2eaa:	4802      	ldr	r0, [pc, #8]	; (2eb4 <__malloc_unlock+0xc>)
    2eac:	f7ff fd04 	bl	28b8 <__retarget_lock_release_recursive>
    2eb0:	bd10      	pop	{r4, pc}
    2eb2:	46c0      	nop			; (mov r8, r8)
    2eb4:	20000d34 	.word	0x20000d34

00002eb8 <_sbrk_r>:
    2eb8:	2300      	movs	r3, #0
    2eba:	b570      	push	{r4, r5, r6, lr}
    2ebc:	4c06      	ldr	r4, [pc, #24]	; (2ed8 <_sbrk_r+0x20>)
    2ebe:	0005      	movs	r5, r0
    2ec0:	0008      	movs	r0, r1
    2ec2:	6023      	str	r3, [r4, #0]
    2ec4:	f7fe fada 	bl	147c <_sbrk>
    2ec8:	1c43      	adds	r3, r0, #1
    2eca:	d000      	beq.n	2ece <_sbrk_r+0x16>
    2ecc:	bd70      	pop	{r4, r5, r6, pc}
    2ece:	6823      	ldr	r3, [r4, #0]
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d0fb      	beq.n	2ecc <_sbrk_r+0x14>
    2ed4:	602b      	str	r3, [r5, #0]
    2ed6:	e7f9      	b.n	2ecc <_sbrk_r+0x14>
    2ed8:	20000d48 	.word	0x20000d48

00002edc <__sread>:
    2edc:	b570      	push	{r4, r5, r6, lr}
    2ede:	000c      	movs	r4, r1
    2ee0:	250e      	movs	r5, #14
    2ee2:	5f49      	ldrsh	r1, [r1, r5]
    2ee4:	f000 f976 	bl	31d4 <_read_r>
    2ee8:	2800      	cmp	r0, #0
    2eea:	db03      	blt.n	2ef4 <__sread+0x18>
    2eec:	6d23      	ldr	r3, [r4, #80]	; 0x50
    2eee:	181b      	adds	r3, r3, r0
    2ef0:	6523      	str	r3, [r4, #80]	; 0x50
    2ef2:	bd70      	pop	{r4, r5, r6, pc}
    2ef4:	89a3      	ldrh	r3, [r4, #12]
    2ef6:	4a02      	ldr	r2, [pc, #8]	; (2f00 <__sread+0x24>)
    2ef8:	4013      	ands	r3, r2
    2efa:	81a3      	strh	r3, [r4, #12]
    2efc:	e7f9      	b.n	2ef2 <__sread+0x16>
    2efe:	46c0      	nop			; (mov r8, r8)
    2f00:	ffffefff 	.word	0xffffefff

00002f04 <__swrite>:
    2f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f06:	0016      	movs	r6, r2
    2f08:	001f      	movs	r7, r3
    2f0a:	220c      	movs	r2, #12
    2f0c:	5e8b      	ldrsh	r3, [r1, r2]
    2f0e:	0005      	movs	r5, r0
    2f10:	000c      	movs	r4, r1
    2f12:	05da      	lsls	r2, r3, #23
    2f14:	d507      	bpl.n	2f26 <__swrite+0x22>
    2f16:	230e      	movs	r3, #14
    2f18:	5ec9      	ldrsh	r1, [r1, r3]
    2f1a:	2200      	movs	r2, #0
    2f1c:	2302      	movs	r3, #2
    2f1e:	f000 f945 	bl	31ac <_lseek_r>
    2f22:	220c      	movs	r2, #12
    2f24:	5ea3      	ldrsh	r3, [r4, r2]
    2f26:	4a05      	ldr	r2, [pc, #20]	; (2f3c <__swrite+0x38>)
    2f28:	0028      	movs	r0, r5
    2f2a:	4013      	ands	r3, r2
    2f2c:	81a3      	strh	r3, [r4, #12]
    2f2e:	0032      	movs	r2, r6
    2f30:	230e      	movs	r3, #14
    2f32:	5ee1      	ldrsh	r1, [r4, r3]
    2f34:	003b      	movs	r3, r7
    2f36:	f000 f81f 	bl	2f78 <_write_r>
    2f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f3c:	ffffefff 	.word	0xffffefff

00002f40 <__sseek>:
    2f40:	b570      	push	{r4, r5, r6, lr}
    2f42:	000c      	movs	r4, r1
    2f44:	250e      	movs	r5, #14
    2f46:	5f49      	ldrsh	r1, [r1, r5]
    2f48:	f000 f930 	bl	31ac <_lseek_r>
    2f4c:	1c43      	adds	r3, r0, #1
    2f4e:	d006      	beq.n	2f5e <__sseek+0x1e>
    2f50:	2380      	movs	r3, #128	; 0x80
    2f52:	89a2      	ldrh	r2, [r4, #12]
    2f54:	015b      	lsls	r3, r3, #5
    2f56:	4313      	orrs	r3, r2
    2f58:	81a3      	strh	r3, [r4, #12]
    2f5a:	6520      	str	r0, [r4, #80]	; 0x50
    2f5c:	bd70      	pop	{r4, r5, r6, pc}
    2f5e:	89a3      	ldrh	r3, [r4, #12]
    2f60:	4a01      	ldr	r2, [pc, #4]	; (2f68 <__sseek+0x28>)
    2f62:	4013      	ands	r3, r2
    2f64:	81a3      	strh	r3, [r4, #12]
    2f66:	e7f9      	b.n	2f5c <__sseek+0x1c>
    2f68:	ffffefff 	.word	0xffffefff

00002f6c <__sclose>:
    2f6c:	b510      	push	{r4, lr}
    2f6e:	230e      	movs	r3, #14
    2f70:	5ec9      	ldrsh	r1, [r1, r3]
    2f72:	f000 f88f 	bl	3094 <_close_r>
    2f76:	bd10      	pop	{r4, pc}

00002f78 <_write_r>:
    2f78:	b570      	push	{r4, r5, r6, lr}
    2f7a:	0005      	movs	r5, r0
    2f7c:	0008      	movs	r0, r1
    2f7e:	0011      	movs	r1, r2
    2f80:	2200      	movs	r2, #0
    2f82:	4c06      	ldr	r4, [pc, #24]	; (2f9c <_write_r+0x24>)
    2f84:	6022      	str	r2, [r4, #0]
    2f86:	001a      	movs	r2, r3
    2f88:	f7fe ff9a 	bl	1ec0 <_write>
    2f8c:	1c43      	adds	r3, r0, #1
    2f8e:	d000      	beq.n	2f92 <_write_r+0x1a>
    2f90:	bd70      	pop	{r4, r5, r6, pc}
    2f92:	6823      	ldr	r3, [r4, #0]
    2f94:	2b00      	cmp	r3, #0
    2f96:	d0fb      	beq.n	2f90 <_write_r+0x18>
    2f98:	602b      	str	r3, [r5, #0]
    2f9a:	e7f9      	b.n	2f90 <_write_r+0x18>
    2f9c:	20000d48 	.word	0x20000d48

00002fa0 <__register_exitproc>:
    2fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fa2:	464e      	mov	r6, r9
    2fa4:	4645      	mov	r5, r8
    2fa6:	46de      	mov	lr, fp
    2fa8:	4657      	mov	r7, sl
    2faa:	b5e0      	push	{r5, r6, r7, lr}
    2fac:	4d36      	ldr	r5, [pc, #216]	; (3088 <__register_exitproc+0xe8>)
    2fae:	b083      	sub	sp, #12
    2fb0:	0006      	movs	r6, r0
    2fb2:	6828      	ldr	r0, [r5, #0]
    2fb4:	4698      	mov	r8, r3
    2fb6:	000f      	movs	r7, r1
    2fb8:	4691      	mov	r9, r2
    2fba:	f7ff fc7b 	bl	28b4 <__retarget_lock_acquire_recursive>
    2fbe:	4b33      	ldr	r3, [pc, #204]	; (308c <__register_exitproc+0xec>)
    2fc0:	681c      	ldr	r4, [r3, #0]
    2fc2:	23a4      	movs	r3, #164	; 0xa4
    2fc4:	005b      	lsls	r3, r3, #1
    2fc6:	58e0      	ldr	r0, [r4, r3]
    2fc8:	2800      	cmp	r0, #0
    2fca:	d052      	beq.n	3072 <__register_exitproc+0xd2>
    2fcc:	6843      	ldr	r3, [r0, #4]
    2fce:	2b1f      	cmp	r3, #31
    2fd0:	dc13      	bgt.n	2ffa <__register_exitproc+0x5a>
    2fd2:	1c5a      	adds	r2, r3, #1
    2fd4:	9201      	str	r2, [sp, #4]
    2fd6:	2e00      	cmp	r6, #0
    2fd8:	d128      	bne.n	302c <__register_exitproc+0x8c>
    2fda:	9a01      	ldr	r2, [sp, #4]
    2fdc:	3302      	adds	r3, #2
    2fde:	009b      	lsls	r3, r3, #2
    2fe0:	6042      	str	r2, [r0, #4]
    2fe2:	501f      	str	r7, [r3, r0]
    2fe4:	6828      	ldr	r0, [r5, #0]
    2fe6:	f7ff fc67 	bl	28b8 <__retarget_lock_release_recursive>
    2fea:	2000      	movs	r0, #0
    2fec:	b003      	add	sp, #12
    2fee:	bc3c      	pop	{r2, r3, r4, r5}
    2ff0:	4690      	mov	r8, r2
    2ff2:	4699      	mov	r9, r3
    2ff4:	46a2      	mov	sl, r4
    2ff6:	46ab      	mov	fp, r5
    2ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ffa:	4b25      	ldr	r3, [pc, #148]	; (3090 <__register_exitproc+0xf0>)
    2ffc:	2b00      	cmp	r3, #0
    2ffe:	d03d      	beq.n	307c <__register_exitproc+0xdc>
    3000:	20c8      	movs	r0, #200	; 0xc8
    3002:	0040      	lsls	r0, r0, #1
    3004:	f7ff fc8a 	bl	291c <malloc>
    3008:	2800      	cmp	r0, #0
    300a:	d037      	beq.n	307c <__register_exitproc+0xdc>
    300c:	22a4      	movs	r2, #164	; 0xa4
    300e:	2300      	movs	r3, #0
    3010:	0052      	lsls	r2, r2, #1
    3012:	58a1      	ldr	r1, [r4, r2]
    3014:	6043      	str	r3, [r0, #4]
    3016:	6001      	str	r1, [r0, #0]
    3018:	50a0      	str	r0, [r4, r2]
    301a:	3240      	adds	r2, #64	; 0x40
    301c:	5083      	str	r3, [r0, r2]
    301e:	3204      	adds	r2, #4
    3020:	5083      	str	r3, [r0, r2]
    3022:	3301      	adds	r3, #1
    3024:	9301      	str	r3, [sp, #4]
    3026:	2300      	movs	r3, #0
    3028:	2e00      	cmp	r6, #0
    302a:	d0d6      	beq.n	2fda <__register_exitproc+0x3a>
    302c:	009a      	lsls	r2, r3, #2
    302e:	4692      	mov	sl, r2
    3030:	4482      	add	sl, r0
    3032:	464a      	mov	r2, r9
    3034:	2188      	movs	r1, #136	; 0x88
    3036:	4654      	mov	r4, sl
    3038:	5062      	str	r2, [r4, r1]
    303a:	22c4      	movs	r2, #196	; 0xc4
    303c:	0052      	lsls	r2, r2, #1
    303e:	4691      	mov	r9, r2
    3040:	4481      	add	r9, r0
    3042:	464a      	mov	r2, r9
    3044:	3987      	subs	r1, #135	; 0x87
    3046:	4099      	lsls	r1, r3
    3048:	6812      	ldr	r2, [r2, #0]
    304a:	468b      	mov	fp, r1
    304c:	430a      	orrs	r2, r1
    304e:	4694      	mov	ip, r2
    3050:	464a      	mov	r2, r9
    3052:	4661      	mov	r1, ip
    3054:	6011      	str	r1, [r2, #0]
    3056:	2284      	movs	r2, #132	; 0x84
    3058:	4641      	mov	r1, r8
    305a:	0052      	lsls	r2, r2, #1
    305c:	50a1      	str	r1, [r4, r2]
    305e:	2e02      	cmp	r6, #2
    3060:	d1bb      	bne.n	2fda <__register_exitproc+0x3a>
    3062:	0002      	movs	r2, r0
    3064:	465c      	mov	r4, fp
    3066:	328d      	adds	r2, #141	; 0x8d
    3068:	32ff      	adds	r2, #255	; 0xff
    306a:	6811      	ldr	r1, [r2, #0]
    306c:	430c      	orrs	r4, r1
    306e:	6014      	str	r4, [r2, #0]
    3070:	e7b3      	b.n	2fda <__register_exitproc+0x3a>
    3072:	0020      	movs	r0, r4
    3074:	304d      	adds	r0, #77	; 0x4d
    3076:	30ff      	adds	r0, #255	; 0xff
    3078:	50e0      	str	r0, [r4, r3]
    307a:	e7a7      	b.n	2fcc <__register_exitproc+0x2c>
    307c:	6828      	ldr	r0, [r5, #0]
    307e:	f7ff fc1b 	bl	28b8 <__retarget_lock_release_recursive>
    3082:	2001      	movs	r0, #1
    3084:	4240      	negs	r0, r0
    3086:	e7b1      	b.n	2fec <__register_exitproc+0x4c>
    3088:	20000458 	.word	0x20000458
    308c:	00009ba4 	.word	0x00009ba4
    3090:	0000291d 	.word	0x0000291d

00003094 <_close_r>:
    3094:	2300      	movs	r3, #0
    3096:	b570      	push	{r4, r5, r6, lr}
    3098:	4c06      	ldr	r4, [pc, #24]	; (30b4 <_close_r+0x20>)
    309a:	0005      	movs	r5, r0
    309c:	0008      	movs	r0, r1
    309e:	6023      	str	r3, [r4, #0]
    30a0:	f7fe f9fe 	bl	14a0 <_close>
    30a4:	1c43      	adds	r3, r0, #1
    30a6:	d000      	beq.n	30aa <_close_r+0x16>
    30a8:	bd70      	pop	{r4, r5, r6, pc}
    30aa:	6823      	ldr	r3, [r4, #0]
    30ac:	2b00      	cmp	r3, #0
    30ae:	d0fb      	beq.n	30a8 <_close_r+0x14>
    30b0:	602b      	str	r3, [r5, #0]
    30b2:	e7f9      	b.n	30a8 <_close_r+0x14>
    30b4:	20000d48 	.word	0x20000d48

000030b8 <_fclose_r>:
    30b8:	b570      	push	{r4, r5, r6, lr}
    30ba:	0005      	movs	r5, r0
    30bc:	1e0c      	subs	r4, r1, #0
    30be:	d040      	beq.n	3142 <_fclose_r+0x8a>
    30c0:	2800      	cmp	r0, #0
    30c2:	d002      	beq.n	30ca <_fclose_r+0x12>
    30c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    30c6:	2b00      	cmp	r3, #0
    30c8:	d03e      	beq.n	3148 <_fclose_r+0x90>
    30ca:	2601      	movs	r6, #1
    30cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
    30ce:	4233      	tst	r3, r6
    30d0:	d133      	bne.n	313a <_fclose_r+0x82>
    30d2:	89a3      	ldrh	r3, [r4, #12]
    30d4:	059b      	lsls	r3, r3, #22
    30d6:	d543      	bpl.n	3160 <_fclose_r+0xa8>
    30d8:	0021      	movs	r1, r4
    30da:	0028      	movs	r0, r5
    30dc:	f7ff f936 	bl	234c <__sflush_r>
    30e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    30e2:	0006      	movs	r6, r0
    30e4:	2b00      	cmp	r3, #0
    30e6:	d004      	beq.n	30f2 <_fclose_r+0x3a>
    30e8:	69e1      	ldr	r1, [r4, #28]
    30ea:	0028      	movs	r0, r5
    30ec:	4798      	blx	r3
    30ee:	2800      	cmp	r0, #0
    30f0:	db44      	blt.n	317c <_fclose_r+0xc4>
    30f2:	89a3      	ldrh	r3, [r4, #12]
    30f4:	061b      	lsls	r3, r3, #24
    30f6:	d42a      	bmi.n	314e <_fclose_r+0x96>
    30f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    30fa:	2900      	cmp	r1, #0
    30fc:	d008      	beq.n	3110 <_fclose_r+0x58>
    30fe:	0023      	movs	r3, r4
    3100:	3340      	adds	r3, #64	; 0x40
    3102:	4299      	cmp	r1, r3
    3104:	d002      	beq.n	310c <_fclose_r+0x54>
    3106:	0028      	movs	r0, r5
    3108:	f7ff facc 	bl	26a4 <_free_r>
    310c:	2300      	movs	r3, #0
    310e:	6323      	str	r3, [r4, #48]	; 0x30
    3110:	6c61      	ldr	r1, [r4, #68]	; 0x44
    3112:	2900      	cmp	r1, #0
    3114:	d004      	beq.n	3120 <_fclose_r+0x68>
    3116:	0028      	movs	r0, r5
    3118:	f7ff fac4 	bl	26a4 <_free_r>
    311c:	2300      	movs	r3, #0
    311e:	6463      	str	r3, [r4, #68]	; 0x44
    3120:	f7ff fa46 	bl	25b0 <__sfp_lock_acquire>
    3124:	2300      	movs	r3, #0
    3126:	81a3      	strh	r3, [r4, #12]
    3128:	6e63      	ldr	r3, [r4, #100]	; 0x64
    312a:	07db      	lsls	r3, r3, #31
    312c:	d514      	bpl.n	3158 <_fclose_r+0xa0>
    312e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    3130:	f7ff fbbe 	bl	28b0 <__retarget_lock_close_recursive>
    3134:	f7ff fa44 	bl	25c0 <__sfp_lock_release>
    3138:	e004      	b.n	3144 <_fclose_r+0x8c>
    313a:	220c      	movs	r2, #12
    313c:	5ea3      	ldrsh	r3, [r4, r2]
    313e:	2b00      	cmp	r3, #0
    3140:	d1ca      	bne.n	30d8 <_fclose_r+0x20>
    3142:	2600      	movs	r6, #0
    3144:	0030      	movs	r0, r6
    3146:	bd70      	pop	{r4, r5, r6, pc}
    3148:	f7ff fa02 	bl	2550 <__sinit>
    314c:	e7bd      	b.n	30ca <_fclose_r+0x12>
    314e:	6921      	ldr	r1, [r4, #16]
    3150:	0028      	movs	r0, r5
    3152:	f7ff faa7 	bl	26a4 <_free_r>
    3156:	e7cf      	b.n	30f8 <_fclose_r+0x40>
    3158:	6da0      	ldr	r0, [r4, #88]	; 0x58
    315a:	f7ff fbad 	bl	28b8 <__retarget_lock_release_recursive>
    315e:	e7e6      	b.n	312e <_fclose_r+0x76>
    3160:	6da0      	ldr	r0, [r4, #88]	; 0x58
    3162:	f7ff fba7 	bl	28b4 <__retarget_lock_acquire_recursive>
    3166:	220c      	movs	r2, #12
    3168:	5ea3      	ldrsh	r3, [r4, r2]
    316a:	2b00      	cmp	r3, #0
    316c:	d1b4      	bne.n	30d8 <_fclose_r+0x20>
    316e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    3170:	401e      	ands	r6, r3
    3172:	d1e6      	bne.n	3142 <_fclose_r+0x8a>
    3174:	6da0      	ldr	r0, [r4, #88]	; 0x58
    3176:	f7ff fb9f 	bl	28b8 <__retarget_lock_release_recursive>
    317a:	e7e3      	b.n	3144 <_fclose_r+0x8c>
    317c:	2601      	movs	r6, #1
    317e:	4276      	negs	r6, r6
    3180:	e7b7      	b.n	30f2 <_fclose_r+0x3a>
    3182:	46c0      	nop			; (mov r8, r8)

00003184 <_fstat_r>:
    3184:	2300      	movs	r3, #0
    3186:	b570      	push	{r4, r5, r6, lr}
    3188:	4c07      	ldr	r4, [pc, #28]	; (31a8 <_fstat_r+0x24>)
    318a:	0005      	movs	r5, r0
    318c:	0008      	movs	r0, r1
    318e:	0011      	movs	r1, r2
    3190:	6023      	str	r3, [r4, #0]
    3192:	f7fe f988 	bl	14a6 <_fstat>
    3196:	1c43      	adds	r3, r0, #1
    3198:	d000      	beq.n	319c <_fstat_r+0x18>
    319a:	bd70      	pop	{r4, r5, r6, pc}
    319c:	6823      	ldr	r3, [r4, #0]
    319e:	2b00      	cmp	r3, #0
    31a0:	d0fb      	beq.n	319a <_fstat_r+0x16>
    31a2:	602b      	str	r3, [r5, #0]
    31a4:	e7f9      	b.n	319a <_fstat_r+0x16>
    31a6:	46c0      	nop			; (mov r8, r8)
    31a8:	20000d48 	.word	0x20000d48

000031ac <_lseek_r>:
    31ac:	b570      	push	{r4, r5, r6, lr}
    31ae:	0005      	movs	r5, r0
    31b0:	0008      	movs	r0, r1
    31b2:	0011      	movs	r1, r2
    31b4:	2200      	movs	r2, #0
    31b6:	4c06      	ldr	r4, [pc, #24]	; (31d0 <_lseek_r+0x24>)
    31b8:	6022      	str	r2, [r4, #0]
    31ba:	001a      	movs	r2, r3
    31bc:	f7fe f978 	bl	14b0 <_lseek>
    31c0:	1c43      	adds	r3, r0, #1
    31c2:	d000      	beq.n	31c6 <_lseek_r+0x1a>
    31c4:	bd70      	pop	{r4, r5, r6, pc}
    31c6:	6823      	ldr	r3, [r4, #0]
    31c8:	2b00      	cmp	r3, #0
    31ca:	d0fb      	beq.n	31c4 <_lseek_r+0x18>
    31cc:	602b      	str	r3, [r5, #0]
    31ce:	e7f9      	b.n	31c4 <_lseek_r+0x18>
    31d0:	20000d48 	.word	0x20000d48

000031d4 <_read_r>:
    31d4:	b570      	push	{r4, r5, r6, lr}
    31d6:	0005      	movs	r5, r0
    31d8:	0008      	movs	r0, r1
    31da:	0011      	movs	r1, r2
    31dc:	2200      	movs	r2, #0
    31de:	4c06      	ldr	r4, [pc, #24]	; (31f8 <_read_r+0x24>)
    31e0:	6022      	str	r2, [r4, #0]
    31e2:	001a      	movs	r2, r3
    31e4:	f7fe fe58 	bl	1e98 <_read>
    31e8:	1c43      	adds	r3, r0, #1
    31ea:	d000      	beq.n	31ee <_read_r+0x1a>
    31ec:	bd70      	pop	{r4, r5, r6, pc}
    31ee:	6823      	ldr	r3, [r4, #0]
    31f0:	2b00      	cmp	r3, #0
    31f2:	d0fb      	beq.n	31ec <_read_r+0x18>
    31f4:	602b      	str	r3, [r5, #0]
    31f6:	e7f9      	b.n	31ec <_read_r+0x18>
    31f8:	20000d48 	.word	0x20000d48

000031fc <Font12_Table>:
	...
    3208:	10101000 00001010 00000010 48486c00     .............lHH
	...
    3220:	28141400 287c287c 00005050 40381000     ...(|(|(PP....8@
    3230:	70483840 00001010 20502000 1408700c     @8Hp..... P .p..
    3240:	00000008 18000000 48542020 00000034     ........  TH4...
    3250:	10101000 00000010 00000000 10080800     ................
    3260:	10101010 00080810 10202000 10101010     .........  .....
    3270:	00202010 107c1000 00002828 00000000     .  ...|.((......
    3280:	10100000 1010fe10 00000010 00000000     ................
    3290:	18000000 00203010 00000000 00007c00     .....0 ......|..
	...
    32a8:	30000000 00000030 08040400 20101008     ...00.......... 
    32b8:	00004020 44443800 44444444 00000038      @...8DDDDDD8...
    32c8:	10103000 10101010 0000007c 04443800     .0......|....8D.
    32d8:	44201008 0000007c 04443800 44040418     .. D|....8D....D
    32e8:	00000038 14140c00 047e4424 0000000e     8.......$D~.....
    32f8:	20203c00 44040438 00000038 40201c00     .<  8..D8..... @
    3308:	44444478 00000038 04447c00 10080808     xDDD8....|D.....
    3318:	00000010 44443800 44444438 00000038     .....8DD8DDD8...
    3328:	44443800 08043c44 00000070 30000000     .8DDD<..p......0
    3338:	30000030 00000030 18000000 18000018     0..00...........
    3348:	00002030 100c0000 10608060 0000000c     0 ......`.`.....
    3358:	00000000 007c007c 00000000 20c00000     ....|.|........ 
    3368:	20180418 000000c0 24180000 00100804     ... .......$....
    3378:	00000030 4c444438 404c5454 00003844     0...8DDLTTL@D8..
    3388:	28103000 447c2828 000000ee 4444f800     .0.(((|D......DD
    3398:	44444478 000000f8 40443c00 44404040     xDDD.....<D@@@@D
    33a8:	00000038 4448f000 48444444 000000f0     8.....HDDDDH....
    33b8:	5044fc00 44405070 000000fc 28227e00     ..DPpP@D.....~"(
    33c8:	20202838 00000070 40443c00 44444e40     8(  p....<D@@NDD
    33d8:	00000038 4444ee00 4444447c 000000ee     8.....DD|DDD....
    33e8:	10107c00 10101010 0000007c 08083c00     .|......|....<..
    33f8:	48484808 00000030 4844ee00 44487050     .HHH0.....DHPpHD
    3408:	000000e6 20207000 24242020 0000007c     .....p    $$|...
    3418:	6c6cee00 44445454 000000ee 6464ee00     ..llTTDD......dd
    3428:	4c545454 000000ec 44443800 44444444     TTTL.....8DDDDDD
    3438:	00000038 24247800 20203824 00000070     8....x$$$8  p...
    3448:	44443800 44444444 00001c38 4444f800     .8DDDDDD8.....DD
    3458:	44487844 000000e2 404c3400 64040438     DxHD.....4L@8..d
    3468:	00000058 1092fe00 10101010 00000038     X...........8...
    3478:	4444ee00 44444444 00000038 4444ee00     ..DDDDDD8.....DD
    3488:	10282828 00000010 4444ee00 54545454     (((.......DDTTTT
    3498:	00000028 2844c600 44281010 000000c6     (.....D(..(D....
    34a8:	2844ee00 10101028 00000038 08447c00     ..D((...8....|D.
    34b8:	44201010 0000007c 20203800 20202020     .. D|....8      
    34c8:	00382020 20204000 08101020 00000808       8..@   .......
    34d8:	08083800 08080808 00380808 28101000     .8........8....(
    34e8:	00000044 00000000 00000000 00000000     D...............
    34f8:	fe000000 00081000 00000000 00000000     ................
    3508:	38000000 44443c44 0000003e 5840c000     ...8D<DD>.....@X
    3518:	44444464 000000f8 3c000000 44404044     dDDD.......<D@@D
    3528:	00000038 34040c00 4444444c 0000003e     8......4LDDD>...
    3538:	38000000 40407c44 0000003c 7c201c00     ...8D|@@<..... |
    3548:	20202020 0000007c 36000000 4444444c         |......6LDDD
    3558:	0038043c 5840c000 44444464 000000ee     <.8...@XdDDD....
    3568:	70001000 10101010 0000007c 78001000     ...p....|......x
    3578:	08080808 00700808 5c40c000 48507048     ......p...@\HpPH
    3588:	000000dc 10103000 10101010 0000007c     .....0......|...
    3598:	e8000000 54545454 000000fe d8000000     ....TTTT........
    35a8:	44444464 000000ee 38000000 44444444     dDDD.......8DDDD
    35b8:	00000038 d8000000 44444464 00e04078     8.......dDDDx@..
    35c8:	36000000 4444444c 000e043c 6c000000     ...6LDDD<......l
    35d8:	20202030 0000007c 3c000000 44043844     0   |......<D8.D
    35e8:	00000078 7c200000 22202020 0000001c     x..... |   "....
    35f8:	cc000000 4c444444 00000036 ee000000     ....DDDL6.......
    3608:	28284444 00000010 ee000000 54545444     DD((........DTTT
    3618:	00000028 cc000000 48303048 000000cc     (.......H00H....
    3628:	ee000000 18282444 00781010 7c000000     ....D$(...x....|
    3638:	44201048 0000007c 10100800 10201010     H. D|......... .
    3648:	00081010 10101000 10101010 00001010     ................
    3658:	10102000 10081010 00201010 00000000     . ........ .....
    3668:	00582400 00000000                       .$X.....

00003670 <Font16_Table>:
	...
    3690:	000c0000 000c000c 000c000c 000c000c     ................
    36a0:	0000000c 0000000c 00000000 00000000     ................
    36b0:	00000000 c01dc01d 80088008 00008008     ................
	...
    36d0:	800d0000 800d800d c03f800d c03f001b     ..........?...?.
    36e0:	001b001b 001b001b 00000000 00000000     ................
    36f0:	801f0004 80318031 001e0038 8003000f     ....1.1.8.......
    3700:	80318031 0004003f 00000004 00000000     1.1.?...........
    3710:	00180000 00240024 8007c018 8031001e     ....$.$.......1.
    3720:	40024002 00008001 00000000 00000000     .@.@............
    3730:	00000000 0018000f 00180018 801d000c     ................
    3740:	00330037 0000801d 00000000 00000000     7.3.............
    3750:	00000000 00070007 00020002 00000002     ................
	...
    3770:	00030000 00060003 000c000e 000c000c     ................
    3780:	000e000c 00030006 00000003 00000000     ................
    3790:	00180000 000c0018 00060006 00060006     ................
    37a0:	00060006 001c000c 00000018 00000000     ................
    37b0:	00060000 c03f0006 000fc03f 8019801f     ......?.?.......
	...
    37d4:	00040000 00040004 0004803f 00040004     ........?.......
	...
    3800:	00060000 000c0004 00080008 00000000     ................
	...
    381c:	0000803f 00000000 00000000 00000000     ?...............
	...
    3840:	000c0000 0000000c 00000000 00000000     ................
    3850:	c000c000 80018001 00030003 000c0006     ................
    3860:	0018000c 00300018 00000030 00000000     ......0.0.......
    3870:	000e0000 8031001b 80318031 80318031     ......1.1.1.1.1.
    3880:	001b8031 0000000e 00000000 00000000     1...............
    3890:	00060000 0006003e 00060006 00060006     ....>...........
    38a0:	00060006 0000c03f 00000000 00000000     ....?...........
    38b0:	000f0000 80318019 00038031 000c0006     ......1.1.......
    38c0:	00300018 0000803f 00000000 00000000     ..0.?...........
    38d0:	003f0000 80018061 001f0003 80018003     ..?.a...........
    38e0:	80618001 0000003f 00000000 00000000     ..a.?...........
    38f0:	00070000 000f0007 001b000b 00330013     ..............3.
    3900:	0003803f 0000800f 00000000 00000000     ?...............
    3910:	801f0000 00180018 001f0018 80018011     ................
    3920:	80218001 0000001f 00000000 00000000     ..!.............
    3930:	80070000 0018001c 00370030 80318039     ........0.7.9.1.
    3940:	80198031 0000000f 00000000 00000000     1...............
    3950:	007f0000 00030043 00060006 00060006     ....C...........
    3960:	000c000c 0000000c 00000000 00000000     ................
    3970:	001f0000 80318031 001f8031 80318031     ....1.1.1...1.1.
    3980:	80318031 0000001f 00000000 00000000     1.1.............
    3990:	001e0000 80310033 80338031 8001801d     ....3.1.1.3.....
    39a0:	00070003 0000003c 00000000 00000000     ....<...........
	...
    39b8:	000c000c 00000000 000c0000 0000000c     ................
	...
    39d8:	00030003 00000000 00060000 00080004     ................
    39e8:	00000008 00000000 00000000 0003c000     ................
    39f8:	00180004 00180060 00030004 0000c000     ....`...........
	...
    3a18:	c07f0000 c07f0000 00000000 00000000     ................
	...
    3a34:	00180060 00030004 0003c000 00180004     `...............
    3a44:	00000060 00000000 00000000 00000000     `...............
    3a54:	8031001f 80018031 000c0007 0000000c     ..1.1...........
    3a64:	0000000c 00000000 00000000 000e0000     ................
    3a74:	00210011 00270021 00290029 00200027     ..!.!.'.).).'. .
    3a84:	000e0011 00000000 00000000 00000000     ................
    3a94:	000f003f 80190009 801f8019 c030c030     ?...........0.0.
    3aa4:	0000e079 00000000 00000000 00000000     y...............
    3ab4:	8031007f 80318031 8031003f 80318031     ..1.1.1.?.1.1.1.
    3ac4:	0000007f 00000000 00000000 00000000     ................
    3ad4:	c030401f 00604060 00600060 80304060     .@0.`@`.`.`.`@0.
    3ae4:	0000001f 00000000 00000000 00000000     ................
    3af4:	8031007f c030c030 c030c030 8031c030     ..1.0.0.0.0.0.1.
    3b04:	0000007f 00000000 00000000 00000000     ................
    3b14:	8030807f 00328030 0032003e 80308030     ..0.0.2.>.2.0.0.
    3b24:	0000807f 00000000 00000000 00000000     ................
    3b34:	4030c07f 00324030 0032003e 00300030     ..0@0@2.>.2.0.0.
    3b44:	0000007c 00000000 00000000 00000000     |...............
    3b54:	8031801e 00608060 c0670060 80318061     ..1.`.`.`.g.a.1.
    3b64:	0000001f 00000000 00000000 00000000     ................
    3b74:	8031c07b 80318031 8031803f 80318031     {.1.1.1.?.1.1.1.
    3b84:	0000c07b 00000000 00000000 00000000     {...............
    3b94:	0006c03f 00060006 00060006 00060006     ?...............
    3ba4:	0000c03f 00000000 00000000 00000000     ?...............
    3bb4:	0003c01f 00030003 00630003 00630063     ..........c.c.c.
    3bc4:	0000003e 00000000 00000000 00000000     >...............
    3bd4:	8031c07b 00360033 003e003c 80310033     {.1.3.6.<.>.3.1.
    3be4:	0000c079 00000000 00000000 00000000     y...............
    3bf4:	0018007e 00180018 40180018 40184018     ~..........@.@.@
    3c04:	0000c07f 00000000 00000000 00000000     ................
    3c14:	c060e0e0 c07bc071 c06ec06a c060c064     ..`.q.{.j.n.d.`.
    3c24:	0000e0fb 00000000 00000000 00000000     ................
    3c34:	8031c073 803d8039 80378035 80318033     s.1.9.=.5.7.3.1.
    3c44:	00008079 00000000 00000000 00000000     y...............
    3c54:	8031001f c060c060 c060c060 8031c060     ..1.`.`.`.`.`.1.
    3c64:	0000001f 00000000 00000000 00000000     ................
    3c74:	8031007f 80318031 003f8031 00300030     ..1.1.1.1.?.0.0.
    3c84:	0000007e 00000000 00000000 00000000     ~...............
    3c94:	8031001f c060c060 c060c060 8031c060     ..1.`.`.`.`.`.1.
    3ca4:	c00c001f 0000801f 00000000 00000000     ................
    3cb4:	8031007f 80318031 0033003e 80318031     ..1.1.1.>.3.1.1.
    3cc4:	0000e07c 00000000 00000000 00000000     |...............
    3cd4:	8031801f 00388031 8003001f 80318031     ..1.1.8.....1.1.
    3ce4:	0000003f 00000000 00000000 00000000     ?...............
    3cf4:	804c807f 804c804c 000c000c 000c000c     ..L.L.L.........
    3d04:	0000003f 00000000 00000000 00000000     ?...............
    3d14:	8031c07b 80318031 80318031 80318031     {.1.1.1.1.1.1.1.
    3d24:	0000001f 00000000 00000000 00000000     ................
    3d34:	8031c07b 001b8031 001b001b 000e000a     {.1.1...........
    3d44:	0000000e 00000000 00000000 00000000     ................
    3d54:	c060e0fb c06ec064 802ac06e 803b803b     ..`.d.n.n.*.;.;.
    3d64:	00008031 00000000 00000000 00000000     1...............
    3d74:	8031c07b 000e001b 000e000e 8031001b     {.1...........1.
    3d84:	0000c07b 00000000 00000000 00000000     {...............
    3d94:	c030e079 000f8019 00060006 00060006     y.0.............
    3da4:	0000801f 00000000 00000000 00000000     ................
    3db4:	8021803f 00060023 000c0004 80308018     ?.!.#.........0.
    3dc4:	0000803f 00000000 00000000 80070000     ?...............
    3dd4:	00060006 00060006 00060006 00060006     ................
    3de4:	00060006 00008007 00000000 00300030     ............0.0.
    3df4:	00180018 000c000c 00030006 80010003     ................
    3e04:	c0008001 0000c000 00000000 001e0000     ................
    3e14:	00060006 00060006 00060006 00060006     ................
    3e24:	00060006 0000001e 00000000 000a0004     ................
    3e34:	0011000a 80208020 00000000 00000000     .... . .........
	...
    3e6c:	e0ff0000 00040008 00000002 00000000     ................
	...
    3e98:	8001001f 801f8001 80338031 0000c01d     ........1.3.....
	...
    3eb0:	00700000 00300030 80390037 c030c030     ..p.0.0.7.9.0.0.
    3ec0:	8039c030 00000077 00000000 00000000     0.9.w...........
	...
    3ed8:	8031801e 00608060 80318060 0000001f     ..1.`.`.`.1.....
	...
    3ef0:	80030000 80018001 8033801d 80618061     ..........3.a.a.
    3f00:	80338061 0000c01d 00000000 00000000     a.3.............
	...
    3f18:	8031001f c07fc060 c0300060 0000801f     ..1.`...`.0.....
	...
    3f30:	e0070000 000c000c 000c803f 000c000c     ........?.......
    3f40:	000c000c 0000803f 00000000 00000000     ....?...........
	...
    3f58:	8033c01d 80618061 80338061 8001801d     ..3.a.a.a.3.....
    3f68:	001f8001 00000000 00700000 00300030     ..........p.0.0.
    3f78:	80390037 80318031 80318031 0000c07b     7.9.1.1.1.1.{...
	...
    3f90:	00060000 00000006 0006001e 00060006     ................
    3fa0:	00060006 0000c03f 00000000 00000000     ....?...........
    3fb0:	00060000 00000006 0003003f 00030003     ........?.......
    3fc0:	00030003 00030003 003e0003 00000000     ..........>.....
    3fd0:	00700000 00300030 00368037 003c003c     ..p.0.0.7.6.<.<.
    3fe0:	00330036 0000c077 00000000 00000000     6.3.w...........
    3ff0:	001e0000 00060006 00060006 00060006     ................
    4000:	00060006 0000c03f 00000000 00000000     ....?...........
	...
    4018:	c036807f c036c036 c036c036 0000e076     ..6.6.6.6.6.v...
	...
    4038:	80390077 80318031 80318031 0000c07b     w.9.1.1.1.1.{...
	...
    4058:	8031001f c060c060 8031c060 0000001f     ..1.`.`.`.1.....
	...
    4078:	80390077 c030c030 8039c030 00300037     w.9.0.0.0.9.7.0.
    4088:	007c0030 00000000 00000000 00000000     0.|.............
    4098:	8033c01d 80618061 80338061 8001801d     ..3.a.a.a.3.....
    40a8:	c0078001 00000000 00000000 00000000     ................
    40b8:	c01c807b 00180018 00180018 0000007f     {...............
	...
    40d8:	8031801f 001f003c 80318003 0000003f     ..1.<.....1.?...
	...
    40f0:	00180000 00180018 0018007f 00180018     ................
    4100:	80180018 0000000f 00000000 00000000     ................
	...
    4118:	80318073 80318031 80338031 0000c01d     s.1.1.1.1.3.....
	...
    4138:	8031c07b 001b8031 000e001b 0000000e     {.1.1...........
	...
    4158:	c060e0f1 c06ec064 803b803b 00008031     ..`.d.n.;.;.1...
	...
    4178:	001bc07b 000e000e 001b000e 0000c07b     {...........{...
	...
    4198:	c030e079 80198019 000f000b 00060006     y.0.............
    41a8:	003e000c 00000000 00000000 00000000     ..>.............
    41b8:	8021803f 000e0003 80300018 0000803f     ?.!.......0.?...
	...
    41d0:	00060000 000c000c 000c000c 0018000c     ................
    41e0:	000c000c 000c000c 00000006 00000000     ................
    41f0:	00060000 00060006 00060006 00060006     ................
    4200:	00060006 00060006 00000006 00000000     ................
    4210:	000c0000 00060006 00060006 00030006     ................
    4220:	00060006 00060006 0000000c 00000000     ................
	...
    4238:	00180000 00038024 00000000 00000000     ....$...........
	...

00004250 <Font20_Table>:
	...
    4278:	00070000 00070007 00070007 00070007     ................
    4288:	00020002 00000000 00070007 00000000     ................
	...
    42a4:	e01ce01c 4008e01c 40084008 00000000     .......@.@.@....
	...
    42c8:	c00cc00c c00cc00c f03fc00c c00cf03f     ..........?.?...
    42d8:	f03fc00c c00cf03f c00cc00c c00cc00c     ..?.?...........
	...
    42f0:	00030003 e00fe007 00186018 c00f001f     .........`......
    4300:	6018e000 c01f6018 0003801f 00030003     ...`.`..........
	...
    4318:	001c0000 00220022 601c0022 800fe001     ...."."."..`....
    4328:	c031003c 20022002 c0012002 00000000     <.1.. . . ......
	...
    4344:	e0030000 000ce00f 0006000c f01f300f     .............0..
    4354:	c018e019 b007f01f 00000000 00000000     ................
	...
    436c:	80038003 00018003 00010001 00000000     ................
	...
    4390:	c0000000 8001c000 80018001 00030003     ................
    43a0:	00030003 00030003 80018001 c0008001     ................
    43b0:	0000c000 00000000 000c0000 0006000c     ................
    43c0:	00060006 00030003 00030003 00030003     ................
    43d0:	00060006 000c0006 0000000c 00000000     ................
    43e0:	00030000 00030003 e01f601b 80078007     .........`......
    43f0:	c00cc00f 00000000 00000000 00000000     ................
	...
    440c:	00030000 00030003 f03f0003 0003f03f     ..........?.?...
    441c:	00030003 00000003 00000000 00000000     ................
	...
    4444:	80030000 00030003 00060006 00000004     ................
	...
    4464:	e03f0000 0000e03f 00000000 00000000     ..?.?...........
	...
    4494:	80030000 80038003 00000000 00000000     ................
    44a4:	00000000 60006000 c000c000 8001c000     .....`.`........
    44b4:	00038001 00060003 000c0006 000c000c     ................
    44c4:	00180018 00000000 00000000 800f0000     ................
    44d4:	c018c01f 60306030 60306030 60306030     ....0`0`0`0`0`0`
    44e4:	c0186030 800fc01f 00000000 00000000     0`..............
    44f4:	00000000 00030000 001f001f 00030003     ................
    4504:	00030003 00030003 00030003 e01fe01f     ................
	...
    4520:	800f0000 e038c01f 60006030 8001c000     ......8.0`.`....
    4530:	00060003 0018000c e03fe03f 00000000     ........?.?.....
	...
    4548:	800f0000 e030c03f e0006000 c007c007     ....?.0..`......
    4558:	6000e000 e0606000 803fc07f 00000000     ...`.``...?.....
	...
    4570:	c0010000 c003c003 c00cc006 c018c00c     ................
    4580:	e03fc030 c000e03f e003e003 00000000     0.?.?...........
	...
    4598:	c01f0000 0018c01f 801f0018 e018c01f     ................
    45a8:	60006000 e0306000 801fc03f 00000000     .`.`.`0.?.......
	...
    45c0:	e0030000 001ee00f 00380018 c03f8037     ..........8.7.?.
    45d0:	6030e038 e0186030 8007c01f 00000000     8.0`0`..........
	...
    45e8:	e03f0000 6030e03f c0006000 c000c000     ..?.?.0`.`......
    45f8:	80018001 00038001 00030003 00000000     ................
	...
    4610:	800f0000 e038c01f e0386030 c01fc01f     ......8.0`8.....
    4620:	6030e038 e0386030 800fc01f 00000000     8.0`0`8.........
	...
    4638:	000f0000 c038c01f 60306030 e01fe038     ......8.0`0`8...
    4648:	e000600f c003c000 003e803f 00000000     .`......?.>.....
	...
    4668:	80030000 80038003 00000000 80030000     ................
    4678:	80038003 00000000 00000000 00000000     ................
	...
    4690:	c0010000 c001c001 00000000 80030000     ................
    46a0:	00060003 00040006 00000000 00000000     ................
    46b0:	00000000 30000000 c003f000 001c0007     .......0........
    46c0:	001c0078 c0030007 3000f000 00000000     x..........0....
	...
    46e0:	f07f0000 0000f07f f07f0000 0000f07f     ................
	...
    4704:	00300000 000f003c e0008003 e0007800     ..0.<........x..
    4714:	000f8003 0030003c 00000000 00000000     ....<.0.........
	...
    472c:	c01f800f 60186018 c0016000 00038003     .....`.`.`......
    473c:	00000000 00070007 00000000 00000000     ................
    474c:	00000000 80030000 4008800c 40104010     ...........@.@.@
    475c:	4012c011 40124012 0010c011 40080008     ...@.@.@.......@
    476c:	00008007 00000000 00000000 00000000     ................
    477c:	801f801f c0068003 c00cc006 e01f600c     .............`..
    478c:	3030e01f 78787878 00000000 00000000     ..00xxxx........
	...
    47a4:	c03f803f 60186018 c01fe018 7018e01f     ?.?..`.`.......p
    47b4:	30183018 e03ff03f 00000000 00000000     .0.0?.?.........
	...
    47cc:	f00fb007 3038701c 00300030 00300030     .....p800.0.0.0.
    47dc:	701c3038 c007e00f 00000000 00000000     80.p............
	...
    47f4:	c07f807f 7030e030 30303030 30303030     ....0.0p00000000
    4804:	e0307030 807fc07f 00000000 00000000     0p0.............
	...
    481c:	f03ff03f 30183018 801f8019 8019801f     ?.?..0.0........
    482c:	30183018 f03ff03f 00000000 00000000     .0.0?.?.........
	...
    4844:	f03ff03f 30183018 801f8019 8019801f     ?.?..0.0........
    4854:	00180018 003f003f 00000000 00000000     ....?.?.........
	...
    486c:	f01fb007 30307018 00300030 f831f831     .....p000.0.1.1.
    487c:	30183030 c007f01f 00000000 00000000     00.0............
	...
    4894:	f03cf03c 60186018 e01f6018 6018e01f     <.<..`.`.`.....`
    48a4:	60186018 f03cf03c 00000000 00000000     .`.`<.<.........
	...
    48bc:	e01fe01f 00030003 00030003 00030003     ................
    48cc:	00030003 e01fe01f 00000000 00000000     ................
	...
    48e4:	f803f803 60006000 60006000 60306030     .....`.`.`.`0`0`
    48f4:	e0306030 800fc03f 00000000 00000000     0`0.?...........
	...
    490c:	f83ef83e 8019e018 001f001b c018801d     >.>.............
    491c:	6018c018 383e783e 00000000 00000000     ...`>x>8........
	...
    4934:	003f003f 000c000c 000c000c 300c000c     ?.?............0
    4944:	300c300c f03ff03f 00000000 00000000     .0.0?.?.........
	...
    495c:	78787878 f03c7038 b037b034 3033b037     xxxx8p<.4.7.7.30
    496c:	30303033 f87cf87c 00000000 00000000     3000|.|.........
	...
    4984:	f03df039 601e601c 601b601e e019601b     9.=..`.`.`.`.`..
    4994:	e018e019 603ee03e 00000000 00000000     ....>.>`........
	...
    49ac:	c00f8007 7038e01c 30303030 30303030     ......8p00000000
    49bc:	e01c7038 8007c00f 00000000 00000000     8p..............
	...
    49d4:	e03fc03f 30187018 70183018 c01fe01f     ?.?..p.0.0.p....
    49e4:	00180018 003f003f 00000000 00000000     ....?.?.........
	...
    49fc:	c00f8007 7038e01c 30303030 30303030     ......8p00000000
    4a0c:	e01c7038 8007c00f f00fb007 0000e00c     8p..............
	...
    4a24:	e03fc03f 30187018 e01f7018 e018c01f     ?.?..p.0.p......
    4a34:	70186018 183e383e 00000000 00000000     .`.p>8>.........
	...
    4a4c:	f01fb00f 30307038 801f0038 7000e007     ....8p008......p
    4a5c:	70383030 c037e03f 00000000 00000000     008p?.7.........
	...
    4a74:	f03ff03f 30333033 00033033 00030003     ?.?.303030......
    4a84:	00030003 c00fc00f 00000000 00000000     ................
	...
    4a9c:	f03cf03c 60186018 60186018 60186018     <.<..`.`.`.`.`.`
    4aac:	e01c6018 8007c00f 00000000 00000000     .`..............
	...
    4ac4:	f078f078 60306030 c018c018 800d800d     x.x.0`0`........
    4ad4:	0007800d 00070007 00000000 00000000     ................
	...
    4aec:	7c7c7c7c 98331830 98339833 d016d836     ||||0.3.3.3.6...
    4afc:	701c701c 3018701c 00000000 00000000     .p.p.p.0........
	...
    4b14:	f078f078 c0186030 0007800d 800d0007     x.x.0`..........
    4b24:	6030c018 f078f078 00000000 00000000     ..0`x.x.........
	...
    4b3c:	f03cf03c c00c6018 80078007 00030003     <.<..`..........
    4b4c:	00030003 c00fc00f 00000000 00000000     ................
	...
    4b64:	e01fe01f c0186018 00038001 00060003     .....`..........
    4b74:	6018600c e01fe01f 00000000 00000000     .`.`............
    4b84:	00000000 c0030000 0003c003 00030003     ................
    4b94:	00030003 00030003 00030003 00030003     ................
    4ba4:	c0030003 0000c003 00000000 00180018     ................
    4bb4:	000c000c 0006000c 00030006 80010003     ................
    4bc4:	c0008001 c000c000 60006000 00000000     .........`.`....
    4bd4:	00000000 000f0000 0003000f 00030003     ................
    4be4:	00030003 00030003 00030003 00030003     ................
    4bf4:	000f0003 0000000f 00000000 00020000     ................
    4c04:	800d0007 6030c018 00002020 00000000     ......0`  ......
	...
    4c4c:	fcfffcff 00040000 80000003 00000000     ................
	...
    4c80:	c00f0000 6000e01f e01fe00f e0306038     .......`....8`0.
    4c90:	701ff03f 00000000 00000000 00000000     ?..p............
    4ca0:	00700000 00300070 80370030 6038e03f     ..p.p.0.0.7.?.8`
    4cb0:	30303030 60383030 8077e07f 00000000     0000008`..w.....
	...
    4cd0:	b0070000 3018f01f 00303030 30380030     .......0000.0.80
    4ce0:	c00ff01f 00000000 00000000 00000000     ................
    4cf0:	70000000 30007000 b0073000 7018f01f     ...p.p.0.0.....p
    4d00:	30303030 70383030 b807f81f 00000000     0000008p........
	...
    4d20:	80070000 6018e01f f03ff03f 30180030     .......`?.?.0..0
    4d30:	c007f01f 00000000 00000000 00000000     ................
    4d40:	f0030000 0006f007 e01f0006 0006e01f     ................
    4d50:	00060006 00060006 e01fe01f 00000000     ................
	...
    4d70:	b8070000 7018f81f 30303030 70183030     .......p000000.p
    4d80:	b007f01f 70003000 c00fe00f 00000000     .....0.p........
    4d90:	00380000 00180038 c01b0018 601ce01f     ..8.8..........`
    4da0:	60186018 60186018 f03cf03c 00000000     .`.`.`.`<.<.....
	...
    4db8:	00030000 00000003 001f0000 0003001f     ................
    4dc8:	00030003 00030003 e01fe01f 00000000     ................
	...
    4de0:	00030000 00000003 c01f0000 c000c01f     ................
    4df0:	c000c000 c000c000 c000c000 c001c000     ................
    4e00:	003f803f 00000000 00380000 00180038     ?.?.......8.8...
    4e10:	e01b0018 001be01b 001e001e 8019001b     ................
    4e20:	f039f039 00000000 00000000 00000000     9.9.............
    4e30:	001f0000 0003001f 00030003 00030003     ................
    4e40:	00030003 00030003 e01fe01f 00000000     ................
	...
    4e60:	e07e0000 3033f07f 30333033 30333033     ..~...3030303030
    4e70:	b87bb87b 00000000 00000000 00000000     {.{.............
	...
    4e88:	c03b0000 601ce03f 60186018 60186018     ..;.?..`.`.`.`.`
    4e98:	f03cf03c 00000000 00000000 00000000     <.<.............
	...
    4eb0:	80070000 6018e01f 30303030 60183030     .......`000000.`
    4ec0:	8007e01f 00000000 00000000 00000000     ................
	...
    4ed8:	80770000 6038e07f 30303030 60383030     ..w...8`0000008`
    4ee8:	8037e03f 00300030 007c007c 00000000     ?.7.0.0.|.|.....
	...
    4f00:	b8070000 7018f81f 30303030 70183030     .......p000000.p
    4f10:	b007f01f 30003000 f800f800 00000000     .....0.0........
	...
    4f28:	e03c0000 300ff03d 000c000e 000c000c     ..<.=..0........
    4f38:	c03fc03f 00000000 00000000 00000000     ?.?.............
	...
    4f50:	e0070000 6018e01f c00f001e 6018e001     .......`.......`
    4f60:	801fe01f 00000000 00000000 00000000     ................
    4f70:	00000000 000c000c e03f000c 000ce03f     ..........?.?...
    4f80:	000c000c 300c000c c007f00f 00000000     .......0........
	...
    4fa0:	e0380000 6018e038 60186018 e0186018     ..8.8..`.`.`.`..
    4fb0:	700ff01f 00000000 00000000 00000000     ...p............
	...
    4fc8:	f0780000 6030f078 c018c018 800d800d     ..x.x.0`........
    4fd8:	00070007 00000000 00000000 00000000     ................
	...
    4ff0:	f0780000 6032f078 e0376032 c01dc01d     ..x.x.2`2`7.....
    5000:	c018c018 00000000 00000000 00000000     ................
	...
    5018:	f03c0000 c00cf03c 00038007 c00c8007     ..<.<...........
    5028:	f03cf03c 00000000 00000000 00000000     <.<.............
	...
    5040:	f0780000 6030f078 c018c018 800f800d     ..x.x.0`........
    5050:	00060007 000c0006 007f007f 00000000     ................
	...
    5068:	e01f0000 c018e01f 00038001 600c0006     ...............`
    5078:	e01fe01f 00000000 00000000 00000000     ................
    5088:	c0010000 0003c003 00030003 00030003     ................
    5098:	000e0007 00030007 00030003 c0030003     ................
    50a8:	0000c001 00000000 00030000 00030003     ................
    50b8:	00030003 00030003 00030003 00030003     ................
    50c8:	00030003 00030003 00000003 00000000     ................
    50d8:	001c0000 0006001e 00060006 00060006     ................
    50e8:	80030007 00060007 00060006 001e0006     ................
    50f8:	0000001c 00000000 00000000 00000000     ................
    5108:	00000000 303f000e e001f033 00000000     ......?03.......
	...

00005128 <Font24_Table>:
	...
    5174:	80030000 00800300 03008003 80030080     ................
    5184:	00800300 03008003 80030080 00000100     ................
    5194:	00000001 00000000 00800300 00008003     ................
	...
    51c0:	00700e00 0e00700e 20040070 00200400     ..p..p..p.. .. .
    51d0:	04002004 00000020 00000000 00000000     . .. ...........
	...
    5204:	60060000 00600600 06006006 60060060     ...`..`..`..`..`
    5214:	00f83f00 0600f83f c00c0060 00f83f00     .?..?...`....?..
    5224:	0c00f83f c00c00c0 00c00c00 0c00c00c     ?...............
    5234:	000000c0 00000000 00000000 00000000     ................
    5244:	00000000 01000000 80010080 00b00700     ................
    5254:	1800f00f 70180070 00001c00 0700800f     ....p..p........
    5264:	f00000e0 00301800 1c00301c e01f0070     ......0..0..p...
    5274:	00c01b00 01008001 80010080 00800100     ................
	...
    5294:	80070000 00c00f00 1800e01c 60180060     ............`..`
    52a4:	00e01c00 0700f80f f01f00e0 00380700     ..............8.
    52b4:	06001806 38070018 00f00300 0000e001     .......8........
	...
    52e4:	0700f003 600c00f0 00000c00 0600000c     .......`........
    52f4:	00070000 009c0f00 1800fc1d 701800f0     ...............p
    5304:	00fc0f00 0000dc07 00000000 00000000     ................
	...
    5328:	00800300 03008003 00010080 00000100     ................
    5338:	01000001 00000000 00000000 00000000     ................
	...
    536c:	18000000 00380000 00007000 e00000f0     ......8..p......
    537c:	00e00000 0100c001 c00100c0 00c00100     ................
    538c:	0100c001 e00000c0 00e00000 00007000     .............p..
    539c:	38000070 00180000 00000000 00000000     p..8............
	...
    53b4:	00180000 00001c00 0e00000e 00070000     ................
    53c4:	00000700 03008003 80030080 00800300     ................
    53d4:	03008003 00070080 00000700 0e00000f     ................
    53e4:	001c0000 00001800 00000000 00000000     ................
	...
    53fc:	80010000 00800100 1d008001 f81f00b8     ................
    540c:	00e00700 0300c003 600600c0 00600600     ...........`..`.
	...
    544c:	01008001 80010080 00800100 3f008001     ...............?
    545c:	fc3f00fc 00800100 01008001 80010080     ..?.............
    546c:	00800100 00000000 00000000 00000000     ................
	...
    54b0:	e0000000 00c00000 0100c001 80010080     ................
    54c0:	00000300 00000003 00000000 00000000     ................
	...
    54e8:	1f000000 f81f00f8 00000000 00000000     ................
	...
    5540:	c0030000 00c00300 0000c003 00000000     ................
	...
    5560:	00001800 38000018 00300000 00007000     .......8..0..p..
    5570:	60000060 00c00000 0100c000 80010080     `..`............
    5580:	00000300 06000003 00060000 00000e00     ................
    5590:	1c00000c 00180000 00001800 00000000     ................
	...
    55ac:	c0030000 00e00700 0c00300c 18180030     .........0..0...
    55bc:	00181800 18001818 18180018 00181800     ................
    55cc:	0c001818 300c0030 00e00700 0000c003     ....0..0........
	...
    55f4:	80000000 00800700 1d00801f 80010080     ................
    5604:	00800100 01008001 80010080 00800100     ................
    5614:	01008001 80010080 00f81f00 0000f81f     ................
	...
    563c:	c0070000 00f01f00 30003038 18300018     ........80.0..0.
    564c:	00180000 00003000 c0010060 00800300     .....0..`.......
    565c:	0c000006 00180000 00f83f00 0000f83f     .........?..?...
	...
    5684:	c0030000 00e00f00 0000700c 30000030     .........p..0..0
    5694:	00600000 0300c003 700000e0 00180000     ..`........p....
    56a4:	00001800 38180018 00f01f00 0000c00f     .......8........
	...
    56cc:	e0000000 00e00100 0300e001 60060060     ............`..`
    56dc:	00600600 0c00600c 60180060 00603000     ..`..`..`..`.0`.
    56ec:	3f00f83f 600000f8 00f80300 0000f803     ?..?...`........
	...
    5714:	f01f0000 00f01f00 18000018 00180000     ................
    5724:	00c01b00 1c00f01f 18000030 00180000     ........0.......
    5734:	00001800 30300018 00f03f00 0000c00f     ......00.?......
	...
    575c:	f8000000 00f80300 0e000007 000c0000     ................
    576c:	00001800 1f00c01b 301c00f0 00181800     ...........0....
    577c:	18001818 380c0018 00f00f00 0000e003     .......8........
	...
    57a4:	f81f0000 00f81f00 18001818 30000038     ............8..0
    57b4:	00300000 00007000 60000060 00e00000     ..0..p..`..`....
    57c4:	0000c000 c00100c0 00800100 00008001     ................
	...
    57ec:	e0070000 00f00f00 1800381c 18180018     .........8......
    57fc:	00300c00 0700e007 300c00e0 00181800     ..0........0....
    580c:	18001818 381c0018 00f00f00 0000e007     .......8........
	...
    5834:	c0070000 00f00f00 1800301c 18180018     .........0......
    5844:	00181800 0f00380c d80300f8 00180000     .....8..........
    5854:	00003000 e0000070 00c01f00 0000001f     .0..p...........
	...
    5888:	c0030000 00c00300 0000c003 00000000     ................
	...
    58a0:	c0030000 00c00300 0000c003 00000000     ................
	...
    58d0:	f0000000 00f00000 0000f000 00000000     ................
	...
    58e8:	c00100e0 00800100 03008001 00020000     ................
	...
    5914:	00001c00 f000003c 00c00300 3c00000f     ....<..........<
    5924:	00f00000 00003c00 0300000f f00000c0     .....<..........
    5934:	003c0000 00001c00 00000000 00000000     ..<.............
	...
    5964:	00fc7f00 0000fc7f 00000000 00fc7f00     ................
    5974:	0000fc7f 00000000 00000000 00000000     ................
	...
    59a4:	78000070 001e0000 00800700 0000e001     p..x............
    59b4:	1e000078 00780000 0700e001 001e0080     x.....x.........
    59c4:	00007800 00000070 00000000 00000000     .x..p...........
	...
    59e8:	00c00700 1800e00f 30180070 00301800     ........p..0..0.
    59f8:	00007000 c00300e0 00800300 00000003     .p..............
    5a08:	00000000 00000700 00000007 00000000     ................
	...
    5a2c:	e0030000 00f00700 0c00380e 78180018     .........8.....x
    5a3c:	00f81800 1900d819 98190098 00981900     ................
    5a4c:	1800f818 00180078 00000c00 0700180e     ....x...........
    5a5c:	e00300f8 00000000 00000000 00000000     ................
	...
    5a78:	00801f00 0100c01f 600300c0 00600300     ...........`..`.
    5a88:	06003006 300c0030 00f80f00 1800f81f     .0..0..0........
    5a98:	0c30000c 007ffc00 00007ffc 00000000     ..0.............
	...
    5ac0:	00e07f00 1800f07f 18180038 00181800     ........8.......
    5ad0:	1f003818 f81f00f0 001c1800 18000c18     .8..............
    5ae0:	0c18000c 00f87f00 0000f07f 00000000     ................
	...
    5b08:	00ec0300 1c00fc0f 0c18001c 000c3000     .............0..
    5b18:	30000030 00300000 00003000 18000030     0..0..0..0..0...
    5b28:	1c1c000c 00f80f00 0000f003 00000000     ................
	...
    5b50:	00c07f00 1800f07f 18180038 000c1800     ........8.......
    5b60:	18000c18 0c18000c 000c1800 18000c18     ................
    5b70:	38180018 00f07f00 0000e07f 00000000     ...8............
	...
    5b98:	00f87f00 1800f87f 18180018 00981900     ................
    5ba8:	1f008019 801f0080 00801900 18009819     ................
    5bb8:	18180018 00f87f00 0000f87f 00000000     ................
	...
    5be0:	00fc3f00 0c00fc3f 0c0c000c 00cc0c00     .?..?...........
    5bf0:	0f00c00c c00f00c0 00c00c00 0c00c00c     ................
    5c00:	000c0000 00c03f00 0000c03f 00000000     .....?..?.......
	...
    5c28:	00ec0300 1c00fc0f 0c18001c 000c3000     .............0..
    5c38:	30000030 fe300000 00fe3000 38000c30     0..0..0..0..0..8
    5c48:	1c1c000c 00fc0f00 0000f003 00000000     ................
	...
    5c70:	007e7e00 18007e7e 18180018 00181800     .~~.~~..........
    5c80:	1f001818 f81f00f8 00181800 18001818     ................
    5c90:	18180018 007e7e00 00007e7e 00000000     .....~~.~~......
	...
    5cb8:	00f81f00 0100f81f 80010080 00800100     ................
    5cc8:	01008001 80010080 00800100 01008001     ................
    5cd8:	80010080 00f81f00 0000f81f 00000000     ................
	...
    5d00:	00fe0700 0000fe07 30000030 00300000     ........0..0..0.
    5d10:	00003000 30300030 00303000 30003030     .0..0.00.00.00.0
    5d20:	60300030 00e03f00 0000800f 00000000     0.0`.?..........
	...
    5d48:	003e7f00 18003e7f 60180030 00c01800     ..>..>..0..`....
    5d58:	1b008019 c01f0080 00e01c00 18007018     .............p..
    5d68:	38180030 001f7f00 00001f7f 00000000     0..8............
	...
    5d90:	00807f00 0c00807f 000c0000 00000c00     ................
    5da0:	0c00000c 000c0000 000c0c00 0c000c0c     ................
    5db0:	0c0c000c 00fc7f00 0000fc7f 00000000     ................
	...
    5dd8:	000ff000 38001ff8 3c3c001c 003c3c00     .......8..<<.<<.
    5de8:	36006c36 cc33006c 00cc3300 30008c31     6l.6l.3..3..1..0
    5df8:	0c30000c 007ffe00 00007ffe 00000000     ..0.............
	...
    5e20:	00fe7800 1c00fe78 181e0018 00181f00     .x..x...........
    5e30:	1b00181b d8190098 00d81800 1800f818     ................
    5e40:	38180078 00187f00 0000187f 00000000     x..8............
	...
    5e68:	00c00300 1c00f00f 18180038 001c3800     ........8....8..
    5e78:	30000c30 0c30000c 000c3000 18001c38     0..0..0..0..8...
    5e88:	381c0018 00f00f00 0000c003 00000000     ...8............
	...
    5eb0:	00f03f00 0c00f83f 0c0c001c 000c0c00     .?..?...........
    5ec0:	0c000c0c f80f0018 00e00f00 0c00000c     ................
    5ed0:	000c0000 00c03f00 0000c03f 00000000     .....?..?.......
	...
    5ef8:	00c00300 1c00f00f 18180038 001c3800     ........8....8..
    5f08:	30000c30 0c30000c 000c3000 18001c38     0..0..0..0..8...
    5f18:	381c0018 00f00f00 0700c007 fc0f00cc     ...8............
    5f28:	00380c00 00000000 00000000 00000000     ..8.............
	...
    5f40:	00e07f00 1800f07f 18180038 00181800     ........8.......
    5f50:	1f003818 c01f00f0 00e01800 18007018     .8...........p..
    5f60:	38180030 001e7f00 00000e7f 00000000     0..8............
	...
    5f88:	00d80700 1c00f80f 18180038 00181800     ........8.......
    5f98:	0f00001e f00300c0 00780000 18001818     ..........x.....
    5fa8:	381c0018 00f01f00 0000e01b 00000000     ...8............
	...
    5fd0:	00fc3f00 3100fc3f 8c31008c 008c3100     .?..?..1..1..1..
    5fe0:	01008c31 80010080 00800100 01008001     1...............
    5ff0:	80010080 00f00f00 0000f00f 00000000     ................
	...
    6018:	007e7e00 18007e7e 18180018 00181800     .~~.~~..........
    6028:	18001818 18180018 00181800 18001818     ................
    6038:	300c0018 00f00f00 0000c003 00000000     ...0............
	...
    6060:	007f7f00 18007f7f 180c000c 00180c00     ................
    6070:	0600180c 30060030 00600300 03006003     ....0..0..`..`..
    6080:	c0010060 00c00100 00008000 00000000     `...............
	...
    60a8:	803ffe00 30803ffe 06300006 00863000     ..?..?.0..0..0..
    60b8:	1900cc19 6c1b00cc 006c1b00 0e007c1e     .......l..l..|..
    60c8:	380e0038 00180c00 0000180c 00000000     8..8............
	...
    60f0:	007e7e00 18007e7e 300c0018 00600600     .~~.~~.....0..`.
    6100:	0100c003 80010080 00c00300 0c006006     .............`..
    6110:	18180030 007e7e00 00007e7e 00000000     0....~~.~~......
	...
    6138:	007e7c00 18007e7c 300c0018 00600600     .|~.|~.....0..`.
    6148:	03006006 800100c0 00800100 01008001     .`..............
    6158:	80010080 00f00f00 0000f00f 00000000     ................
	...
    6180:	00f81f00 1800f81f 30180018 00601800     ...........0..`.
    6190:	0100c018 00030080 00180600 1800180c     ................
    61a0:	18300018 00f83f00 0000f83f 00000000     ..0..?..?.......
	...
    61c4:	f0010000 00f00100 01008001 80010080     ................
    61d4:	00800100 01008001 80010080 00800100     ................
    61e4:	01008001 80010080 00800100 01008001     ................
    61f4:	f0010080 00f00100 00000000 00000000     ................
    6204:	00000000 18000018 001c0000 00000c00     ................
    6214:	0600000e 00060000 00000300 01000003     ................
    6224:	80010080 00c00000 0000c000 60000060     ............`..`
    6234:	00700000 00003000 18000038 00180000     ..p..0..8.......
	...
    6254:	800f0000 00800f00 01008001 80010080     ................
    6264:	00800100 01008001 80010080 00800100     ................
    6274:	01008001 80010080 00800100 01008001     ................
    6284:	800f0080 00800f00 00000000 00000000     ................
	...
    629c:	c0010080 00e00300 06007007 180c0030     .........p..0...
    62ac:	000c1800 00000410 00000000 00000000     ................
	...
    6320:	ffff0000 00ffff00 03000000 80030000     ................
    6330:	00e00000 00006000 00000000 00000000     .....`..........
	...
    6380:	c00f0000 00e01f00 00003000 f0070030     .........0..0...
    6390:	00f01f00 30003038 70300030 00fc1f00     ....80.00.0p....
    63a0:	0000bc0f 00000000 00000000 00000000     ................
	...
    63bc:	00780000 00007800 18000018 e01b0000     ..x..x..........
    63cc:	00f81f00 1800181c 0c18000c 000c1800     ................
    63dc:	18000c18 181c000c 00f87f00 0000e07b     ............{...
	...
    6410:	ec030000 00fc0f00 38001c1c 0c30000c     ...........8..0.
    6420:	00003000 38000030 1c1c000c 00f80f00     .0..0..8........
    6430:	0000f003 00000000 00000000 00000000     ................
	...
    644c:	78000000 00780000 00001800 d8070018     ...x..x.........
    645c:	00f81f00 30003818 18300018 00183000     .....8.0..0..0..
    646c:	30001830 38180018 00fe1f00 0000de07     0..0...8........
	...
    64a0:	e0070000 00f81f00 30001818 fc3f000c     ...........0..?.
    64b0:	00fc3f00 30000030 0c180000 00fc1f00     .?..0..0........
    64c0:	0000f007 00000000 00000000 00000000     ................
	...
    64dc:	fc010000 00fc0300 06000006 f83f0000     ..............?.
    64ec:	00f83f00 06000006 00060000 00000600     .?..............
    64fc:	06000006 00060000 00f03f00 0000f03f     .........?..?...
	...
    6530:	de070000 00fe1f00 30003818 18300018     .........8.0..0.
    6540:	00183000 30001830 38180018 00f81f00     .0..0..0...8....
    6550:	0000d807 18000018 00380000 0f00f00f     ..........8.....
    6560:	000000c0 00000000 00000000 00780000     ..............x.
    6570:	00007800 18000018 e01b0000 00f01f00     .x..............
    6580:	1800381c 18180018 00181800 18001818     .8..............
    6590:	18180018 007e7e00 00007e7e 00000000     .....~~.~~......
	...
    65b4:	80010000 00800100 00000000 801f0000     ................
    65c4:	00801f00 01008001 80010080 00800100     ................
    65d4:	01008001 80010080 00fc3f00 0000fc3f     .........?..?...
	...
    65fc:	c0000000 00c00000 00000000 f01f0000     ................
    660c:	00f01f00 00003000 30000030 00300000     .....0..0..0..0.
    661c:	00003000 30000030 00300000 00003000     .0..0..0..0..0..
    662c:	30000030 00700000 1f00e01f 00000080     0..0..p.........
	...
    6644:	003c0000 00003c00 0c00000c f80c0000     ..<..<..........
    6654:	00f80c00 0d00c00c 800f0080 00000f00     ................
    6664:	0d00800f e00c00c0 007c3c00 00007c3c     .........<|.<|..
	...
    668c:	801f0000 00801f00 01008001 80010080     ................
    669c:	00800100 01008001 80010080 00800100     ................
    66ac:	01008001 80010080 00fc3f00 0000fc3f     .........?..?...
	...
    66e0:	78f70000 00fcff00 3100cc39 8c31008c     ...x....9..1..1.
    66f0:	008c3100 31008c31 8c31008c 00effd00     .1..1..1..1.....
    6700:	0000effd 00000000 00000000 00000000     ................
	...
    6728:	e07b0000 00f07f00 1800381c 18180018     ..{......8......
    6738:	00181800 18001818 18180018 007e7e00     .............~~.
    6748:	00007e7e 00000000 00000000 00000000     ~~..............
	...
    6770:	c0030000 00f00f00 3800381c 0c30001c     .........8.8..0.
    6780:	000c3000 38000c30 381c001c 00f00f00     .0..0..8...8....
    6790:	0000c003 00000000 00000000 00000000     ................
	...
    67b8:	e07b0000 00f87f00 1800181c 0c18000c     ..{.............
    67c8:	000c1800 18000c18 181c000c 00f81f00     ................
    67d8:	1800e01b 00180000 00001800 7f00007f     ................
	...
    6800:	de070000 00fe1f00 30003818 18300018     .........8.0..0.
    6810:	00183000 30001830 38180018 00f81f00     .0..0..0...8....
    6820:	0000d807 18000018 00180000 0000fe00     ................
    6830:	000000fe 00000000 00000000 00000000     ................
	...
    6848:	783e0000 00fc3e00 0700cc07 00060000     ..>x.>..........
    6858:	00000600 06000006 00060000 00f03f00     .............?..
    6868:	0000f03f 00000000 00000000 00000000     ?...............
	...
    6890:	f8070000 00f80f00 18001818 801f0018     ................
    68a0:	00f00f00 1800f800 38180018 00f01f00     ...........8....
    68b0:	0000e01f 00000000 00000000 00000000     ................
	...
    68cc:	000c0000 00000c00 0c00000c f03f0000     ..............?.
    68dc:	00f03f00 0c00000c 000c0000 00000c00     .?..............
    68ec:	0c00000c 1c0c0000 00fc0700 0000f003     ................
	...
    6920:	78780000 00787800 18001818 18180018     ..xx.xx.........
    6930:	00181800 18001818 38180018 00fe0f00     ...........8....
    6940:	0000de07 00000000 00000000 00000000     ................
	...
    6968:	3e7c0000 003e7c00 18001818 300c0018     ..|>.|>........0
    6978:	00300c00 06006006 e0070060 00c00300     ..0..`..`.......
    6988:	0000c003 00000000 00000000 00000000     ................
	...
    69b0:	3c780000 003c7800 33001831 98330098     ..x<.x<.1..3..3.
    69c0:	00b01a00 1e00f01e 601c00f0 00600c00     ...........`..`.
    69d0:	0000600c 00000000 00000000 00000000     .`..............
	...
    69f8:	7c3e0000 007c3e00 0600300c c0030060     ..>|.>|..0..`...
    6a08:	00800100 0600c003 300c0060 007c3e00     ........`..0.>|.
    6a18:	00007c3e 00000000 00000000 00000000     >|..............
	...
    6a40:	1f7e0000 001f7e00 0c000c18 180c0018     ..~..~..........
    6a50:	00300600 03003006 e0030060 00c00100     ..0..0..`.......
    6a60:	0100c000 80010080 00000300 3f00c03f     ............?..?
    6a70:	000000c0 00000000 00000000 00000000     ................
	...
    6a88:	f81f0000 00f81f00 18003018 c0000060     .........0..`...
    6a98:	00800100 06000003 180c0018 00f81f00     ................
    6aa8:	0000f81f 00000000 00000000 00000000     ................
	...
    6ac4:	e0000000 00e00100 01008001 80010080     ................
    6ad4:	00800100 01008001 80030080 00000700     ................
    6ae4:	01008003 80010080 00800100 01008001     ................
    6af4:	e0010080 00e00000 00000000 00000000     ................
	...
    6b0c:	80010000 00800100 01008001 80010080     ................
    6b1c:	00800100 01008001 80010080 00800100     ................
    6b2c:	01008001 80010080 00800100 01008001     ................
    6b3c:	80010080 00800100 00000000 00000000     ................
	...
    6b54:	00070000 00800700 01008001 80010080     ................
    6b64:	00800100 01008001 c0010080 00e00000     ................
    6b74:	0100c001 80010080 00800100 01008001     ................
    6b84:	80070080 00000700 00000000 00000000     ................
	...
    6bb0:	1f00000e b83b0018 00f03100 0000e000     ......;..1......
	...

00006be0 <Font8_Table>:
	...
    6be8:	20202020 00002000 00005050 00000000         . ..PP......
    6bf8:	50f85028 00a050f8 30603020 00206010     (P.P.P.. 0`0.` .
    6c08:	60182020 00001010 60203800 00007850       .`.....8 `Px..
    6c18:	00202020 00000000 20202010 00102020        ......     ..
    6c28:	20202040 00402020 50207020 00000000     @     @. p P....
    6c38:	f8202000 00002020 00000000 00202010     .  .  .......  .
    6c48:	70000000 00000000 00000000 00002000     ...p......... ..
    6c58:	20202010 00804040 50505020 00002050     .   @@.. PPPP ..
    6c68:	20202060 0000f820 20205020 00007040     `    ... P  @p..
    6c78:	20105020 00006010 78503010 00003810      P. .`...0Px.8..
    6c88:	10604070 00002050 50604030 00006050     p@`.P ..0@`PP`..
    6c98:	20105070 00002020 50205020 00002050     pP.   .. P PP ..
    6ca8:	30505030 00006010 00200000 00002000     0PP0.`.... .. ..
    6cb8:	00100000 00002010 c0201000 00001020     ..... .... . ...
    6cc8:	70007000 00000000 18204000 00004020     .p.p.....@ . @..
    6cd8:	20105020 00002000 58484830 00384048      P. . ..0HHXH@8.
    6ce8:	70502060 0000d888 487048f0 0000f048     ` Pp.....HpHH...
    6cf8:	40405070 00003040 484848f0 0000f048     pP@@@0...HHHH...
    6d08:	406048f8 0000f848 406048f8 0000e040     .H`@H....H`@@...
    6d18:	58404070 00003050 487848e8 0000e848     p@@XP0...HxHH...
    6d28:	20202070 00007020 50101038 00002050     p    p..8..PP ..
    6d38:	706050d8 0000d850 404040e0 0000f848     .P`pP....@@@H...
    6d48:	a8d8d8d8 0000d888 586868d8 0000e858     .........hhXX...
    6d58:	48484830 00003048 704848f0 0000e040     0HHHH0...HHp@...
    6d68:	48484830 00183048 704848f0 0000e848     0HHHH0...HHpH...
    6d78:	10205070 00007050 2020a8f8 00007020     pP .Pp....   p..
    6d88:	484848d8 00003048 504888d8 00003050     .HHHH0....HPP0..
    6d98:	a8a888d8 000050a8 202050d8 0000d850     .....P...P  P...
    6da8:	205088d8 00007020 20104878 00007848     ..P  p..xH. Hx..
    6db8:	20202030 00302020 20404080 00102020     0     0..@@   ..
    6dc8:	20202060 00602020 00502020 00000000     `     `.  P.....
    6dd8:	00000000 f8000000 00001020 00000000     ........ .......
    6de8:	10300000 00007870 487040c0 0000f048     ..0.px...@pHH...
    6df8:	40700000 00007040 48380818 00003848     ..p@@p....8HH8..
    6e08:	70700000 00003040 20702010 00007020     ..pp@0... p  p..
    6e18:	48380000 30083848 487040c0 0000e848     ..8HH8.0.@pHH...
    6e28:	20600020 00007020 10700020 70101010      .`  p.. .p....p
    6e38:	705840c0 0000d850 20202060 00007020     .@XpP...`    p..
    6e48:	a8d00000 0000a8a8 48f00000 0000c848     ...........HH...
    6e58:	48300000 00003048 48f00000 e0407048     ..0HH0.....HHp@.
    6e68:	48380000 18083848 20780000 00007020     ..8HH8....x  p..
    6e78:	20300000 00006010 40f04000 00003048     ..0 .`...@.@H0..
    6e88:	48d80000 00003848 48c80000 00003030     ...HH8.....H00..
    6e98:	a8d80000 000050a8 30480000 00004830     .....P....H00H..
    6ea8:	50d80000 60202050 50780000 00007828     ...PP  `..xP(x..
    6eb8:	60202010 00102020 20202020 00202020     .  `  ..       .
    6ec8:	30202040 00402020 28000000 00000050     @  0  @....(P...
    6ed8:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    6ee8:	00632e6f 682f2e2e 732f6c61 682f6372     o.c.../hal/src/h
    6ef8:	735f6c61 6d5f6970 6e79735f 00632e63     al_spi_m_sync.c.
    6f08:	682f2e2e 732f6c61 682f6372 755f6c61     ../hal/src/hal_u
    6f18:	74726173 6e79735f 00632e63 682f2e2e     sart_sync.c.../h
    6f28:	732f6c70 6f637265 70682f6d 65735f6c     pl/sercom/hpl_se
    6f38:	6d6f6372 0000632e                       rcom.c..

00006f40 <USB_ICON>:
	...
    6f68:	3c000000 00000000 00000000 00000000     ...<............
	...
    6f88:	00003f00 00000000 00000000 00000000     .?..............
	...
    6fa4:	3f000000 000000e0 00000000 00000000     ...?............
	...
    6fc4:	00fc3f00 00000000 00000000 00000000     .?..............
	...
    6fe0:	3f000000 000080ff 00000000 00000000     ...?............
	...
    7000:	e0ff3f00 00000000 00000000 00000000     .?..............
	...
    701c:	3f000000 0000feff 00000000 00000000     ...?............
	...
    703c:	ffff3f00 00000080 00000000 00000000     .?..............
	...
    7058:	3f000000 00f0ffff 00000000 00000000     ...?............
	...
    7078:	ffff3f00 000000fe 00000000 00000000     .?..............
	...
    7094:	3f000000 00feffff 00000000 00000000     ...?............
	...
    70b4:	ffff3f00 000000fe 00000000 00000000     .?..............
	...
    70d0:	3f000000 00feffff 00000000 00000000     ...?............
	...
    70f0:	ffff3f00 000000fe 00000000 00000000     .?..............
	...
    710c:	3f000000 00feffff 00000000 00000000     ...?............
	...
    712c:	ffff3f00 000000fe 00000000 00000000     .?..............
	...
    7148:	3f000000 00feffff 00000000 00000000     ...?............
	...
    7168:	ffff3f00 000000fe 00000000 00000000     .?..............
	...
    7184:	3f000000 00feffff 00000000 00000000     ...?............
	...
    71a4:	ffffff03 000000fe 00000000 00000000     ................
	...
    71c0:	ffff0f00 e0ffffff 00000000 00000000     ................
	...
    71dc:	7f000000 ffffffff 0000f8ff 00000000     ................
	...
    71fc:	ffffff03 ffffffff 00000000 00000000     ................
	...
    7218:	ff3f0000 ffffffff 00c0ffff 00000000     ..?.............
	...
    7238:	ffffffff ffffffff 000000f0 00000000     ................
	...
    7254:	ffff0100 ffffffff 00fcffff 00000000     ................
	...
    7270:	07000000 ffffffff ffffffff 000000ff     ................
	...
    7290:	ffff1f00 ffffffff 80ffffff 00000000     ................
	...
    72ac:	7f000000 ffffffff ffffffff 0000e0ff     ................
	...
    72cc:	ffffff00 ffffffff f0ffffff 00000000     ................
	...
    72e8:	ff010000 ffffffff ffffffff 0000fcff     ................
	...
    7308:	ffffff07 ffffffff feffffff 00000000     ................
	...
    7324:	ff0f0000 ffffffff ffffffff 0000ffff     ................
	...
    7344:	ffffff0f ffffffff ffffffff 00000080     ................
	...
    7360:	ff3f0000 ffffffff ffffffff 00e0ffff     ..?.............
	...
    7380:	ffffff3f ffffffff ffffffff 000000f0     ?...............
	...
    739c:	ff7f0000 ffffffff ffffffff 00f8ffff     ................
	...
    73bc:	ffffffff ffffffff ffffffff 000000fc     ................
	...
    73d8:	ffff0100 00fcffff ffffff7f 00feffff     ................
	...
    73f4:	01000000 ffffffff ff0700e0 ffffffff     ................
    7404:	000000ff 00000000 00000000 00000000     ................
    7414:	ffff0300 0080ffff ffff3f00 80ffffff     .........?......
	...
    7430:	03000000 ffffffff 01000000 ffffffff     ................
    7440:	0000c0ff 00000000 00000000 00000000     ................
    7450:	ffff0700 0000feff ff1f0000 c0ffffff     ................
	...
    746c:	0f000000 fcffffff 00000000 ffffff00     ................
    747c:	0000e0ff 00000000 00000000 00000000     ................
    748c:	ffff0f00 0000f8ff 0f000000 f0ffffff     ................
	...
    74a8:	0f000000 f0ffffff 00000000 ffff0000     ................
    74b8:	0000f8ff 00000000 00000000 00000000     ................
    74c8:	ffff1f00 0000e0ff 00000000 f8ffff03     ................
	...
    74e4:	1f000000 e0ffffff 00000000 ff000000     ................
    74f4:	0000fcff 00000000 00000000 00000000     ................
    7504:	ffff3f00 0000c0ff 00000000 feffff00     .?..............
	...
    7520:	3f000000 c0ffffff 00000000 ff000000     ...?............
    7530:	0000feff 00000000 00000000 00000000     ................
    7540:	ffff3f00 000080ff 00000000 feffff00     .?..............
	...
    755c:	7f000000 80ffffff 00000000 ff000000     ................
    756c:	0000ffff 00000000 00000000 00000000     ................
    757c:	ffff7f00 000080ff 00000000 ffffff00     ................
    758c:	00000080 00000000 00000000 7f000000     ................
    759c:	00ffffff 00000000 ff000000 0080ffff     ................
	...
    75b8:	ffff7f00 000000ff 00000000 ffffff00     ................
    75c8:	000000c0 00000000 00000000 ff000000     ................
    75d8:	00ffffff 00000000 ff000000 00c0ffff     ................
	...
    75f4:	ffffff00 000000ff 00000000 ffffff00     ................
    7604:	000000e0 00000000 00000000 ff000000     ................
    7614:	00feffff 00000000 ff000000 00e0ffff     ................
	...
    7630:	ffffff00 0f0000fe 00000080 ffffff00     ................
    7640:	000000f0 00000000 00000000 ff000000     ................
    7650:	00feffff 00fe7f00 ff000000 00f0ffff     ................
	...
    766c:	ffffff00 ff0000fe 0000e0ff ffffff00     ................
    767c:	000000f0 00000000 00000000 ff010000     ................
    768c:	00feffff ffffff01 ff000000 00f8ffff     ................
	...
    76a8:	ffffff01 ff0100fe 00fcffff ffffff00     ................
    76b8:	000000f8 00000000 00000000 ff010000     ................
    76c8:	00feffff ffffff03 ff00c0ff 00f8ffff     ................
	...
    76e4:	ffffff01 ff0300fe fcffffff ffffff00     ................
    76f4:	000000fc 00000000 00000000 ff010000     ................
    7704:	00feffff ffffff03 fff0ffff 00fcffff     ................
	...
    7720:	ffffff01 ff0300fe ffffffff ffffffff     ................
    7730:	000000fc 00000000 00000000 ff010000     ................
    7740:	00feffff ffffff03 ffffffff 00feffff     ................
	...
    775c:	ffffff01 ff0300fe ffffffff ffffffff     ................
    776c:	000000fe 00000000 00000000 ff010000     ................
    777c:	00feffff ffffff03 ffffffff 00feffff     ................
	...
    7798:	ffffff01 ff0100fe ffffffff ffffffff     ................
    77a8:	000000fe 00000000 00000000 ff010000     ................
    77b8:	00feffff ffffff01 ffffffff 00ffffff     ................
	...
    77d4:	ffffff01 ff0000fe ffffffff ffffffff     ................
    77e4:	000000ff 00000000 00000000 ff010000     ................
    77f4:	00ffffff ffff7f00 ffffffff 00ffffff     ................
	...
    7810:	ffffff01 3f0000ff ffffffff ffffffff     .......?........
    7820:	000000ff 00000000 00000000 ff010000     ................
    7830:	00ffffff ffff1f00 ffffffff 00ffffff     ................
	...
    784c:	ffffff01 0f0000ff ffffffff ffffffff     ................
    785c:	000000ff 00000000 00000000 ff010000     ................
    786c:	80ffffff ffff0300 ffffffff 00ffffff     ................
	...
    7888:	ffffff01 000080ff ffffff7f ffffffff     ................
    7898:	000000ff 00000000 00000000 ff010000     ................
    78a8:	80ffffff ff030000 ffffffff 80ffffff     ................
	...
    78c4:	ffffff01 0000c0ff ffff1f00 ffffffff     ................
    78d4:	000080ff 00000000 00000000 ff010000     ................
    78e4:	c0ffffff 01000000 ffffffff 80ffffff     ................
	...
    7900:	ffffff01 0000e0ff ff070000 ffffffff     ................
    7910:	000080ff 00000000 00000000 ff010000     ................
    7920:	e0ffffff 00000000 ffff7f00 80ffffff     ................
	...
    793c:	ffffff01 0000f0ff 07000000 ffffffff     ................
    794c:	000080ff 00000000 00000000 ff010000     ................
    795c:	f0ffffff 00000000 ff1f0000 80ffffff     ................
	...
    7978:	ffffff01 0000f8ff 00000000 ffffff01     ................
    7988:	000080ff 00000000 00000000 ff010000     ................
    7998:	fcffffff 00000000 ff000000 80ffffff     ................
	...
    79b4:	ffffff01 0000fcff 00000000 ffffff00     ................
    79c4:	000080ff 00000000 00000000 ff010000     ................
    79d4:	feffffff 00000000 ff000000 80ffffff     ................
	...
    79f0:	ffffff01 0080ffff 00000000 ffffff00     ................
    7a00:	000080ff 00000000 00000000 ff010000     ................
    7a10:	ffffffff 000000c0 ff000000 80ffffff     ................
	...
    7a2c:	ffffff01 00e0ffff 00000000 ffffff00     ................
    7a3c:	000080ff 00000000 00000000 ff010000     ................
    7a4c:	ffffffff 000000f0 ff000000 80ffffff     ................
	...
    7a68:	ffffff01 00fcffff 00000000 ffffff00     ................
    7a78:	000080ff 00000000 00000000 ff010000     ................
    7a88:	ffffffff 000080ff ff000000 80ffffff     ................
	...
    7aa4:	ffffff01 e0ffffff 00000000 ffffff00     ................
    7ab4:	000080ff 00000000 00000000 ff010000     ................
    7ac4:	ffffffff 0000fcff ff000000 80ffffff     ................
	...
    7ae0:	ffffff01 ffffffff 000000f8 ffffff00     ................
    7af0:	000080ff 00000000 00000000 ff010000     ................
    7b00:	ffffffff c0ffffff ff000000 80ffffff     ................
	...
    7b1c:	ffffff01 ffffffff 0000f8ff ffffff00     ................
    7b2c:	000080ff 00000000 00000000 ff010000     ................
    7b3c:	ffffffff ffff87ff ff0000e0 80ffffff     ................
	...
    7b58:	ffffff01 07f0ffff 00feffff ffffff00     ................
    7b68:	000080ff 00000000 00000000 ff010000     ................
    7b78:	ffffffff ffff07e0 ff00e0ff 80ffffff     ................
	...
    7b94:	ffffff01 0780ffff ffffffff ffffff80     ................
    7ba4:	000080ff 00000000 00000000 ff010000     ................
    7bb4:	feffffff ffff0700 fff8ffff 80ffffff     ................
	...
    7bd0:	ffffff01 0700fcff ffffffff ffffffff     ................
    7be0:	000080ff 00000000 00000000 ff010000     ................
    7bf0:	f8ffffff ffff0700 ffffffff 80ffffff     ................
	...
    7c0c:	ffffff01 0700f0ff 7f00feff ffffffff     ................
    7c1c:	000080ff 00000000 00000000 ff010000     ................
    7c2c:	f0ffffff f8ff0700 ffff0f00 80ffffff     ................
	...
    7c48:	ffffff01 0700e0ff 0300e0ff ffffffff     ................
    7c58:	000080ff 00000000 00000000 ff010000     ................
    7c68:	e0ffffff c0ff0700 ffff0100 80ffffff     ................
	...
    7c84:	ffffff01 0700c0ff 000080ff ffffffff     ................
    7c94:	000080ff 00000000 00000000 ff010000     ................
    7ca4:	80ffffff 00ff0700 ff7f0000 80ffffff     ................
	...
    7cc0:	ffffff01 070080ff 000000ff ffffff3f     ............?...
    7cd0:	000080ff 00000000 00000000 ff010000     ................
    7ce0:	80ffffff 00fe0700 ff1f0000 80ffffff     ................
	...
    7cfc:	ffffff01 070080ff 000000fc ffffff0f     ................
    7d0c:	000080ff 00000000 00000000 ff010000     ................
    7d1c:	00ffffff 00fc0700 ff0f0000 80ffffff     ................
	...
    7d38:	ffffff01 070000ff 000000f8 ffffff07     ................
    7d48:	000080ff 00000000 00000000 ff010000     ................
    7d58:	00ffffff 00f80700 ff070000 80ffffff     ................
	...
    7d74:	ffffff01 7f0000fe 000000f8 ffffff03     ................
    7d84:	000080ff 00000000 00000000 ff010000     ................
    7d94:	00feffff 00f0ff01 ff030000 80ffffff     ................
	...
    7db0:	ffffff01 ff0300fe 000000f0 ffffff01     ................
    7dc0:	000080ff 00000000 00000000 ff010000     ................
    7dd0:	00feffff 00e0ff07 ff010000 80ffffff     ................
	...
    7dec:	ffffff01 ff0700fe 000000e0 ffffff00     ................
    7dfc:	000080ff 00000000 00000000 ff010000     ................
    7e0c:	00feffff 00e0ff0f ff000000 80ffffff     ................
	...
    7e28:	ffffff01 ff0f00fe 000700c0 ffffff00     ................
    7e38:	000080ff 00000000 00000000 ff010000     ................
    7e48:	00feffff 00c0ff0f ff00801f 80ffffff     ................
	...
    7e64:	ffffff01 ff0f00fe c01f00c0 ffffff00     ................
    7e74:	000080ff 00000000 00000000 ff010000     ................
    7e84:	00feffff 00c0ff0f 7f00e03f 80ffffff     ........?.......
	...
    7ea0:	ffffff01 ff0f00fe e03f0080 ffff7f00     ..........?.....
    7eb0:	000080ff 00000000 00000000 ff010000     ................
    7ec0:	00feffff 0080ff0f 7f00e07f 80ffffff     ................
	...
    7edc:	ffffff01 ff0f00fe e07f0080 ffff7f00     ................
    7eec:	000080ff 00000000 00000000 ff010000     ................
    7efc:	00feffff 0000ff0f 7f00e07f 80ffffff     ................
	...
    7f18:	ffffff01 ff0700fe e0ff0000 ffff7f00     ................
    7f28:	000080ff 00000000 00000000 ff010000     ................
    7f38:	00feffff 0000fe07 7f00e0ff 80ffffff     ................
	...
    7f54:	ffffff01 fe0300fe e0ff0000 ffff7f00     ................
    7f64:	000080ff 00000000 00000000 ff010000     ................
    7f74:	00ffffff 0000fe03 7f00e0ff 80ffffff     ................
	...
    7f90:	ffffff01 f80000ff e0ff0100 ffff7f00     ................
    7fa0:	000080ff 00000000 00000000 ff010000     ................
    7fb0:	00ffffff 01000000 7f00e0ff 80ffffff     ................
	...
    7fcc:	ffffff01 000000ff e0ff0100 ffff7f00     ................
    7fdc:	000080ff 00000000 00000000 ff010000     ................
    7fec:	80ffffff 01000000 7f00c0ff 80ffffff     ................
	...
    8008:	ffffff01 000080ff 00ff0300 ffff7f00     ................
    8018:	000080ff 00000000 00000000 ff010000     ................
    8028:	80ffffff 03000000 ff0000f8 80ffffff     ................
	...
    8044:	ffffff01 0000c0ff 00f80300 ffffff00     ................
    8054:	000080ff 00000000 00000000 ff010000     ................
    8064:	c0ffffff 07000000 ff0000f8 80ffffff     ................
	...
    8080:	ffffff01 0000e0ff 00f80700 ffffff00     ................
    8090:	000080ff 00000000 00000000 ff010000     ................
    80a0:	e0ffffff 0f000000 ff0000f8 80ffffff     ................
	...
    80bc:	ffffff01 0000f0ff 00f80f00 ffffff01     ................
    80cc:	000080ff 00000000 00000000 ff010000     ................
    80dc:	f0ffffff 1f000000 ff0100f8 80ffffff     ................
	...
    80f8:	ffffff01 0000f8ff 00f81f00 ffffff03     ................
    8108:	000080ff 00000000 00000000 ff010000     ................
    8118:	fcffffff 3f000000 ff0300f8 80ffffff     .......?........
	...
    8134:	ffffff01 0000feff 00f87f00 ffffff07     ................
    8144:	000080ff 00000000 00000000 ff010000     ................
    8154:	ffffffff 7f000000 ff0700f8 80ffffff     ................
	...
    8170:	ffffff01 0080ffff 00f8ff01 ffffff0f     ................
    8180:	000080ff 00000000 00000000 ff010000     ................
    8190:	ffffffff ff0300e0 ff1f00f8 80ffffff     ................
	...
    81ac:	ffffff01 00f8ffff 00f8ff0f ffffff3f     ............?...
    81bc:	000080ff 00000000 00000000 ff010000     ................
    81cc:	ffffffff ff7f00ff ff7f00f8 80ffffff     ................
	...
    81e8:	ffffff01 ffffffff 00f8ffff ffffffff     ................
    81f8:	000080ff 00000000 00000000 ff010000     ................
    8208:	8fffffff ffffffff ffff07f8 80ffffff     ................
	...
    8224:	ffffff01 ff7f80ff 1ff8ffff ffffffff     ................
    8234:	000080ff 00000000 00000000 ff010000     ................
    8244:	80ffffff ffffff03 fffffff9 80ffffff     ................
	...
    8260:	ffffff01 3f0080ff ffffffff ffffffff     .......?........
    8270:	000080ff 00000000 00000000 ff010000     ................
    8280:	80ffffff ffff0100 ffffffff 80ffffff     ................
	...
    829c:	ffffff01 000080ff ffffff1f ffffffff     ................
    82ac:	000080ff 00000000 00000000 ff010000     ................
    82bc:	80ffffff ff010000 ffffffff 80ffffff     ................
	...
    82d8:	ffffff01 000080ff ffff0700 ffffffff     ................
    82e8:	000080ff 00000000 00000000 ff010000     ................
    82f8:	80ffffff 00000000 ffffff7f 80ffffff     ................
	...
    8314:	ffffff01 000080ff ff070000 ffffffff     ................
    8324:	000080ff 00000000 00000000 ff010000     ................
    8334:	80ffffff 00000000 ffff3f00 80ffffff     .........?......
	...
    8350:	ffffff01 000080ff 03000000 ffffffff     ................
    8360:	000080ff 00000000 00000000 ff010000     ................
    8370:	80ffffff 00000000 ff1f0000 80ffffff     ................
	...
    838c:	ffffff01 000080ff 00000000 ffffff00     ................
    839c:	000080ff 00000000 00000000 ff010000     ................
    83ac:	80ffffff 00000000 ff000000 80ffffff     ................
	...
    83c8:	ffffff01 000080ff 00000000 ffffff00     ................
    83d8:	000080ff 00000000 00000000 ff010000     ................
    83e8:	80ffffff 00000000 ff000000 80ffffff     ................
	...
    8404:	ffffff01 000080ff 00000000 ffffff00     ................
    8414:	000080ff 00000000 00000000 ff010000     ................
    8424:	80ffffff 00000000 ff000000 80ffffff     ................
	...
    8440:	ffffff01 000080ff 00000000 ffffff00     ................
    8450:	000080ff 00000000 00000000 ff010000     ................
    8460:	80ffffff 00007800 ff000000 80ffffff     .....x..........
	...
    847c:	ffff0100 7f0080ff 00000080 ffffff00     ................
    848c:	000080ff 00000000 00000000 00000000     ................
    849c:	80ffff07 00e07f00 ff000000 80ffffff     ................
	...
    84b8:	1f000000 7f0080ff 000000e0 ffffff00     ................
    84c8:	000080ff 00000000 00000000 00000000     ................
    84d8:	80ff1f00 07e07f00 ff000000 80ffffff     ................
	...
    84f4:	1f000000 7f0080ff 00f007e0 ffffff00     ................
    8504:	000080ff 00000000 00000000 00000000     ................
    8514:	80ff1f00 07e07f00 ff0000fe 80ffffff     ................
	...
    8530:	1f000000 7f0080ff 00fe07e0 ffffff00     ................
    8540:	000080ff 00000000 00000000 00000000     ................
    8550:	80ff1f00 07e07f00 ff0000fe 80ffffff     ................
	...
    856c:	1f000000 7f0080ff 00fe07e0 ffffff00     ................
    857c:	000080ff 00000000 00000000 00000000     ................
    858c:	80ff1f00 07e07f00 ff0000fe 80ffffff     ................
	...
    85a8:	1f000000 7f0080ff 00fe07e0 ffffff00     ................
    85b8:	000080ff 00000000 00000000 00000000     ................
    85c8:	80ff1f00 07e07f00 ff0000fe 80ffffff     ................
	...
    85e4:	1f000000 7f0080ff 00fe07e0 ffffff00     ................
    85f4:	000080ff 00000000 00000000 00000000     ................
    8604:	80ff1f00 07e07f00 ff0000fe 80ffffff     ................
	...
    8620:	1f000000 7f0080ff 00fe07e0 ffffff00     ................
    8630:	000080ff 00000000 00000000 00000000     ................
    8640:	80ff1f00 07e07f00 ff0000fe 80ffffff     ................
	...
    865c:	1f000000 7f0080ff 00fe07e0 ffffff00     ................
    866c:	000080ff 00000000 00000000 00000000     ................
    867c:	80ff1f00 07e03f00 ff0000fe 80ffffff     .....?..........
	...
    8698:	1f000000 3f0080ff 00fe07e0 ffffff00     .......?........
    86a8:	000080ff 00000000 00000000 00000000     ................
    86b8:	80ff1f00 03c01f00 ff0000fe 80ffffff     ................
	...
    86d4:	1f000000 0f0080ff 00fe0180 7ff8ff00     ................
    86e4:	000080ff 00000000 00000000 00000000     ................
    86f4:	80ff1f00 01000000 ff0000fc 80ff03f8     ................
	...
    8710:	1f000000 000080ff 00000000 00f8ff00     ................
    8720:	0000800f 00000000 00000000 00000000     ................
    8730:	80ff1f00 00000000 ff000000 000000f8     ................
	...
    874c:	1f000000 000080ff 00000000 00f8ff00     ................
	...
    876c:	80ff1f00 00000000 ff000000 000000f8     ................
	...
    8788:	1f000000 000080ff 00000000 00f8ff00     ................
	...
    87a8:	c0ff1f00 00000000 ff000000 000000f8     ................
	...
    87c4:	1f000000 0000c0ff 00000000 00f8ff00     ................
	...
    87e4:	c0ff1f00 00000000 ff000000 000000f8     ................
	...
    8800:	1f000000 0000e0ff 00000000 00f8ff01     ................
	...
    8820:	e0ff0f00 00000000 ff010000 000000f8     ................
	...
    883c:	0f000000 0000f0ff 00000000 00f8ff01     ................
	...
    885c:	f0ff0f00 00000000 ff010000 000000f8     ................
	...
    8878:	0f000000 0000f8ff 00002000 00f8ff01     ......... ......
	...
    8898:	fcff0700 60000000 ff010000 000000f8     .......`........
	...
    88b4:	07000000 0000fcff 00007000 00f8ff03     .........p......
	...
    88d4:	feff0700 f0000000 ff030000 000000f8     ................
	...
    88f0:	07000000 0000ffff 0000f801 00f8ff07     ................
	...
    8910:	ffff0300 f8010080 ff070000 000000f8     ................
	...
    892c:	03000000 00e0ffff 0000fc03 00f8ff0f     ................
	...
    894c:	ffff0100 fe0f00f8 ff1f0000 000000f8     ................
	...
    896c:	00ffffff 0000ff7f 00f0ff1f 00000000     ................
	...
    8988:	ffff0000 ffffffff ff3f00c0 000000f0     ..........?.....
	...
    89a8:	ffffff7f 00f0ffff 00f0ffff 00000000     ................
	...
    89c4:	ff3f0000 ffffffff ffff07ff 000000f0     ..?.............
	...
    89e4:	ffffff1f ffffffff 00e0ffff 00000000     ................
	...
    8a00:	ff0f0000 ffffffff ffffffff 000000e0     ................
	...
    8a20:	ffffff07 ffffffff 00c0ffff 00000000     ................
	...
    8a3c:	ff030000 ffffffff ffffffff 00000080     ................
	...
    8a5c:	ffffff00 ffffffff 0080ffff 00000000     ................
	...
    8a78:	7f000000 ffffffff ffffffff 00000000     ................
	...
    8a98:	ffff1f00 ffffdfff 0000feff 00000000     ................
	...
    8ab4:	07000000 07ffffff fcffffff 00000000     ................
	...
    8ad4:	ffff0000 ffff03fc 0000f0ff 00000000     ................
	...
    8af4:	00f0ff1f e0ffffff 00000000 00000000     ................
	...
    8b10:	18000000 ff1f0000 000000ff 00000000     ................
	...
    8b34:	00f8ff03 00000000 00000000 00000000     ................
	...

00008b60 <MR_Logo_240x135>:
	...
    8c3c:	ff010000 ffffffff 0000ffff 00000000     ................
	...
    8c5c:	ffffff01 ffffffff 000000f0 00000000     ................
	...
    8c78:	ff030000 ffffffff 00fcffff 00000000     ................
	...
    8c98:	ffffff03 ffffffff 000000ff 00000000     ................
	...
    8cb4:	ff070000 ffffffff c0ffffff 00000000     ................
	...
    8cd4:	ffffff0f ffffffff 0000e0ff 00000000     ................
	...
    8cf0:	ff0f0000 ffffffff f8ffffff 00000000     ................
	...
    8d10:	ffffff1f ffffffff 0000fcff 00000000     ................
	...
    8d2c:	ff1f0000 ffffffff feffffff 00000000     ................
	...
    8d4c:	ffffff3f ffffffff 0000ffff 00000000     ?...............
	...
    8d68:	ff7f0000 ffffffff ffffffff 00000080     ................
	...
    8d88:	ffffff7f ffffffff 00c0ffff 00000000     ................
	...
    8da4:	ffff0000 ffffffff ffffffff 000000e0     ................
	...
    8dc4:	ffffffff ffffffff 00f0ffff 00000000     ................
	...
    8de0:	ffff0100 ffffffff ffffffff 000000f0     ................
	...
    8dfc:	01000000 ffffffff ffffffff 00f8ffff     ................
	...
    8e1c:	ffff0300 ffffffff ffffffff 000000fc     ................
	...
    8e38:	07000000 ffffffff ffffffff 00fcffff     ................
	...
    8e58:	ffff0700 ffffffff ffffffff 000000fe     ................
	...
    8e74:	0f000000 ffffffff ffffffff 00feffff     ................
	...
    8e94:	ffff0f00 ffffffff ffffffff 000000fe     ................
	...
    8eb0:	1f000000 ffffffff ffffffff 00ffffff     ................
	...
    8ed0:	ffff1f00 ffffffff ffffffff 000000ff     ................
	...
    8eec:	3f000000 00fcffff 0f000000 00ffffff     ...?............
	...
    8f0c:	ffff7f00 000000f8 ffff0100 000080ff     ................
	...
    8f28:	7f000000 00f8ffff 00000000 80ffff7f     ................
	...
    8f48:	ffffff00 000000f0 ff3f0000 000080ff     ..........?.....
	...
    8f64:	ff000000 00e0ffff 00000000 80ffff1f     ................
	...
    8f84:	ffffff01 000000e0 ff0f0000 000080ff     ................
	...
    8fa0:	ff030000 00c0ffff 00000000 c0ffff0f     ................
	...
    8fc0:	ffffff03 000000c0 ff070000 0000c0ff     ................
	...
    8fdc:	ff070000 0080ffff 00000000 c0ffff07     ................
	...
    8ffc:	ffffff07 00000000 ff070000 0000c0ff     ................
	...
    9018:	ff0f0000 0000ffff 00000000 c0ffff03     ................
	...
    9038:	feffff0f 00000000 ff030000 0000c0ff     ................
	...
    9054:	ff1f0000 0000feff 00000000 c0ffff03     ................
	...
    9074:	fcffff3f 00000000 ff070000 0000c0ff     ?...............
	...
    9090:	ff3f0000 0000fcff 00000000 80ffff07     ..?.............
	...
    90b0:	f8ffff7f 00000000 ff070000 000080ff     ................
	...
    90cc:	ff7f0000 0000f0ff 00000000 80ffff0f     ................
	...
    90ec:	f0ffffff 00000000 ff0f0000 000080ff     ................
	...
    9108:	ffff0100 0000e0ff 00000000 80ffff1f     ................
	...
    9124:	01000000 e0ffffff 00000000 ff3f0000     ..............?.
    9134:	000080ff 00000000 00000000 00000000     ................
    9144:	ffff0300 0000c0ff 00000000 00ffff7f     ................
	...
    9160:	03000000 80ffffff 00000000 ffff0100     ................
    9170:	000000ff 00000000 00000000 00000000     ................
    9180:	ffff0700 000080ff 07000000 00feffff     ................
	...
    919c:	0f000000 00ffffff ffffff00 ffffffff     ................
    91ac:	000000fe 00000000 00000000 00000000     ................
    91bc:	ffff0f00 ff0000ff ffffffff 00feffff     ................
	...
    91d8:	1f000000 00feffff ffff7f00 ffffffff     ................
    91e8:	000000fc 00000000 00000000 00000000     ................
    91f8:	ffff1f00 7f0000ff ffffffff 00fcffff     ................
	...
    9214:	3f000000 00ffffff ffff3f00 ffffffff     ...?.....?......
    9224:	000000f8 00000000 00000000 00000000     ................
    9234:	ffff3f00 3f0080ff ffffffff 00f0ffff     .?.....?........
	...
    9250:	7f000000 80ffffff ffff1f00 ffffffff     ................
    9260:	000000f0 00000000 00000000 00000000     ................
    9270:	ffffff00 1f00c0ff ffffffff 00e0ffff     ................
	...
    928c:	ff000000 c0ffffff ffff0f00 ffffffff     ................
    929c:	000000c0 00000000 00000000 00000000     ................
    92ac:	ffffff01 0f00e0ff ffffffff 0080ffff     ................
	...
    92c8:	ff010000 e0ffffff ffff0700 ffffffff     ................
	...
    92e8:	ffffff03 0700f0ff ffffffff 0000feff     ................
	...
    9304:	ff030000 f0ffffff ffff0300 fcffffff     ................
	...
    9324:	ffffff07 0300f8ff ffffffff 0000f8ff     ................
	...
    9340:	ff0f0000 f8ffffff ffff0100 f0ffffff     ................
	...
    9360:	ffffff0f 0100fcff ffffffff 0000c0ff     ................
	...
    937c:	ff1f0000 fcffffff ffff0000 00ffffff     ................
	...
    939c:	ffffff1f 0000feff ffffffff 000000fc     ................
	...
    93b8:	ff3f0000 feffffff ff7f0000 00f0ffff     ..?.............
	...
    93d8:	ffffff7f 0000ffff ffffff7f 00000080     ................
	...
    93f4:	ff7f0000 ffffffff ff3f0000 0000feff     ..........?.....
	...
    9414:	ffffffff 0080ffff ffffff3f 00000000     ........?.......
	...
    9430:	ffff0000 ffffffff ff1f0080 0000ffff     ................
	...
    944c:	01000000 ffffffff 00c0ffff ffffff1f     ................
    945c:	00000080 00000000 00000000 00000000     ................
    946c:	ffff0100 ffffffff ff0f00c0 0080ffff     ................
	...
    9488:	03000000 ffffffff 00e0ffff ffffff0f     ................
    9498:	000000c0 00000000 00000000 00000000     ................
    94a8:	ffff0700 ffffffff ff0700e0 00c0ffff     ................
	...
    94c4:	07000000 ffffffff 00f0ffff ffffff07     ................
    94d4:	000000e0 00000000 00000000 00000000     ................
    94e4:	ffff0f00 ffff3fff ff0300f0 00e0ffff     .....?..........
	...
    9500:	0f000000 3ffeffff 00f8ffff ffffff03     .......?........
    9510:	000000f0 00000000 00000000 00000000     ................
    9520:	ffff1f00 ffff1ffe ff0100f8 00f0ffff     ................
	...
    953c:	3f000000 1ffcffff 00fcffff ffffff01     ...?............
    954c:	000000f8 00000000 00000000 00000000     ................
    955c:	ffff3f00 ffff0ffc ff0000fc 00f8ffff     .?..............
	...
    9578:	7f000000 0ff8ffff 00feffff ffffff00     ................
    9588:	000000fc 00000000 00000000 00000000     ................
    9598:	ffff7f00 ffff07f8 7f0000fe 00fcffff     ................
	...
    95b4:	ff000000 07f0ffff 00ffffff ffff7f00     ................
    95c4:	000000fe 00000000 00000000 00000000     ................
    95d4:	ffffff01 ffff03e0 3f0000ff 00feffff     ...........?....
	...
    95f0:	ff010000 03e0ffff 80ffffff ffff3f00     .............?..
    9600:	000000ff 00000000 00000000 00000000     ................
    9610:	ffffff01 ffff01c0 1f0080ff 00ffffff     ................
	...
    962c:	ff000000 01c0ffff c0ffffff ffff1f00     ................
    963c:	000080ff 00000000 00000000 00000000     ................
    964c:	ffffff00 ffff0080 0f00c0ff 80ffffff     ................
	...
    9668:	7f000000 0080ffff e0ffffff ffff0f00     ................
    9678:	0000c0ff 00000000 00000000 00000000     ................
    9688:	ffff7f00 ff7f00c0 0700e0ff c0ffffff     ................
	...
    96a4:	3f000000 00c0ffff f0ffff7f ffff0700     ...?............
    96b4:	0000e0ff 00000000 00000000 00000000     ................
    96c4:	ffff3f00 ff3f00e0 0300f0ff e0ffffff     .?....?.........
	...
    96e0:	1f000000 00e0ffff f8ffff3f ffff0300     ........?.......
    96f0:	0000f0ff 00000000 00000000 00000000     ................
    9700:	ffff1f00 ff1f00f0 0100f8ff f0ffffff     ................
	...
    971c:	0f000000 00f0ffff fcffff1f ffff0100     ................
    972c:	0000f8ff 00000000 00000000 00000000     ................
    973c:	ffff0f00 ff0f00f8 0000fcff f8ffffff     ................
	...
    9758:	07000000 00f8ffff feffff0f ffff0000     ................
    9768:	0000fcff 00000000 00000000 00000000     ................
    9778:	ffff0700 ff0700fc 0000feff fcffff7f     ................
	...
    9794:	03000000 00fcffff ffffff07 ff7f0000     ................
    97a4:	0000feff 00000000 00000000 00000000     ................
    97b4:	ffff0300 ff0300fe 0000ffff feffff3f     ............?...
	...
    97d0:	01000000 00feffff ffffff03 ff3f0080     ..............?.
    97e0:	0000ffff 00000000 00000000 00000000     ................
    97f0:	ffff0100 ff0100ff 0080ffff ffffff1f     ................
	...
    9810:	00ffffff ffffff01 ff1f00c0 0080ffff     ................
	...
    982c:	ffff0000 ff0080ff 00c0ffff ffffff0f     ................
    983c:	00000080 00000000 00000000 00000000     ................
    984c:	80ffff7f ffffff00 ff0f00e0 00c0ffff     ................
	...
    9868:	ff7f0000 7f00c0ff 00e0ffff ffffff07     ................
    9878:	000000c0 00000000 00000000 00000000     ................
    9888:	c0ffff3f ffff7f00 ff0700f0 00e0ffff     ?...............
	...
    98a4:	ff3f0000 3f00e0ff 00f0ffff ffffff03     ..?....?........
    98b4:	000000e0 00000000 00000000 00000000     ................
    98c4:	e0ffff1f ffff3f00 ff0300f8 00f0ffff     .....?..........
	...
    98e0:	ff1f0000 1f00f0ff 00f8ffff ffffff01     ................
    98f0:	000000f0 00000000 00000000 00000000     ................
    9900:	f0ffff0f ffff1f00 ff0100fc 00f8ffff     ................
	...
    991c:	ff0f0000 0f00f8ff 00fcffff ffffff00     ................
    992c:	000000f8 00000000 00000000 00000000     ................
    993c:	f8ffff07 ffff0f00 ff0000fe 00fcffff     ................
	...
    9958:	ff070000 0700fcff 00feffff ffff7f00     ................
    9968:	000000fc 00000000 00000000 00000000     ................
    9978:	fcffff03 ffff0700 7f0000ff 00feffff     ................
	...
    9994:	ff030000 0300feff 00ffffff ffff3f00     .............?..
    99a4:	000000fe 00000000 00000000 00000000     ................
    99b4:	feffff01 ffff0300 3f0080ff 00ffffff     ...........?....
	...
    99d0:	ff010000 0100ffff 80ffffff ffff1f00     ................
    99e0:	000000ff 00000000 00000000 00000000     ................
    99f0:	ffffff00 ffff0100 1f00c0ff 80ffffff     ................
	...
    9a0c:	ff000000 0080ffff c0ffffff ffff0f00     ................
    9a1c:	000080ff 00000000 00000000 00000000     ................
    9a2c:	ffff7f00 ffff0080 0f00e0ff c0ffffff     ................
	...
    9a48:	7f000000 00c0ffff e0ffff7f ffff0700     ................
    9a58:	0000c0ff 00000000 00000000 00000000     ................
    9a68:	ffff3f00 ff7f00c0 0700f0ff c0ffffff     .?..............
	...
    9b34:	6c6c6548 6f57206f 00646c72 37375453     Hello World.ST77
    9b44:	44203938 6c707369 00007961 68746957     89 Display..With
    9b54:	4d415320 4a313244 00003831 41532026      SAMD21J18..& SA
    9b64:	32324c4d 0038314a 68746957 49505320     ML22J18.With SPI
    9b74:	73754220 00000000 676f7250 6d6d6172      Bus....Programm
    9b84:	62206465 00000079 61522e4d 68736177     ed by...M.Rawash
    9b94:	00686564 6372614d 30322068 00003032     deh.March 2020..

00009ba4 <_global_impure_ptr>:
    9ba4:	20000030                                0.. 

00009ba8 <_init>:
    9ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9baa:	46c0      	nop			; (mov r8, r8)
    9bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9bae:	bc08      	pop	{r3}
    9bb0:	469e      	mov	lr, r3
    9bb2:	4770      	bx	lr

00009bb4 <__init_array_start>:
    9bb4:	00002325 	.word	0x00002325

00009bb8 <__frame_dummy_init_array_entry>:
    9bb8:	000000dd                                ....

00009bbc <_fini>:
    9bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9bbe:	46c0      	nop			; (mov r8, r8)
    9bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9bc2:	bc08      	pop	{r3}
    9bc4:	469e      	mov	lr, r3
    9bc6:	4770      	bx	lr

00009bc8 <__fini_array_start>:
    9bc8:	000000b5 	.word	0x000000b5
